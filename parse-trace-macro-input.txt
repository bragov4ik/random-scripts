    = note: expanding `benchmarks! { where_clause { where T : trading_pair :: Config + core :: fmt :: Debug }
            #[configs((x, y) = [(1, 2), (3, 4)])] delete_orderbook { let aboba = 1234 ; }
            :
            {
                OrderBookPallet :: < T > ::
                delete_orderbook(RawOrigin :: Root.into(), order_book_id).unwrap() ;
            } verify
            {
                assert_eq! (OrderBookPallet :: < T > :: order_books(order_book_id), None)
                ;
            } }`
    = note: to `$crate :: benchmarks_iter!
            ({} {} {} () () () () where_clause
            { where T : trading_pair :: Config + core :: fmt :: Debug }
            #[configs((x, y) = [(1, 2), (3, 4)])] delete_orderbook { let aboba = 1234 ; }
            :
            {
                OrderBookPallet :: < T > ::
                delete_orderbook(RawOrigin :: Root.into(), order_book_id).unwrap() ;
            } verify
            {
                assert_eq! (OrderBookPallet :: < T > :: order_books(order_book_id), None)
                ;
            }) ;`
    = note: expanding `benchmarks_iter! { {} {} {} () () () () where_clause
            { where T : trading_pair :: Config + core :: fmt :: Debug }
            #[configs((x, y) = [(1, 2), (3, 4)])] delete_orderbook { let aboba = 1234 ; }
            :
            {
                OrderBookPallet :: < T > ::
                delete_orderbook(RawOrigin :: Root.into(), order_book_id).unwrap() ;
            } verify
            {
                assert_eq! (OrderBookPallet :: < T > :: order_books(order_book_id), None)
                ;
            } }`
    = note: to `$crate :: benchmarks_iter!
            {
                {} {} { T : trading_pair :: Config + core :: fmt :: Debug } () () () ()
                #[configs((x, y) = [(1, 2), (3, 4)])] delete_orderbook
                { let aboba = 1234 ; } :
                {
                    OrderBookPallet :: < T > ::
                    delete_orderbook(RawOrigin :: Root.into(), order_book_id).unwrap() ;
                } verify
                {
                    assert_eq!
                    (OrderBookPallet :: < T > :: order_books(order_book_id), None) ;
                }
            }`
    = note: expanding `benchmarks_iter! { {} {} { T : trading_pair :: Config + core :: fmt :: Debug } () () () ()
            #[configs((x, y) = [(1, 2), (3, 4)])] delete_orderbook { let aboba = 1234 ; }
            :
            {
                OrderBookPallet :: < T > ::
                delete_orderbook(RawOrigin :: Root.into(), order_book_id).unwrap() ;
            } verify
            {
                assert_eq! (OrderBookPallet :: < T > :: order_books(order_book_id), None)
                ;
            } }`
    = note: to `$crate :: benchmarks_iter!
            ({} {} { T : trading_pair :: Config + core :: fmt :: Debug } () () () ()
            #[configs((x, y) = [(1, 2), (3, 4)])] delete_orderbook { let aboba = 1234 ; }
            :
            {
                OrderBookPallet::<T>::delete_orderbook(RawOrigin::Root.into(),
                        order_book_id).unwrap();
            }
            verify {} verify
            {
                assert_eq! (OrderBookPallet :: < T > :: order_books(order_book_id), None)
                ;
            }) ;`
    = note: expanding `benchmarks_iter! { {} {} { T : trading_pair :: Config + core :: fmt :: Debug } () () () ()
            #[configs((x, y) = [(1, 2), (3, 4)])] delete_orderbook { let aboba = 1234 ; }
            :
            {
                OrderBookPallet::<T>::delete_orderbook(RawOrigin::Root.into(),
                        order_book_id).unwrap();
            }
            verify {} verify
            {
                assert_eq! (OrderBookPallet :: < T > :: order_books(order_book_id), None)
                ;
            } }`
    = note: to `$crate :: benchmarks_iter!
            ({} {} { T : trading_pair :: Config + core :: fmt :: Debug } () () () ()
            #[configs((x, y) = [(1, 2), (3, 4)])] delete_orderbook { let aboba = 1234 ; }
            :
            {
                OrderBookPallet::<T>::delete_orderbook(RawOrigin::Root.into(),
                        order_book_id).unwrap();
            }
            verify {} verify {} verify
            {
                assert_eq! (OrderBookPallet :: < T > :: order_books(order_book_id), None)
                ;
            }) ;`
    = note: expanding `benchmarks_iter! { {} {} { T : trading_pair :: Config + core :: fmt :: Debug } () () () ()
            #[configs((x, y) = [(1, 2), (3, 4)])] delete_orderbook { let aboba = 1234 ; }
            :
            {
                OrderBookPallet::<T>::delete_orderbook(RawOrigin::Root.into(),
                        order_book_id).unwrap();
            }
            verify {} verify {} verify
            {
                assert_eq! (OrderBookPallet :: < T > :: order_books(order_book_id), None)
                ;
            } }`
    = note: to `$crate :: benchmarks_iter!
            ({} {} { T : trading_pair :: Config + core :: fmt :: Debug } () () () ()
            #[configs((x, y) = [(1, 2), (3, 4)])] delete_orderbook { let aboba = 1234 ; }
            :
            {
                OrderBookPallet::<T>::delete_orderbook(RawOrigin::Root.into(),
                        order_book_id).unwrap();
            }
            verify {} verify {} verify {} verify
            {
                assert_eq! (OrderBookPallet :: < T > :: order_books(order_book_id), None)
                ;
            }) ;`
    = note: expanding `benchmarks_iter! { {} {} { T : trading_pair :: Config + core :: fmt :: Debug } () () () ()
            #[configs((x, y) = [(1, 2), (3, 4)])] delete_orderbook { let aboba = 1234 ; }
            :
            {
                OrderBookPallet::<T>::delete_orderbook(RawOrigin::Root.into(),
                        order_book_id).unwrap();
            }
            verify {} verify {} verify {} verify
            {
                assert_eq! (OrderBookPallet :: < T > :: order_books(order_book_id), None)
                ;
            } }`
    = note: to `$crate :: benchmarks_iter!
            ({} {} { T : trading_pair :: Config + core :: fmt :: Debug } () () () ()
            #[configs((x, y) = [(1, 2), (3, 4)])] delete_orderbook { let aboba = 1234 ; }
            :
            {
                OrderBookPallet::<T>::delete_orderbook(RawOrigin::Root.into(),
                        order_book_id).unwrap();
            }
            verify {} verify {} verify {} verify {} verify
            {
                assert_eq! (OrderBookPallet :: < T > :: order_books(order_book_id), None)
                ;
            }) ;`
    = note: expanding `benchmarks_iter! { {} {} { T : trading_pair :: Config + core :: fmt :: Debug } () () () ()
            #[configs((x, y) = [(1, 2), (3, 4)])] delete_orderbook { let aboba = 1234 ; }
            :
            {
                OrderBookPallet::<T>::delete_orderbook(RawOrigin::Root.into(),
                        order_book_id).unwrap();
            }
            verify {} verify {} verify {} verify {} verify
            {
                assert_eq! (OrderBookPallet :: < T > :: order_books(order_book_id), None)
                ;
            } }`
    = note: to `$crate :: benchmarks_iter!
            ({} {} { T : trading_pair :: Config + core :: fmt :: Debug } () () () ()
            #[configs((x, y) = [(1, 2), (3, 4)])] delete_orderbook { let aboba = 1234 ; }
            :
            {
                OrderBookPallet::<T>::delete_orderbook(RawOrigin::Root.into(),
                        order_book_id).unwrap();
            }
            verify {} verify {} verify {} verify {} verify {} verify
            {
                assert_eq! (OrderBookPallet :: < T > :: order_books(order_book_id), None)
                ;
            }) ;`
    = note: expanding `benchmarks_iter! { {} {} { T : trading_pair :: Config + core :: fmt :: Debug } () () () ()
            #[configs((x, y) = [(1, 2), (3, 4)])] delete_orderbook { let aboba = 1234 ; }
            :
            {
                OrderBookPallet::<T>::delete_orderbook(RawOrigin::Root.into(),
                        order_book_id).unwrap();
            }
            verify {} verify {} verify {} verify {} verify {} verify
            {
                assert_eq! (OrderBookPallet :: < T > :: order_books(order_book_id), None)
                ;
            } }`
    = note: to `$crate :: benchmarks_iter!
            ({} {} { T : trading_pair :: Config + core :: fmt :: Debug } () () () ()
            #[configs((x, y) = [(1, 2), (3, 4)])] delete_orderbook { let aboba = 1234 ; }
            :
            {
                OrderBookPallet::<T>::delete_orderbook(RawOrigin::Root.into(),
                        order_book_id).unwrap();
            }
            verify {} verify {} verify {} verify {} verify {} verify {} verify
            {
                assert_eq! (OrderBookPallet :: < T > :: order_books(order_book_id), None)
                ;
            }) ;`
    = note: expanding `benchmarks_iter! { {} {} { T : trading_pair :: Config + core :: fmt :: Debug } () () () ()
            #[configs((x, y) = [(1, 2), (3, 4)])] delete_orderbook { let aboba = 1234 ; }
            :
            {
                OrderBookPallet::<T>::delete_orderbook(RawOrigin::Root.into(),
                        order_book_id).unwrap();
            }
            verify {} verify {} verify {} verify {} verify {} verify {} verify
            {
                assert_eq! (OrderBookPallet :: < T > :: order_books(order_book_id), None)
                ;
            } }`
    = note: to `$crate :: benchmarks_iter!
            ({} {} { T : trading_pair :: Config + core :: fmt :: Debug } () () () ()
            #[configs((x, y) = [(1, 2), (3, 4)])] delete_orderbook { let aboba = 1234 ; }
            :
            {
                OrderBookPallet::<T>::delete_orderbook(RawOrigin::Root.into(),
                        order_book_id).unwrap();
            }
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {
                assert_eq! (OrderBookPallet :: < T > :: order_books(order_book_id), None)
                ;
            }) ;`
    = note: expanding `benchmarks_iter! { {} {} { T : trading_pair :: Config + core :: fmt :: Debug } () () () ()
            #[configs((x, y) = [(1, 2), (3, 4)])] delete_orderbook { let aboba = 1234 ; }
            :
            {
                OrderBookPallet::<T>::delete_orderbook(RawOrigin::Root.into(),
                        order_book_id).unwrap();
            }
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {
                assert_eq! (OrderBookPallet :: < T > :: order_books(order_book_id), None)
                ;
            } }`
    = note: to `$crate :: benchmarks_iter!
            ({} {} { T : trading_pair :: Config + core :: fmt :: Debug } () () () ()
            #[configs((x, y) = [(1, 2), (3, 4)])] delete_orderbook { let aboba = 1234 ; }
            :
            {
                OrderBookPallet::<T>::delete_orderbook(RawOrigin::Root.into(),
                        order_book_id).unwrap();
            }
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify
            {
                assert_eq! (OrderBookPallet :: < T > :: order_books(order_book_id), None)
                ;
            }) ;`
    = note: expanding `benchmarks_iter! { {} {} { T : trading_pair :: Config + core :: fmt :: Debug } () () () ()
            #[configs((x, y) = [(1, 2), (3, 4)])] delete_orderbook { let aboba = 1234 ; }
            :
            {
                OrderBookPallet::<T>::delete_orderbook(RawOrigin::Root.into(),
                        order_book_id).unwrap();
            }
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify
            {
                assert_eq! (OrderBookPallet :: < T > :: order_books(order_book_id), None)
                ;
            } }`
    = note: to `$crate :: benchmarks_iter!
            ({} {} { T : trading_pair :: Config + core :: fmt :: Debug } () () () ()
            #[configs((x, y) = [(1, 2), (3, 4)])] delete_orderbook { let aboba = 1234 ; }
            :
            {
                OrderBookPallet::<T>::delete_orderbook(RawOrigin::Root.into(),
                        order_book_id).unwrap();
            }
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify
            {
                assert_eq! (OrderBookPallet :: < T > :: order_books(order_book_id), None)
                ;
            }) ;`
    = note: expanding `benchmarks_iter! { {} {} { T : trading_pair :: Config + core :: fmt :: Debug } () () () ()
            #[configs((x, y) = [(1, 2), (3, 4)])] delete_orderbook { let aboba = 1234 ; }
            :
            {
                OrderBookPallet::<T>::delete_orderbook(RawOrigin::Root.into(),
                        order_book_id).unwrap();
            }
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify
            {
                assert_eq! (OrderBookPallet :: < T > :: order_books(order_book_id), None)
                ;
            } }`
    = note: to `$crate :: benchmarks_iter!
            ({} {} { T : trading_pair :: Config + core :: fmt :: Debug } () () () ()
            #[configs((x, y) = [(1, 2), (3, 4)])] delete_orderbook { let aboba = 1234 ; }
            :
            {
                OrderBookPallet::<T>::delete_orderbook(RawOrigin::Root.into(),
                        order_book_id).unwrap();
            }
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify
            {
                assert_eq! (OrderBookPallet :: < T > :: order_books(order_book_id), None)
                ;
            }) ;`
    = note: expanding `benchmarks_iter! { {} {} { T : trading_pair :: Config + core :: fmt :: Debug } () () () ()
            #[configs((x, y) = [(1, 2), (3, 4)])] delete_orderbook { let aboba = 1234 ; }
            :
            {
                OrderBookPallet::<T>::delete_orderbook(RawOrigin::Root.into(),
                        order_book_id).unwrap();
            }
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify
            {
                assert_eq! (OrderBookPallet :: < T > :: order_books(order_book_id), None)
                ;
            } }`
    = note: to `$crate :: benchmarks_iter!
            ({} {} { T : trading_pair :: Config + core :: fmt :: Debug } () () () ()
            #[configs((x, y) = [(1, 2), (3, 4)])] delete_orderbook { let aboba = 1234 ; }
            :
            {
                OrderBookPallet::<T>::delete_orderbook(RawOrigin::Root.into(),
                        order_book_id).unwrap();
            }
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify
            {
                assert_eq! (OrderBookPallet :: < T > :: order_books(order_book_id), None)
                ;
            }) ;`
    = note: expanding `benchmarks_iter! { {} {} { T : trading_pair :: Config + core :: fmt :: Debug } () () () ()
            #[configs((x, y) = [(1, 2), (3, 4)])] delete_orderbook { let aboba = 1234 ; }
            :
            {
                OrderBookPallet::<T>::delete_orderbook(RawOrigin::Root.into(),
                        order_book_id).unwrap();
            }
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify
            {
                assert_eq! (OrderBookPallet :: < T > :: order_books(order_book_id), None)
                ;
            } }`
    = note: to `$crate :: benchmarks_iter!
            ({} {} { T : trading_pair :: Config + core :: fmt :: Debug } () () () ()
            #[configs((x, y) = [(1, 2), (3, 4)])] delete_orderbook { let aboba = 1234 ; }
            :
            {
                OrderBookPallet::<T>::delete_orderbook(RawOrigin::Root.into(),
                        order_book_id).unwrap();
            }
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify
            {
                assert_eq! (OrderBookPallet :: < T > :: order_books(order_book_id), None)
                ;
            }) ;`
    = note: expanding `benchmarks_iter! { {} {} { T : trading_pair :: Config + core :: fmt :: Debug } () () () ()
            #[configs((x, y) = [(1, 2), (3, 4)])] delete_orderbook { let aboba = 1234 ; }
            :
            {
                OrderBookPallet::<T>::delete_orderbook(RawOrigin::Root.into(),
                        order_book_id).unwrap();
            }
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify
            {
                assert_eq! (OrderBookPallet :: < T > :: order_books(order_book_id), None)
                ;
            } }`
    = note: to `$crate :: benchmarks_iter!
            ({} {} { T : trading_pair :: Config + core :: fmt :: Debug } () () () ()
            #[configs((x, y) = [(1, 2), (3, 4)])] delete_orderbook { let aboba = 1234 ; }
            :
            {
                OrderBookPallet::<T>::delete_orderbook(RawOrigin::Root.into(),
                        order_book_id).unwrap();
            }
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify
            {
                assert_eq! (OrderBookPallet :: < T > :: order_books(order_book_id), None)
                ;
            }) ;`
    = note: expanding `benchmarks_iter! { {} {} { T : trading_pair :: Config + core :: fmt :: Debug } () () () ()
            #[configs((x, y) = [(1, 2), (3, 4)])] delete_orderbook { let aboba = 1234 ; }
            :
            {
                OrderBookPallet::<T>::delete_orderbook(RawOrigin::Root.into(),
                        order_book_id).unwrap();
            }
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify
            {
                assert_eq! (OrderBookPallet :: < T > :: order_books(order_book_id), None)
                ;
            } }`
    = note: to `$crate :: benchmarks_iter!
            ({} {} { T : trading_pair :: Config + core :: fmt :: Debug } () () () ()
            #[configs((x, y) = [(1, 2), (3, 4)])] delete_orderbook { let aboba = 1234 ; }
            :
            {
                OrderBookPallet::<T>::delete_orderbook(RawOrigin::Root.into(),
                        order_book_id).unwrap();
            }
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {
                assert_eq! (OrderBookPallet :: < T > :: order_books(order_book_id), None)
                ;
            }) ;`
    = note: expanding `benchmarks_iter! { {} {} { T : trading_pair :: Config + core :: fmt :: Debug } () () () ()
            #[configs((x, y) = [(1, 2), (3, 4)])] delete_orderbook { let aboba = 1234 ; }
            :
            {
                OrderBookPallet::<T>::delete_orderbook(RawOrigin::Root.into(),
                        order_book_id).unwrap();
            }
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {
                assert_eq! (OrderBookPallet :: < T > :: order_books(order_book_id), None)
                ;
            } }`
    = note: to `$crate :: benchmarks_iter!
            ({} {} { T : trading_pair :: Config + core :: fmt :: Debug } () () () ()
            #[configs((x, y) = [(1, 2), (3, 4)])] delete_orderbook { let aboba = 1234 ; }
            :
            {
                OrderBookPallet::<T>::delete_orderbook(RawOrigin::Root.into(),
                        order_book_id).unwrap();
            }
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify
            {
                assert_eq! (OrderBookPallet :: < T > :: order_books(order_book_id), None)
                ;
            }) ;`
    = note: expanding `benchmarks_iter! { {} {} { T : trading_pair :: Config + core :: fmt :: Debug } () () () ()
            #[configs((x, y) = [(1, 2), (3, 4)])] delete_orderbook { let aboba = 1234 ; }
            :
            {
                OrderBookPallet::<T>::delete_orderbook(RawOrigin::Root.into(),
                        order_book_id).unwrap();
            }
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify
            {
                assert_eq! (OrderBookPallet :: < T > :: order_books(order_book_id), None)
                ;
            } }`
    = note: to `$crate :: benchmarks_iter!
            ({} {} { T : trading_pair :: Config + core :: fmt :: Debug } () () () ()
            #[configs((x, y) = [(1, 2), (3, 4)])] delete_orderbook { let aboba = 1234 ; }
            :
            {
                OrderBookPallet::<T>::delete_orderbook(RawOrigin::Root.into(),
                        order_book_id).unwrap();
            }
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify
            {
                assert_eq! (OrderBookPallet :: < T > :: order_books(order_book_id), None)
                ;
            }) ;`
    = note: expanding `benchmarks_iter! { {} {} { T : trading_pair :: Config + core :: fmt :: Debug } () () () ()
            #[configs((x, y) = [(1, 2), (3, 4)])] delete_orderbook { let aboba = 1234 ; }
            :
            {
                OrderBookPallet::<T>::delete_orderbook(RawOrigin::Root.into(),
                        order_book_id).unwrap();
            }
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify
            {
                assert_eq! (OrderBookPallet :: < T > :: order_books(order_book_id), None)
                ;
            } }`
    = note: to `$crate :: benchmarks_iter!
            ({} {} { T : trading_pair :: Config + core :: fmt :: Debug } () () () ()
            #[configs((x, y) = [(1, 2), (3, 4)])] delete_orderbook { let aboba = 1234 ; }
            :
            {
                OrderBookPallet::<T>::delete_orderbook(RawOrigin::Root.into(),
                        order_book_id).unwrap();
            }
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify
            {
                assert_eq! (OrderBookPallet :: < T > :: order_books(order_book_id), None)
                ;
            }) ;`
    = note: expanding `benchmarks_iter! { {} {} { T : trading_pair :: Config + core :: fmt :: Debug } () () () ()
            #[configs((x, y) = [(1, 2), (3, 4)])] delete_orderbook { let aboba = 1234 ; }
            :
            {
                OrderBookPallet::<T>::delete_orderbook(RawOrigin::Root.into(),
                        order_book_id).unwrap();
            }
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify
            {
                assert_eq! (OrderBookPallet :: < T > :: order_books(order_book_id), None)
                ;
            } }`
    = note: to `$crate :: benchmarks_iter!
            ({} {} { T : trading_pair :: Config + core :: fmt :: Debug } () () () ()
            #[configs((x, y) = [(1, 2), (3, 4)])] delete_orderbook { let aboba = 1234 ; }
            :
            {
                OrderBookPallet::<T>::delete_orderbook(RawOrigin::Root.into(),
                        order_book_id).unwrap();
            }
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify
            {
                assert_eq! (OrderBookPallet :: < T > :: order_books(order_book_id), None)
                ;
            }) ;`
    = note: expanding `benchmarks_iter! { {} {} { T : trading_pair :: Config + core :: fmt :: Debug } () () () ()
            #[configs((x, y) = [(1, 2), (3, 4)])] delete_orderbook { let aboba = 1234 ; }
            :
            {
                OrderBookPallet::<T>::delete_orderbook(RawOrigin::Root.into(),
                        order_book_id).unwrap();
            }
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify
            {
                assert_eq! (OrderBookPallet :: < T > :: order_books(order_book_id), None)
                ;
            } }`
    = note: to `$crate :: benchmarks_iter!
            ({} {} { T : trading_pair :: Config + core :: fmt :: Debug } () () () ()
            #[configs((x, y) = [(1, 2), (3, 4)])] delete_orderbook { let aboba = 1234 ; }
            :
            {
                OrderBookPallet::<T>::delete_orderbook(RawOrigin::Root.into(),
                        order_book_id).unwrap();
            }
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify
            {
                assert_eq! (OrderBookPallet :: < T > :: order_books(order_book_id), None)
                ;
            }) ;`
    = note: expanding `benchmarks_iter! { {} {} { T : trading_pair :: Config + core :: fmt :: Debug } () () () ()
            #[configs((x, y) = [(1, 2), (3, 4)])] delete_orderbook { let aboba = 1234 ; }
            :
            {
                OrderBookPallet::<T>::delete_orderbook(RawOrigin::Root.into(),
                        order_book_id).unwrap();
            }
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify
            {
                assert_eq! (OrderBookPallet :: < T > :: order_books(order_book_id), None)
                ;
            } }`
    = note: to `$crate :: benchmarks_iter!
            ({} {} { T : trading_pair :: Config + core :: fmt :: Debug } () () () ()
            #[configs((x, y) = [(1, 2), (3, 4)])] delete_orderbook { let aboba = 1234 ; }
            :
            {
                OrderBookPallet::<T>::delete_orderbook(RawOrigin::Root.into(),
                        order_book_id).unwrap();
            }
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify
            {
                assert_eq! (OrderBookPallet :: < T > :: order_books(order_book_id), None)
                ;
            }) ;`
    = note: expanding `benchmarks_iter! { {} {} { T : trading_pair :: Config + core :: fmt :: Debug } () () () ()
            #[configs((x, y) = [(1, 2), (3, 4)])] delete_orderbook { let aboba = 1234 ; }
            :
            {
                OrderBookPallet::<T>::delete_orderbook(RawOrigin::Root.into(),
                        order_book_id).unwrap();
            }
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify
            {
                assert_eq! (OrderBookPallet :: < T > :: order_books(order_book_id), None)
                ;
            } }`
    = note: to `$crate :: benchmarks_iter!
            ({} {} { T : trading_pair :: Config + core :: fmt :: Debug } () () () ()
            #[configs((x, y) = [(1, 2), (3, 4)])] delete_orderbook { let aboba = 1234 ; }
            :
            {
                OrderBookPallet::<T>::delete_orderbook(RawOrigin::Root.into(),
                        order_book_id).unwrap();
            }
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify
            {
                assert_eq! (OrderBookPallet :: < T > :: order_books(order_book_id), None)
                ;
            }) ;`
    = note: expanding `benchmarks_iter! { {} {} { T : trading_pair :: Config + core :: fmt :: Debug } () () () ()
            #[configs((x, y) = [(1, 2), (3, 4)])] delete_orderbook { let aboba = 1234 ; }
            :
            {
                OrderBookPallet::<T>::delete_orderbook(RawOrigin::Root.into(),
                        order_book_id).unwrap();
            }
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify
            {
                assert_eq! (OrderBookPallet :: < T > :: order_books(order_book_id), None)
                ;
            } }`
    = note: to `$crate :: benchmarks_iter!
            ({} {} { T : trading_pair :: Config + core :: fmt :: Debug } () () () ()
            #[configs((x, y) = [(1, 2), (3, 4)])] delete_orderbook { let aboba = 1234 ; }
            :
            {
                OrderBookPallet::<T>::delete_orderbook(RawOrigin::Root.into(),
                        order_book_id).unwrap();
            }
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {
                assert_eq! (OrderBookPallet :: < T > :: order_books(order_book_id), None)
                ;
            }) ;`
    = note: expanding `benchmarks_iter! { {} {} { T : trading_pair :: Config + core :: fmt :: Debug } () () () ()
            #[configs((x, y) = [(1, 2), (3, 4)])] delete_orderbook { let aboba = 1234 ; }
            :
            {
                OrderBookPallet::<T>::delete_orderbook(RawOrigin::Root.into(),
                        order_book_id).unwrap();
            }
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {
                assert_eq! (OrderBookPallet :: < T > :: order_books(order_book_id), None)
                ;
            } }`
    = note: to `$crate :: benchmarks_iter!
            ({} {} { T : trading_pair :: Config + core :: fmt :: Debug } () () () ()
            #[configs((x, y) = [(1, 2), (3, 4)])] delete_orderbook { let aboba = 1234 ; }
            :
            {
                OrderBookPallet::<T>::delete_orderbook(RawOrigin::Root.into(),
                        order_book_id).unwrap();
            }
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify
            {
                assert_eq! (OrderBookPallet :: < T > :: order_books(order_book_id), None)
                ;
            }) ;`
    = note: expanding `benchmarks_iter! { {} {} { T : trading_pair :: Config + core :: fmt :: Debug } () () () ()
            #[configs((x, y) = [(1, 2), (3, 4)])] delete_orderbook { let aboba = 1234 ; }
            :
            {
                OrderBookPallet::<T>::delete_orderbook(RawOrigin::Root.into(),
                        order_book_id).unwrap();
            }
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify
            {
                assert_eq! (OrderBookPallet :: < T > :: order_books(order_book_id), None)
                ;
            } }`
    = note: to `$crate :: benchmarks_iter!
            ({} {} { T : trading_pair :: Config + core :: fmt :: Debug } () () () ()
            #[configs((x, y) = [(1, 2), (3, 4)])] delete_orderbook { let aboba = 1234 ; }
            :
            {
                OrderBookPallet::<T>::delete_orderbook(RawOrigin::Root.into(),
                        order_book_id).unwrap();
            }
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify
            {
                assert_eq! (OrderBookPallet :: < T > :: order_books(order_book_id), None)
                ;
            }) ;`
    = note: expanding `benchmarks_iter! { {} {} { T : trading_pair :: Config + core :: fmt :: Debug } () () () ()
            #[configs((x, y) = [(1, 2), (3, 4)])] delete_orderbook { let aboba = 1234 ; }
            :
            {
                OrderBookPallet::<T>::delete_orderbook(RawOrigin::Root.into(),
                        order_book_id).unwrap();
            }
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify
            {
                assert_eq! (OrderBookPallet :: < T > :: order_books(order_book_id), None)
                ;
            } }`
    = note: to `$crate :: benchmarks_iter!
            ({} {} { T : trading_pair :: Config + core :: fmt :: Debug } () () () ()
            #[configs((x, y) = [(1, 2), (3, 4)])] delete_orderbook { let aboba = 1234 ; }
            :
            {
                OrderBookPallet::<T>::delete_orderbook(RawOrigin::Root.into(),
                        order_book_id).unwrap();
            }
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify
            {
                assert_eq! (OrderBookPallet :: < T > :: order_books(order_book_id), None)
                ;
            }) ;`
    = note: expanding `benchmarks_iter! { {} {} { T : trading_pair :: Config + core :: fmt :: Debug } () () () ()
            #[configs((x, y) = [(1, 2), (3, 4)])] delete_orderbook { let aboba = 1234 ; }
            :
            {
                OrderBookPallet::<T>::delete_orderbook(RawOrigin::Root.into(),
                        order_book_id).unwrap();
            }
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify
            {
                assert_eq! (OrderBookPallet :: < T > :: order_books(order_book_id), None)
                ;
            } }`
    = note: to `$crate :: benchmarks_iter!
            ({} {} { T : trading_pair :: Config + core :: fmt :: Debug } () () () ()
            #[configs((x, y) = [(1, 2), (3, 4)])] delete_orderbook { let aboba = 1234 ; }
            :
            {
                OrderBookPallet::<T>::delete_orderbook(RawOrigin::Root.into(),
                        order_book_id).unwrap();
            }
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify
            {
                assert_eq! (OrderBookPallet :: < T > :: order_books(order_book_id), None)
                ;
            }) ;`
    = note: expanding `benchmarks_iter! { {} {} { T : trading_pair :: Config + core :: fmt :: Debug } () () () ()
            #[configs((x, y) = [(1, 2), (3, 4)])] delete_orderbook { let aboba = 1234 ; }
            :
            {
                OrderBookPallet::<T>::delete_orderbook(RawOrigin::Root.into(),
                        order_book_id).unwrap();
            }
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify
            {
                assert_eq! (OrderBookPallet :: < T > :: order_books(order_book_id), None)
                ;
            } }`
    = note: to `$crate :: benchmarks_iter!
            ({} {} { T : trading_pair :: Config + core :: fmt :: Debug } () () () ()
            #[configs((x, y) = [(1, 2), (3, 4)])] delete_orderbook { let aboba = 1234 ; }
            :
            {
                OrderBookPallet::<T>::delete_orderbook(RawOrigin::Root.into(),
                        order_book_id).unwrap();
            }
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify
            {
                assert_eq! (OrderBookPallet :: < T > :: order_books(order_book_id), None)
                ;
            }) ;`
    = note: expanding `benchmarks_iter! { {} {} { T : trading_pair :: Config + core :: fmt :: Debug } () () () ()
            #[configs((x, y) = [(1, 2), (3, 4)])] delete_orderbook { let aboba = 1234 ; }
            :
            {
                OrderBookPallet::<T>::delete_orderbook(RawOrigin::Root.into(),
                        order_book_id).unwrap();
            }
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify
            {
                assert_eq! (OrderBookPallet :: < T > :: order_books(order_book_id), None)
                ;
            } }`
    = note: to `$crate :: benchmarks_iter!
            ({} {} { T : trading_pair :: Config + core :: fmt :: Debug } () () () ()
            #[configs((x, y) = [(1, 2), (3, 4)])] delete_orderbook { let aboba = 1234 ; }
            :
            {
                OrderBookPallet::<T>::delete_orderbook(RawOrigin::Root.into(),
                        order_book_id).unwrap();
            }
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify
            {
                assert_eq! (OrderBookPallet :: < T > :: order_books(order_book_id), None)
                ;
            }) ;`
    = note: expanding `benchmarks_iter! { {} {} { T : trading_pair :: Config + core :: fmt :: Debug } () () () ()
            #[configs((x, y) = [(1, 2), (3, 4)])] delete_orderbook { let aboba = 1234 ; }
            :
            {
                OrderBookPallet::<T>::delete_orderbook(RawOrigin::Root.into(),
                        order_book_id).unwrap();
            }
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify
            {
                assert_eq! (OrderBookPallet :: < T > :: order_books(order_book_id), None)
                ;
            } }`
    = note: to `$crate :: benchmarks_iter!
            ({} {} { T : trading_pair :: Config + core :: fmt :: Debug } () () () ()
            #[configs((x, y) = [(1, 2), (3, 4)])] delete_orderbook { let aboba = 1234 ; }
            :
            {
                OrderBookPallet::<T>::delete_orderbook(RawOrigin::Root.into(),
                        order_book_id).unwrap();
            }
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {
                assert_eq! (OrderBookPallet :: < T > :: order_books(order_book_id), None)
                ;
            }) ;`
    = note: expanding `benchmarks_iter! { {} {} { T : trading_pair :: Config + core :: fmt :: Debug } () () () ()
            #[configs((x, y) = [(1, 2), (3, 4)])] delete_orderbook { let aboba = 1234 ; }
            :
            {
                OrderBookPallet::<T>::delete_orderbook(RawOrigin::Root.into(),
                        order_book_id).unwrap();
            }
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {
                assert_eq! (OrderBookPallet :: < T > :: order_books(order_book_id), None)
                ;
            } }`
    = note: to `$crate :: benchmarks_iter!
            ({} {} { T : trading_pair :: Config + core :: fmt :: Debug } () () () ()
            #[configs((x, y) = [(1, 2), (3, 4)])] delete_orderbook { let aboba = 1234 ; }
            :
            {
                OrderBookPallet::<T>::delete_orderbook(RawOrigin::Root.into(),
                        order_book_id).unwrap();
            }
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify
            {
                assert_eq! (OrderBookPallet :: < T > :: order_books(order_book_id), None)
                ;
            }) ;`
    = note: expanding `benchmarks_iter! { {} {} { T : trading_pair :: Config + core :: fmt :: Debug } () () () ()
            #[configs((x, y) = [(1, 2), (3, 4)])] delete_orderbook { let aboba = 1234 ; }
            :
            {
                OrderBookPallet::<T>::delete_orderbook(RawOrigin::Root.into(),
                        order_book_id).unwrap();
            }
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify
            {
                assert_eq! (OrderBookPallet :: < T > :: order_books(order_book_id), None)
                ;
            } }`
    = note: to `$crate :: benchmarks_iter!
            ({} {} { T : trading_pair :: Config + core :: fmt :: Debug } () () () ()
            #[configs((x, y) = [(1, 2), (3, 4)])] delete_orderbook { let aboba = 1234 ; }
            :
            {
                OrderBookPallet::<T>::delete_orderbook(RawOrigin::Root.into(),
                        order_book_id).unwrap();
            }
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify
            {
                assert_eq! (OrderBookPallet :: < T > :: order_books(order_book_id), None)
                ;
            }) ;`
    = note: expanding `benchmarks_iter! { {} {} { T : trading_pair :: Config + core :: fmt :: Debug } () () () ()
            #[configs((x, y) = [(1, 2), (3, 4)])] delete_orderbook { let aboba = 1234 ; }
            :
            {
                OrderBookPallet::<T>::delete_orderbook(RawOrigin::Root.into(),
                        order_book_id).unwrap();
            }
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify
            {
                assert_eq! (OrderBookPallet :: < T > :: order_books(order_book_id), None)
                ;
            } }`
    = note: to `$crate :: benchmarks_iter!
            ({} {} { T : trading_pair :: Config + core :: fmt :: Debug } () () () ()
            #[configs((x, y) = [(1, 2), (3, 4)])] delete_orderbook { let aboba = 1234 ; }
            :
            {
                OrderBookPallet::<T>::delete_orderbook(RawOrigin::Root.into(),
                        order_book_id).unwrap();
            }
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify
            {
                assert_eq! (OrderBookPallet :: < T > :: order_books(order_book_id), None)
                ;
            }) ;`
    = note: expanding `benchmarks_iter! { {} {} { T : trading_pair :: Config + core :: fmt :: Debug } () () () ()
            #[configs((x, y) = [(1, 2), (3, 4)])] delete_orderbook { let aboba = 1234 ; }
            :
            {
                OrderBookPallet::<T>::delete_orderbook(RawOrigin::Root.into(),
                        order_book_id).unwrap();
            }
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify
            {
                assert_eq! (OrderBookPallet :: < T > :: order_books(order_book_id), None)
                ;
            } }`
    = note: to `$crate :: benchmarks_iter!
            ({} {} { T : trading_pair :: Config + core :: fmt :: Debug } () () () ()
            #[configs((x, y) = [(1, 2), (3, 4)])] delete_orderbook { let aboba = 1234 ; }
            :
            {
                OrderBookPallet::<T>::delete_orderbook(RawOrigin::Root.into(),
                        order_book_id).unwrap();
            }
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify
            {
                assert_eq! (OrderBookPallet :: < T > :: order_books(order_book_id), None)
                ;
            }) ;`
    = note: expanding `benchmarks_iter! { {} {} { T : trading_pair :: Config + core :: fmt :: Debug } () () () ()
            #[configs((x, y) = [(1, 2), (3, 4)])] delete_orderbook { let aboba = 1234 ; }
            :
            {
                OrderBookPallet::<T>::delete_orderbook(RawOrigin::Root.into(),
                        order_book_id).unwrap();
            }
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify
            {
                assert_eq! (OrderBookPallet :: < T > :: order_books(order_book_id), None)
                ;
            } }`
    = note: to `$crate :: benchmarks_iter!
            ({} {} { T : trading_pair :: Config + core :: fmt :: Debug } () () () ()
            #[configs((x, y) = [(1, 2), (3, 4)])] delete_orderbook { let aboba = 1234 ; }
            :
            {
                OrderBookPallet::<T>::delete_orderbook(RawOrigin::Root.into(),
                        order_book_id).unwrap();
            }
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify
            {
                assert_eq! (OrderBookPallet :: < T > :: order_books(order_book_id), None)
                ;
            }) ;`
    = note: expanding `benchmarks_iter! { {} {} { T : trading_pair :: Config + core :: fmt :: Debug } () () () ()
            #[configs((x, y) = [(1, 2), (3, 4)])] delete_orderbook { let aboba = 1234 ; }
            :
            {
                OrderBookPallet::<T>::delete_orderbook(RawOrigin::Root.into(),
                        order_book_id).unwrap();
            }
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify
            {
                assert_eq! (OrderBookPallet :: < T > :: order_books(order_book_id), None)
                ;
            } }`
    = note: to `$crate :: benchmarks_iter!
            ({} {} { T : trading_pair :: Config + core :: fmt :: Debug } () () () ()
            #[configs((x, y) = [(1, 2), (3, 4)])] delete_orderbook { let aboba = 1234 ; }
            :
            {
                OrderBookPallet::<T>::delete_orderbook(RawOrigin::Root.into(),
                        order_book_id).unwrap();
            }
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify
            {
                assert_eq! (OrderBookPallet :: < T > :: order_books(order_book_id), None)
                ;
            }) ;`
    = note: expanding `benchmarks_iter! { {} {} { T : trading_pair :: Config + core :: fmt :: Debug } () () () ()
            #[configs((x, y) = [(1, 2), (3, 4)])] delete_orderbook { let aboba = 1234 ; }
            :
            {
                OrderBookPallet::<T>::delete_orderbook(RawOrigin::Root.into(),
                        order_book_id).unwrap();
            }
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify
            {
                assert_eq! (OrderBookPallet :: < T > :: order_books(order_book_id), None)
                ;
            } }`
    = note: to `$crate :: benchmarks_iter!
            ({} {} { T : trading_pair :: Config + core :: fmt :: Debug } () () () ()
            #[configs((x, y) = [(1, 2), (3, 4)])] delete_orderbook { let aboba = 1234 ; }
            :
            {
                OrderBookPallet::<T>::delete_orderbook(RawOrigin::Root.into(),
                        order_book_id).unwrap();
            }
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify
            {
                assert_eq! (OrderBookPallet :: < T > :: order_books(order_book_id), None)
                ;
            }) ;`
    = note: expanding `benchmarks_iter! { {} {} { T : trading_pair :: Config + core :: fmt :: Debug } () () () ()
            #[configs((x, y) = [(1, 2), (3, 4)])] delete_orderbook { let aboba = 1234 ; }
            :
            {
                OrderBookPallet::<T>::delete_orderbook(RawOrigin::Root.into(),
                        order_book_id).unwrap();
            }
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify
            {
                assert_eq! (OrderBookPallet :: < T > :: order_books(order_book_id), None)
                ;
            } }`
    = note: to `$crate :: benchmarks_iter!
            ({} {} { T : trading_pair :: Config + core :: fmt :: Debug } () () () ()
            #[configs((x, y) = [(1, 2), (3, 4)])] delete_orderbook { let aboba = 1234 ; }
            :
            {
                OrderBookPallet::<T>::delete_orderbook(RawOrigin::Root.into(),
                        order_book_id).unwrap();
            }
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {
                assert_eq! (OrderBookPallet :: < T > :: order_books(order_book_id), None)
                ;
            }) ;`
    = note: expanding `benchmarks_iter! { {} {} { T : trading_pair :: Config + core :: fmt :: Debug } () () () ()
            #[configs((x, y) = [(1, 2), (3, 4)])] delete_orderbook { let aboba = 1234 ; }
            :
            {
                OrderBookPallet::<T>::delete_orderbook(RawOrigin::Root.into(),
                        order_book_id).unwrap();
            }
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {
                assert_eq! (OrderBookPallet :: < T > :: order_books(order_book_id), None)
                ;
            } }`
    = note: to `$crate :: benchmarks_iter!
            ({} {} { T : trading_pair :: Config + core :: fmt :: Debug } () () () ()
            #[configs((x, y) = [(1, 2), (3, 4)])] delete_orderbook { let aboba = 1234 ; }
            :
            {
                OrderBookPallet::<T>::delete_orderbook(RawOrigin::Root.into(),
                        order_book_id).unwrap();
            }
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify
            {
                assert_eq! (OrderBookPallet :: < T > :: order_books(order_book_id), None)
                ;
            }) ;`
    = note: expanding `benchmarks_iter! { {} {} { T : trading_pair :: Config + core :: fmt :: Debug } () () () ()
            #[configs((x, y) = [(1, 2), (3, 4)])] delete_orderbook { let aboba = 1234 ; }
            :
            {
                OrderBookPallet::<T>::delete_orderbook(RawOrigin::Root.into(),
                        order_book_id).unwrap();
            }
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify
            {
                assert_eq! (OrderBookPallet :: < T > :: order_books(order_book_id), None)
                ;
            } }`
    = note: to `$crate :: benchmarks_iter!
            ({} {} { T : trading_pair :: Config + core :: fmt :: Debug } () () () ()
            #[configs((x, y) = [(1, 2), (3, 4)])] delete_orderbook { let aboba = 1234 ; }
            :
            {
                OrderBookPallet::<T>::delete_orderbook(RawOrigin::Root.into(),
                        order_book_id).unwrap();
            }
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify
            {
                assert_eq! (OrderBookPallet :: < T > :: order_books(order_book_id), None)
                ;
            }) ;`
    = note: expanding `benchmarks_iter! { {} {} { T : trading_pair :: Config + core :: fmt :: Debug } () () () ()
            #[configs((x, y) = [(1, 2), (3, 4)])] delete_orderbook { let aboba = 1234 ; }
            :
            {
                OrderBookPallet::<T>::delete_orderbook(RawOrigin::Root.into(),
                        order_book_id).unwrap();
            }
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify
            {
                assert_eq! (OrderBookPallet :: < T > :: order_books(order_book_id), None)
                ;
            } }`
    = note: to `$crate :: benchmarks_iter!
            ({} {} { T : trading_pair :: Config + core :: fmt :: Debug } () () () ()
            #[configs((x, y) = [(1, 2), (3, 4)])] delete_orderbook { let aboba = 1234 ; }
            :
            {
                OrderBookPallet::<T>::delete_orderbook(RawOrigin::Root.into(),
                        order_book_id).unwrap();
            }
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify
            {
                assert_eq! (OrderBookPallet :: < T > :: order_books(order_book_id), None)
                ;
            }) ;`
    = note: expanding `benchmarks_iter! { {} {} { T : trading_pair :: Config + core :: fmt :: Debug } () () () ()
            #[configs((x, y) = [(1, 2), (3, 4)])] delete_orderbook { let aboba = 1234 ; }
            :
            {
                OrderBookPallet::<T>::delete_orderbook(RawOrigin::Root.into(),
                        order_book_id).unwrap();
            }
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify
            {
                assert_eq! (OrderBookPallet :: < T > :: order_books(order_book_id), None)
                ;
            } }`
    = note: to `$crate :: benchmarks_iter!
            ({} {} { T : trading_pair :: Config + core :: fmt :: Debug } () () () ()
            #[configs((x, y) = [(1, 2), (3, 4)])] delete_orderbook { let aboba = 1234 ; }
            :
            {
                OrderBookPallet::<T>::delete_orderbook(RawOrigin::Root.into(),
                        order_book_id).unwrap();
            }
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify
            {
                assert_eq! (OrderBookPallet :: < T > :: order_books(order_book_id), None)
                ;
            }) ;`
    = note: expanding `benchmarks_iter! { {} {} { T : trading_pair :: Config + core :: fmt :: Debug } () () () ()
            #[configs((x, y) = [(1, 2), (3, 4)])] delete_orderbook { let aboba = 1234 ; }
            :
            {
                OrderBookPallet::<T>::delete_orderbook(RawOrigin::Root.into(),
                        order_book_id).unwrap();
            }
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify
            {
                assert_eq! (OrderBookPallet :: < T > :: order_books(order_book_id), None)
                ;
            } }`
    = note: to `$crate :: benchmarks_iter!
            ({} {} { T : trading_pair :: Config + core :: fmt :: Debug } () () () ()
            #[configs((x, y) = [(1, 2), (3, 4)])] delete_orderbook { let aboba = 1234 ; }
            :
            {
                OrderBookPallet::<T>::delete_orderbook(RawOrigin::Root.into(),
                        order_book_id).unwrap();
            }
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify
            {
                assert_eq! (OrderBookPallet :: < T > :: order_books(order_book_id), None)
                ;
            }) ;`
    = note: expanding `benchmarks_iter! { {} {} { T : trading_pair :: Config + core :: fmt :: Debug } () () () ()
            #[configs((x, y) = [(1, 2), (3, 4)])] delete_orderbook { let aboba = 1234 ; }
            :
            {
                OrderBookPallet::<T>::delete_orderbook(RawOrigin::Root.into(),
                        order_book_id).unwrap();
            }
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify
            {
                assert_eq! (OrderBookPallet :: < T > :: order_books(order_book_id), None)
                ;
            } }`
    = note: to `$crate :: benchmarks_iter!
            ({} {} { T : trading_pair :: Config + core :: fmt :: Debug } () () () ()
            #[configs((x, y) = [(1, 2), (3, 4)])] delete_orderbook { let aboba = 1234 ; }
            :
            {
                OrderBookPallet::<T>::delete_orderbook(RawOrigin::Root.into(),
                        order_book_id).unwrap();
            }
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify
            {
                assert_eq! (OrderBookPallet :: < T > :: order_books(order_book_id), None)
                ;
            }) ;`
    = note: expanding `benchmarks_iter! { {} {} { T : trading_pair :: Config + core :: fmt :: Debug } () () () ()
            #[configs((x, y) = [(1, 2), (3, 4)])] delete_orderbook { let aboba = 1234 ; }
            :
            {
                OrderBookPallet::<T>::delete_orderbook(RawOrigin::Root.into(),
                        order_book_id).unwrap();
            }
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify
            {
                assert_eq! (OrderBookPallet :: < T > :: order_books(order_book_id), None)
                ;
            } }`
    = note: to `$crate :: benchmarks_iter!
            ({} {} { T : trading_pair :: Config + core :: fmt :: Debug } () () () ()
            #[configs((x, y) = [(1, 2), (3, 4)])] delete_orderbook { let aboba = 1234 ; }
            :
            {
                OrderBookPallet::<T>::delete_orderbook(RawOrigin::Root.into(),
                        order_book_id).unwrap();
            }
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {
                assert_eq! (OrderBookPallet :: < T > :: order_books(order_book_id), None)
                ;
            }) ;`
    = note: expanding `benchmarks_iter! { {} {} { T : trading_pair :: Config + core :: fmt :: Debug } () () () ()
            #[configs((x, y) = [(1, 2), (3, 4)])] delete_orderbook { let aboba = 1234 ; }
            :
            {
                OrderBookPallet::<T>::delete_orderbook(RawOrigin::Root.into(),
                        order_book_id).unwrap();
            }
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {
                assert_eq! (OrderBookPallet :: < T > :: order_books(order_book_id), None)
                ;
            } }`
    = note: to `$crate :: benchmarks_iter!
            ({} {} { T : trading_pair :: Config + core :: fmt :: Debug } () () () ()
            #[configs((x, y) = [(1, 2), (3, 4)])] delete_orderbook { let aboba = 1234 ; }
            :
            {
                OrderBookPallet::<T>::delete_orderbook(RawOrigin::Root.into(),
                        order_book_id).unwrap();
            }
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify
            {
                assert_eq! (OrderBookPallet :: < T > :: order_books(order_book_id), None)
                ;
            }) ;`
    = note: expanding `benchmarks_iter! { {} {} { T : trading_pair :: Config + core :: fmt :: Debug } () () () ()
            #[configs((x, y) = [(1, 2), (3, 4)])] delete_orderbook { let aboba = 1234 ; }
            :
            {
                OrderBookPallet::<T>::delete_orderbook(RawOrigin::Root.into(),
                        order_book_id).unwrap();
            }
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify
            {
                assert_eq! (OrderBookPallet :: < T > :: order_books(order_book_id), None)
                ;
            } }`
    = note: to `$crate :: benchmarks_iter!
            ({} {} { T : trading_pair :: Config + core :: fmt :: Debug } () () () ()
            #[configs((x, y) = [(1, 2), (3, 4)])] delete_orderbook { let aboba = 1234 ; }
            :
            {
                OrderBookPallet::<T>::delete_orderbook(RawOrigin::Root.into(),
                        order_book_id).unwrap();
            }
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify
            {
                assert_eq! (OrderBookPallet :: < T > :: order_books(order_book_id), None)
                ;
            }) ;`
    = note: expanding `benchmarks_iter! { {} {} { T : trading_pair :: Config + core :: fmt :: Debug } () () () ()
            #[configs((x, y) = [(1, 2), (3, 4)])] delete_orderbook { let aboba = 1234 ; }
            :
            {
                OrderBookPallet::<T>::delete_orderbook(RawOrigin::Root.into(),
                        order_book_id).unwrap();
            }
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify
            {
                assert_eq! (OrderBookPallet :: < T > :: order_books(order_book_id), None)
                ;
            } }`
    = note: to `$crate :: benchmarks_iter!
            ({} {} { T : trading_pair :: Config + core :: fmt :: Debug } () () () ()
            #[configs((x, y) = [(1, 2), (3, 4)])] delete_orderbook { let aboba = 1234 ; }
            :
            {
                OrderBookPallet::<T>::delete_orderbook(RawOrigin::Root.into(),
                        order_book_id).unwrap();
            }
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify
            {
                assert_eq! (OrderBookPallet :: < T > :: order_books(order_book_id), None)
                ;
            }) ;`
    = note: expanding `benchmarks_iter! { {} {} { T : trading_pair :: Config + core :: fmt :: Debug } () () () ()
            #[configs((x, y) = [(1, 2), (3, 4)])] delete_orderbook { let aboba = 1234 ; }
            :
            {
                OrderBookPallet::<T>::delete_orderbook(RawOrigin::Root.into(),
                        order_book_id).unwrap();
            }
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify
            {
                assert_eq! (OrderBookPallet :: < T > :: order_books(order_book_id), None)
                ;
            } }`
    = note: to `$crate :: benchmarks_iter!
            ({} {} { T : trading_pair :: Config + core :: fmt :: Debug } () () () ()
            #[configs((x, y) = [(1, 2), (3, 4)])] delete_orderbook { let aboba = 1234 ; }
            :
            {
                OrderBookPallet::<T>::delete_orderbook(RawOrigin::Root.into(),
                        order_book_id).unwrap();
            }
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify
            {
                assert_eq! (OrderBookPallet :: < T > :: order_books(order_book_id), None)
                ;
            }) ;`
    = note: expanding `benchmarks_iter! { {} {} { T : trading_pair :: Config + core :: fmt :: Debug } () () () ()
            #[configs((x, y) = [(1, 2), (3, 4)])] delete_orderbook { let aboba = 1234 ; }
            :
            {
                OrderBookPallet::<T>::delete_orderbook(RawOrigin::Root.into(),
                        order_book_id).unwrap();
            }
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify
            {
                assert_eq! (OrderBookPallet :: < T > :: order_books(order_book_id), None)
                ;
            } }`
    = note: to `$crate :: benchmarks_iter!
            ({} {} { T : trading_pair :: Config + core :: fmt :: Debug } () () () ()
            #[configs((x, y) = [(1, 2), (3, 4)])] delete_orderbook { let aboba = 1234 ; }
            :
            {
                OrderBookPallet::<T>::delete_orderbook(RawOrigin::Root.into(),
                        order_book_id).unwrap();
            }
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify
            {
                assert_eq! (OrderBookPallet :: < T > :: order_books(order_book_id), None)
                ;
            }) ;`
    = note: expanding `benchmarks_iter! { {} {} { T : trading_pair :: Config + core :: fmt :: Debug } () () () ()
            #[configs((x, y) = [(1, 2), (3, 4)])] delete_orderbook { let aboba = 1234 ; }
            :
            {
                OrderBookPallet::<T>::delete_orderbook(RawOrigin::Root.into(),
                        order_book_id).unwrap();
            }
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify
            {
                assert_eq! (OrderBookPallet :: < T > :: order_books(order_book_id), None)
                ;
            } }`
    = note: to `$crate :: benchmarks_iter!
            ({} {} { T : trading_pair :: Config + core :: fmt :: Debug } () () () ()
            #[configs((x, y) = [(1, 2), (3, 4)])] delete_orderbook { let aboba = 1234 ; }
            :
            {
                OrderBookPallet::<T>::delete_orderbook(RawOrigin::Root.into(),
                        order_book_id).unwrap();
            }
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify
            {
                assert_eq! (OrderBookPallet :: < T > :: order_books(order_book_id), None)
                ;
            }) ;`
    = note: expanding `benchmarks_iter! { {} {} { T : trading_pair :: Config + core :: fmt :: Debug } () () () ()
            #[configs((x, y) = [(1, 2), (3, 4)])] delete_orderbook { let aboba = 1234 ; }
            :
            {
                OrderBookPallet::<T>::delete_orderbook(RawOrigin::Root.into(),
                        order_book_id).unwrap();
            }
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify
            {
                assert_eq! (OrderBookPallet :: < T > :: order_books(order_book_id), None)
                ;
            } }`
    = note: to `$crate :: benchmarks_iter!
            ({} {} { T : trading_pair :: Config + core :: fmt :: Debug } () () () ()
            #[configs((x, y) = [(1, 2), (3, 4)])] delete_orderbook { let aboba = 1234 ; }
            :
            {
                OrderBookPallet::<T>::delete_orderbook(RawOrigin::Root.into(),
                        order_book_id).unwrap();
            }
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify
            {
                assert_eq! (OrderBookPallet :: < T > :: order_books(order_book_id), None)
                ;
            }) ;`
    = note: expanding `benchmarks_iter! { {} {} { T : trading_pair :: Config + core :: fmt :: Debug } () () () ()
            #[configs((x, y) = [(1, 2), (3, 4)])] delete_orderbook { let aboba = 1234 ; }
            :
            {
                OrderBookPallet::<T>::delete_orderbook(RawOrigin::Root.into(),
                        order_book_id).unwrap();
            }
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify
            {
                assert_eq! (OrderBookPallet :: < T > :: order_books(order_book_id), None)
                ;
            } }`
    = note: to `$crate :: benchmarks_iter!
            ({} {} { T : trading_pair :: Config + core :: fmt :: Debug } () () () ()
            #[configs((x, y) = [(1, 2), (3, 4)])] delete_orderbook { let aboba = 1234 ; }
            :
            {
                OrderBookPallet::<T>::delete_orderbook(RawOrigin::Root.into(),
                        order_book_id).unwrap();
            }
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {
                assert_eq! (OrderBookPallet :: < T > :: order_books(order_book_id), None)
                ;
            }) ;`
    = note: expanding `benchmarks_iter! { {} {} { T : trading_pair :: Config + core :: fmt :: Debug } () () () ()
            #[configs((x, y) = [(1, 2), (3, 4)])] delete_orderbook { let aboba = 1234 ; }
            :
            {
                OrderBookPallet::<T>::delete_orderbook(RawOrigin::Root.into(),
                        order_book_id).unwrap();
            }
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {
                assert_eq! (OrderBookPallet :: < T > :: order_books(order_book_id), None)
                ;
            } }`
    = note: to `$crate :: benchmarks_iter!
            ({} {} { T : trading_pair :: Config + core :: fmt :: Debug } () () () ()
            #[configs((x, y) = [(1, 2), (3, 4)])] delete_orderbook { let aboba = 1234 ; }
            :
            {
                OrderBookPallet::<T>::delete_orderbook(RawOrigin::Root.into(),
                        order_book_id).unwrap();
            }
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify
            {
                assert_eq! (OrderBookPallet :: < T > :: order_books(order_book_id), None)
                ;
            }) ;`
    = note: expanding `benchmarks_iter! { {} {} { T : trading_pair :: Config + core :: fmt :: Debug } () () () ()
            #[configs((x, y) = [(1, 2), (3, 4)])] delete_orderbook { let aboba = 1234 ; }
            :
            {
                OrderBookPallet::<T>::delete_orderbook(RawOrigin::Root.into(),
                        order_book_id).unwrap();
            }
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify
            {
                assert_eq! (OrderBookPallet :: < T > :: order_books(order_book_id), None)
                ;
            } }`
    = note: to `$crate :: benchmarks_iter!
            ({} {} { T : trading_pair :: Config + core :: fmt :: Debug } () () () ()
            #[configs((x, y) = [(1, 2), (3, 4)])] delete_orderbook { let aboba = 1234 ; }
            :
            {
                OrderBookPallet::<T>::delete_orderbook(RawOrigin::Root.into(),
                        order_book_id).unwrap();
            }
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify
            {
                assert_eq! (OrderBookPallet :: < T > :: order_books(order_book_id), None)
                ;
            }) ;`
    = note: expanding `benchmarks_iter! { {} {} { T : trading_pair :: Config + core :: fmt :: Debug } () () () ()
            #[configs((x, y) = [(1, 2), (3, 4)])] delete_orderbook { let aboba = 1234 ; }
            :
            {
                OrderBookPallet::<T>::delete_orderbook(RawOrigin::Root.into(),
                        order_book_id).unwrap();
            }
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify
            {
                assert_eq! (OrderBookPallet :: < T > :: order_books(order_book_id), None)
                ;
            } }`
    = note: to `$crate :: benchmarks_iter!
            ({} {} { T : trading_pair :: Config + core :: fmt :: Debug } () () () ()
            #[configs((x, y) = [(1, 2), (3, 4)])] delete_orderbook { let aboba = 1234 ; }
            :
            {
                OrderBookPallet::<T>::delete_orderbook(RawOrigin::Root.into(),
                        order_book_id).unwrap();
            }
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify
            {
                assert_eq! (OrderBookPallet :: < T > :: order_books(order_book_id), None)
                ;
            }) ;`
    = note: expanding `benchmarks_iter! { {} {} { T : trading_pair :: Config + core :: fmt :: Debug } () () () ()
            #[configs((x, y) = [(1, 2), (3, 4)])] delete_orderbook { let aboba = 1234 ; }
            :
            {
                OrderBookPallet::<T>::delete_orderbook(RawOrigin::Root.into(),
                        order_book_id).unwrap();
            }
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify
            {
                assert_eq! (OrderBookPallet :: < T > :: order_books(order_book_id), None)
                ;
            } }`
    = note: to `$crate :: benchmarks_iter!
            ({} {} { T : trading_pair :: Config + core :: fmt :: Debug } () () () ()
            #[configs((x, y) = [(1, 2), (3, 4)])] delete_orderbook { let aboba = 1234 ; }
            :
            {
                OrderBookPallet::<T>::delete_orderbook(RawOrigin::Root.into(),
                        order_book_id).unwrap();
            }
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify
            {
                assert_eq! (OrderBookPallet :: < T > :: order_books(order_book_id), None)
                ;
            }) ;`
    = note: expanding `benchmarks_iter! { {} {} { T : trading_pair :: Config + core :: fmt :: Debug } () () () ()
            #[configs((x, y) = [(1, 2), (3, 4)])] delete_orderbook { let aboba = 1234 ; }
            :
            {
                OrderBookPallet::<T>::delete_orderbook(RawOrigin::Root.into(),
                        order_book_id).unwrap();
            }
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify
            {
                assert_eq! (OrderBookPallet :: < T > :: order_books(order_book_id), None)
                ;
            } }`
    = note: to `$crate :: benchmarks_iter!
            ({} {} { T : trading_pair :: Config + core :: fmt :: Debug } () () () ()
            #[configs((x, y) = [(1, 2), (3, 4)])] delete_orderbook { let aboba = 1234 ; }
            :
            {
                OrderBookPallet::<T>::delete_orderbook(RawOrigin::Root.into(),
                        order_book_id).unwrap();
            }
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify
            {
                assert_eq! (OrderBookPallet :: < T > :: order_books(order_book_id), None)
                ;
            }) ;`
    = note: expanding `benchmarks_iter! { {} {} { T : trading_pair :: Config + core :: fmt :: Debug } () () () ()
            #[configs((x, y) = [(1, 2), (3, 4)])] delete_orderbook { let aboba = 1234 ; }
            :
            {
                OrderBookPallet::<T>::delete_orderbook(RawOrigin::Root.into(),
                        order_book_id).unwrap();
            }
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify
            {
                assert_eq! (OrderBookPallet :: < T > :: order_books(order_book_id), None)
                ;
            } }`
    = note: to `$crate :: benchmarks_iter!
            ({} {} { T : trading_pair :: Config + core :: fmt :: Debug } () () () ()
            #[configs((x, y) = [(1, 2), (3, 4)])] delete_orderbook { let aboba = 1234 ; }
            :
            {
                OrderBookPallet::<T>::delete_orderbook(RawOrigin::Root.into(),
                        order_book_id).unwrap();
            }
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify
            {
                assert_eq! (OrderBookPallet :: < T > :: order_books(order_book_id), None)
                ;
            }) ;`
    = note: expanding `benchmarks_iter! { {} {} { T : trading_pair :: Config + core :: fmt :: Debug } () () () ()
            #[configs((x, y) = [(1, 2), (3, 4)])] delete_orderbook { let aboba = 1234 ; }
            :
            {
                OrderBookPallet::<T>::delete_orderbook(RawOrigin::Root.into(),
                        order_book_id).unwrap();
            }
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify
            {
                assert_eq! (OrderBookPallet :: < T > :: order_books(order_book_id), None)
                ;
            } }`
    = note: to `$crate :: benchmarks_iter!
            ({} {} { T : trading_pair :: Config + core :: fmt :: Debug } () () () ()
            #[configs((x, y) = [(1, 2), (3, 4)])] delete_orderbook { let aboba = 1234 ; }
            :
            {
                OrderBookPallet::<T>::delete_orderbook(RawOrigin::Root.into(),
                        order_book_id).unwrap();
            }
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {
                assert_eq! (OrderBookPallet :: < T > :: order_books(order_book_id), None)
                ;
            }) ;`
    = note: expanding `benchmarks_iter! { {} {} { T : trading_pair :: Config + core :: fmt :: Debug } () () () ()
            #[configs((x, y) = [(1, 2), (3, 4)])] delete_orderbook { let aboba = 1234 ; }
            :
            {
                OrderBookPallet::<T>::delete_orderbook(RawOrigin::Root.into(),
                        order_book_id).unwrap();
            }
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {
                assert_eq! (OrderBookPallet :: < T > :: order_books(order_book_id), None)
                ;
            } }`
    = note: to `$crate :: benchmarks_iter!
            ({} {} { T : trading_pair :: Config + core :: fmt :: Debug } () () () ()
            #[configs((x, y) = [(1, 2), (3, 4)])] delete_orderbook { let aboba = 1234 ; }
            :
            {
                OrderBookPallet::<T>::delete_orderbook(RawOrigin::Root.into(),
                        order_book_id).unwrap();
            }
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify
            {
                assert_eq! (OrderBookPallet :: < T > :: order_books(order_book_id), None)
                ;
            }) ;`
    = note: expanding `benchmarks_iter! { {} {} { T : trading_pair :: Config + core :: fmt :: Debug } () () () ()
            #[configs((x, y) = [(1, 2), (3, 4)])] delete_orderbook { let aboba = 1234 ; }
            :
            {
                OrderBookPallet::<T>::delete_orderbook(RawOrigin::Root.into(),
                        order_book_id).unwrap();
            }
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify
            {
                assert_eq! (OrderBookPallet :: < T > :: order_books(order_book_id), None)
                ;
            } }`
    = note: to `$crate :: benchmarks_iter!
            ({} {} { T : trading_pair :: Config + core :: fmt :: Debug } () () () ()
            #[configs((x, y) = [(1, 2), (3, 4)])] delete_orderbook { let aboba = 1234 ; }
            :
            {
                OrderBookPallet::<T>::delete_orderbook(RawOrigin::Root.into(),
                        order_book_id).unwrap();
            }
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify
            {
                assert_eq! (OrderBookPallet :: < T > :: order_books(order_book_id), None)
                ;
            }) ;`
    = note: expanding `benchmarks_iter! { {} {} { T : trading_pair :: Config + core :: fmt :: Debug } () () () ()
            #[configs((x, y) = [(1, 2), (3, 4)])] delete_orderbook { let aboba = 1234 ; }
            :
            {
                OrderBookPallet::<T>::delete_orderbook(RawOrigin::Root.into(),
                        order_book_id).unwrap();
            }
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify
            {
                assert_eq! (OrderBookPallet :: < T > :: order_books(order_book_id), None)
                ;
            } }`
    = note: to `$crate :: benchmarks_iter!
            ({} {} { T : trading_pair :: Config + core :: fmt :: Debug } () () () ()
            #[configs((x, y) = [(1, 2), (3, 4)])] delete_orderbook { let aboba = 1234 ; }
            :
            {
                OrderBookPallet::<T>::delete_orderbook(RawOrigin::Root.into(),
                        order_book_id).unwrap();
            }
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify
            {
                assert_eq! (OrderBookPallet :: < T > :: order_books(order_book_id), None)
                ;
            }) ;`
    = note: expanding `benchmarks_iter! { {} {} { T : trading_pair :: Config + core :: fmt :: Debug } () () () ()
            #[configs((x, y) = [(1, 2), (3, 4)])] delete_orderbook { let aboba = 1234 ; }
            :
            {
                OrderBookPallet::<T>::delete_orderbook(RawOrigin::Root.into(),
                        order_book_id).unwrap();
            }
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify
            {
                assert_eq! (OrderBookPallet :: < T > :: order_books(order_book_id), None)
                ;
            } }`
    = note: to `$crate :: benchmarks_iter!
            ({} {} { T : trading_pair :: Config + core :: fmt :: Debug } () () () ()
            #[configs((x, y) = [(1, 2), (3, 4)])] delete_orderbook { let aboba = 1234 ; }
            :
            {
                OrderBookPallet::<T>::delete_orderbook(RawOrigin::Root.into(),
                        order_book_id).unwrap();
            }
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify
            {
                assert_eq! (OrderBookPallet :: < T > :: order_books(order_book_id), None)
                ;
            }) ;`
    = note: expanding `benchmarks_iter! { {} {} { T : trading_pair :: Config + core :: fmt :: Debug } () () () ()
            #[configs((x, y) = [(1, 2), (3, 4)])] delete_orderbook { let aboba = 1234 ; }
            :
            {
                OrderBookPallet::<T>::delete_orderbook(RawOrigin::Root.into(),
                        order_book_id).unwrap();
            }
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify
            {
                assert_eq! (OrderBookPallet :: < T > :: order_books(order_book_id), None)
                ;
            } }`
    = note: to `$crate :: benchmarks_iter!
            ({} {} { T : trading_pair :: Config + core :: fmt :: Debug } () () () ()
            #[configs((x, y) = [(1, 2), (3, 4)])] delete_orderbook { let aboba = 1234 ; }
            :
            {
                OrderBookPallet::<T>::delete_orderbook(RawOrigin::Root.into(),
                        order_book_id).unwrap();
            }
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify
            {
                assert_eq! (OrderBookPallet :: < T > :: order_books(order_book_id), None)
                ;
            }) ;`
    = note: expanding `benchmarks_iter! { {} {} { T : trading_pair :: Config + core :: fmt :: Debug } () () () ()
            #[configs((x, y) = [(1, 2), (3, 4)])] delete_orderbook { let aboba = 1234 ; }
            :
            {
                OrderBookPallet::<T>::delete_orderbook(RawOrigin::Root.into(),
                        order_book_id).unwrap();
            }
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify
            {
                assert_eq! (OrderBookPallet :: < T > :: order_books(order_book_id), None)
                ;
            } }`
    = note: to `$crate :: benchmarks_iter!
            ({} {} { T : trading_pair :: Config + core :: fmt :: Debug } () () () ()
            #[configs((x, y) = [(1, 2), (3, 4)])] delete_orderbook { let aboba = 1234 ; }
            :
            {
                OrderBookPallet::<T>::delete_orderbook(RawOrigin::Root.into(),
                        order_book_id).unwrap();
            }
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify
            {
                assert_eq! (OrderBookPallet :: < T > :: order_books(order_book_id), None)
                ;
            }) ;`
    = note: expanding `benchmarks_iter! { {} {} { T : trading_pair :: Config + core :: fmt :: Debug } () () () ()
            #[configs((x, y) = [(1, 2), (3, 4)])] delete_orderbook { let aboba = 1234 ; }
            :
            {
                OrderBookPallet::<T>::delete_orderbook(RawOrigin::Root.into(),
                        order_book_id).unwrap();
            }
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify
            {
                assert_eq! (OrderBookPallet :: < T > :: order_books(order_book_id), None)
                ;
            } }`
    = note: to `$crate :: benchmarks_iter!
            ({} {} { T : trading_pair :: Config + core :: fmt :: Debug } () () () ()
            #[configs((x, y) = [(1, 2), (3, 4)])] delete_orderbook { let aboba = 1234 ; }
            :
            {
                OrderBookPallet::<T>::delete_orderbook(RawOrigin::Root.into(),
                        order_book_id).unwrap();
            }
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify
            {
                assert_eq! (OrderBookPallet :: < T > :: order_books(order_book_id), None)
                ;
            }) ;`
    = note: expanding `benchmarks_iter! { {} {} { T : trading_pair :: Config + core :: fmt :: Debug } () () () ()
            #[configs((x, y) = [(1, 2), (3, 4)])] delete_orderbook { let aboba = 1234 ; }
            :
            {
                OrderBookPallet::<T>::delete_orderbook(RawOrigin::Root.into(),
                        order_book_id).unwrap();
            }
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify
            {
                assert_eq! (OrderBookPallet :: < T > :: order_books(order_book_id), None)
                ;
            } }`
    = note: to `$crate :: benchmarks_iter!
            ({} {} { T : trading_pair :: Config + core :: fmt :: Debug } () () () ()
            #[configs((x, y) = [(1, 2), (3, 4)])] delete_orderbook { let aboba = 1234 ; }
            :
            {
                OrderBookPallet::<T>::delete_orderbook(RawOrigin::Root.into(),
                        order_book_id).unwrap();
            }
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {
                assert_eq! (OrderBookPallet :: < T > :: order_books(order_book_id), None)
                ;
            }) ;`
    = note: expanding `benchmarks_iter! { {} {} { T : trading_pair :: Config + core :: fmt :: Debug } () () () ()
            #[configs((x, y) = [(1, 2), (3, 4)])] delete_orderbook { let aboba = 1234 ; }
            :
            {
                OrderBookPallet::<T>::delete_orderbook(RawOrigin::Root.into(),
                        order_book_id).unwrap();
            }
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {
                assert_eq! (OrderBookPallet :: < T > :: order_books(order_book_id), None)
                ;
            } }`
    = note: to `$crate :: benchmarks_iter!
            ({} {} { T : trading_pair :: Config + core :: fmt :: Debug } () () () ()
            #[configs((x, y) = [(1, 2), (3, 4)])] delete_orderbook { let aboba = 1234 ; }
            :
            {
                OrderBookPallet::<T>::delete_orderbook(RawOrigin::Root.into(),
                        order_book_id).unwrap();
            }
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify
            {
                assert_eq! (OrderBookPallet :: < T > :: order_books(order_book_id), None)
                ;
            }) ;`
    = note: expanding `benchmarks_iter! { {} {} { T : trading_pair :: Config + core :: fmt :: Debug } () () () ()
            #[configs((x, y) = [(1, 2), (3, 4)])] delete_orderbook { let aboba = 1234 ; }
            :
            {
                OrderBookPallet::<T>::delete_orderbook(RawOrigin::Root.into(),
                        order_book_id).unwrap();
            }
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify
            {
                assert_eq! (OrderBookPallet :: < T > :: order_books(order_book_id), None)
                ;
            } }`
    = note: to `$crate :: benchmarks_iter!
            ({} {} { T : trading_pair :: Config + core :: fmt :: Debug } () () () ()
            #[configs((x, y) = [(1, 2), (3, 4)])] delete_orderbook { let aboba = 1234 ; }
            :
            {
                OrderBookPallet::<T>::delete_orderbook(RawOrigin::Root.into(),
                        order_book_id).unwrap();
            }
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify
            {
                assert_eq! (OrderBookPallet :: < T > :: order_books(order_book_id), None)
                ;
            }) ;`
    = note: expanding `benchmarks_iter! { {} {} { T : trading_pair :: Config + core :: fmt :: Debug } () () () ()
            #[configs((x, y) = [(1, 2), (3, 4)])] delete_orderbook { let aboba = 1234 ; }
            :
            {
                OrderBookPallet::<T>::delete_orderbook(RawOrigin::Root.into(),
                        order_book_id).unwrap();
            }
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify
            {
                assert_eq! (OrderBookPallet :: < T > :: order_books(order_book_id), None)
                ;
            } }`
    = note: to `$crate :: benchmarks_iter!
            ({} {} { T : trading_pair :: Config + core :: fmt :: Debug } () () () ()
            #[configs((x, y) = [(1, 2), (3, 4)])] delete_orderbook { let aboba = 1234 ; }
            :
            {
                OrderBookPallet::<T>::delete_orderbook(RawOrigin::Root.into(),
                        order_book_id).unwrap();
            }
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify
            {
                assert_eq! (OrderBookPallet :: < T > :: order_books(order_book_id), None)
                ;
            }) ;`
    = note: expanding `benchmarks_iter! { {} {} { T : trading_pair :: Config + core :: fmt :: Debug } () () () ()
            #[configs((x, y) = [(1, 2), (3, 4)])] delete_orderbook { let aboba = 1234 ; }
            :
            {
                OrderBookPallet::<T>::delete_orderbook(RawOrigin::Root.into(),
                        order_book_id).unwrap();
            }
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify
            {
                assert_eq! (OrderBookPallet :: < T > :: order_books(order_book_id), None)
                ;
            } }`
    = note: to `$crate :: benchmarks_iter!
            ({} {} { T : trading_pair :: Config + core :: fmt :: Debug } () () () ()
            #[configs((x, y) = [(1, 2), (3, 4)])] delete_orderbook { let aboba = 1234 ; }
            :
            {
                OrderBookPallet::<T>::delete_orderbook(RawOrigin::Root.into(),
                        order_book_id).unwrap();
            }
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify
            {
                assert_eq! (OrderBookPallet :: < T > :: order_books(order_book_id), None)
                ;
            }) ;`
    = note: expanding `benchmarks_iter! { {} {} { T : trading_pair :: Config + core :: fmt :: Debug } () () () ()
            #[configs((x, y) = [(1, 2), (3, 4)])] delete_orderbook { let aboba = 1234 ; }
            :
            {
                OrderBookPallet::<T>::delete_orderbook(RawOrigin::Root.into(),
                        order_book_id).unwrap();
            }
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify
            {
                assert_eq! (OrderBookPallet :: < T > :: order_books(order_book_id), None)
                ;
            } }`
    = note: to `$crate :: benchmarks_iter!
            ({} {} { T : trading_pair :: Config + core :: fmt :: Debug } () () () ()
            #[configs((x, y) = [(1, 2), (3, 4)])] delete_orderbook { let aboba = 1234 ; }
            :
            {
                OrderBookPallet::<T>::delete_orderbook(RawOrigin::Root.into(),
                        order_book_id).unwrap();
            }
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify
            {
                assert_eq! (OrderBookPallet :: < T > :: order_books(order_book_id), None)
                ;
            }) ;`
    = note: expanding `benchmarks_iter! { {} {} { T : trading_pair :: Config + core :: fmt :: Debug } () () () ()
            #[configs((x, y) = [(1, 2), (3, 4)])] delete_orderbook { let aboba = 1234 ; }
            :
            {
                OrderBookPallet::<T>::delete_orderbook(RawOrigin::Root.into(),
                        order_book_id).unwrap();
            }
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify
            {
                assert_eq! (OrderBookPallet :: < T > :: order_books(order_book_id), None)
                ;
            } }`
    = note: to `$crate :: benchmarks_iter!
            ({} {} { T : trading_pair :: Config + core :: fmt :: Debug } () () () ()
            #[configs((x, y) = [(1, 2), (3, 4)])] delete_orderbook { let aboba = 1234 ; }
            :
            {
                OrderBookPallet::<T>::delete_orderbook(RawOrigin::Root.into(),
                        order_book_id).unwrap();
            }
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify
            {
                assert_eq! (OrderBookPallet :: < T > :: order_books(order_book_id), None)
                ;
            }) ;`
    = note: expanding `benchmarks_iter! { {} {} { T : trading_pair :: Config + core :: fmt :: Debug } () () () ()
            #[configs((x, y) = [(1, 2), (3, 4)])] delete_orderbook { let aboba = 1234 ; }
            :
            {
                OrderBookPallet::<T>::delete_orderbook(RawOrigin::Root.into(),
                        order_book_id).unwrap();
            }
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify
            {
                assert_eq! (OrderBookPallet :: < T > :: order_books(order_book_id), None)
                ;
            } }`
    = note: to `$crate :: benchmarks_iter!
            ({} {} { T : trading_pair :: Config + core :: fmt :: Debug } () () () ()
            #[configs((x, y) = [(1, 2), (3, 4)])] delete_orderbook { let aboba = 1234 ; }
            :
            {
                OrderBookPallet::<T>::delete_orderbook(RawOrigin::Root.into(),
                        order_book_id).unwrap();
            }
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {
                assert_eq! (OrderBookPallet :: < T > :: order_books(order_book_id), None)
                ;
            }) ;`
    = note: expanding `benchmarks_iter! { {} {} { T : trading_pair :: Config + core :: fmt :: Debug } () () () ()
            #[configs((x, y) = [(1, 2), (3, 4)])] delete_orderbook { let aboba = 1234 ; }
            :
            {
                OrderBookPallet::<T>::delete_orderbook(RawOrigin::Root.into(),
                        order_book_id).unwrap();
            }
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {
                assert_eq! (OrderBookPallet :: < T > :: order_books(order_book_id), None)
                ;
            } }`
    = note: to `$crate :: benchmarks_iter!
            ({} {} { T : trading_pair :: Config + core :: fmt :: Debug } () () () ()
            #[configs((x, y) = [(1, 2), (3, 4)])] delete_orderbook { let aboba = 1234 ; }
            :
            {
                OrderBookPallet::<T>::delete_orderbook(RawOrigin::Root.into(),
                        order_book_id).unwrap();
            }
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify
            {
                assert_eq! (OrderBookPallet :: < T > :: order_books(order_book_id), None)
                ;
            }) ;`
    = note: expanding `benchmarks_iter! { {} {} { T : trading_pair :: Config + core :: fmt :: Debug } () () () ()
            #[configs((x, y) = [(1, 2), (3, 4)])] delete_orderbook { let aboba = 1234 ; }
            :
            {
                OrderBookPallet::<T>::delete_orderbook(RawOrigin::Root.into(),
                        order_book_id).unwrap();
            }
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify
            {
                assert_eq! (OrderBookPallet :: < T > :: order_books(order_book_id), None)
                ;
            } }`
    = note: to `$crate :: benchmarks_iter!
            ({} {} { T : trading_pair :: Config + core :: fmt :: Debug } () () () ()
            #[configs((x, y) = [(1, 2), (3, 4)])] delete_orderbook { let aboba = 1234 ; }
            :
            {
                OrderBookPallet::<T>::delete_orderbook(RawOrigin::Root.into(),
                        order_book_id).unwrap();
            }
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify
            {
                assert_eq! (OrderBookPallet :: < T > :: order_books(order_book_id), None)
                ;
            }) ;`
    = note: expanding `benchmarks_iter! { {} {} { T : trading_pair :: Config + core :: fmt :: Debug } () () () ()
            #[configs((x, y) = [(1, 2), (3, 4)])] delete_orderbook { let aboba = 1234 ; }
            :
            {
                OrderBookPallet::<T>::delete_orderbook(RawOrigin::Root.into(),
                        order_book_id).unwrap();
            }
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify
            {
                assert_eq! (OrderBookPallet :: < T > :: order_books(order_book_id), None)
                ;
            } }`
    = note: to `$crate :: benchmarks_iter!
            ({} {} { T : trading_pair :: Config + core :: fmt :: Debug } () () () ()
            #[configs((x, y) = [(1, 2), (3, 4)])] delete_orderbook { let aboba = 1234 ; }
            :
            {
                OrderBookPallet::<T>::delete_orderbook(RawOrigin::Root.into(),
                        order_book_id).unwrap();
            }
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify
            {
                assert_eq! (OrderBookPallet :: < T > :: order_books(order_book_id), None)
                ;
            }) ;`
    = note: expanding `benchmarks_iter! { {} {} { T : trading_pair :: Config + core :: fmt :: Debug } () () () ()
            #[configs((x, y) = [(1, 2), (3, 4)])] delete_orderbook { let aboba = 1234 ; }
            :
            {
                OrderBookPallet::<T>::delete_orderbook(RawOrigin::Root.into(),
                        order_book_id).unwrap();
            }
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify
            {
                assert_eq! (OrderBookPallet :: < T > :: order_books(order_book_id), None)
                ;
            } }`
    = note: to `$crate :: benchmarks_iter!
            ({} {} { T : trading_pair :: Config + core :: fmt :: Debug } () () () ()
            #[configs((x, y) = [(1, 2), (3, 4)])] delete_orderbook { let aboba = 1234 ; }
            :
            {
                OrderBookPallet::<T>::delete_orderbook(RawOrigin::Root.into(),
                        order_book_id).unwrap();
            }
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify
            {
                assert_eq! (OrderBookPallet :: < T > :: order_books(order_book_id), None)
                ;
            }) ;`
    = note: expanding `benchmarks_iter! { {} {} { T : trading_pair :: Config + core :: fmt :: Debug } () () () ()
            #[configs((x, y) = [(1, 2), (3, 4)])] delete_orderbook { let aboba = 1234 ; }
            :
            {
                OrderBookPallet::<T>::delete_orderbook(RawOrigin::Root.into(),
                        order_book_id).unwrap();
            }
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify
            {
                assert_eq! (OrderBookPallet :: < T > :: order_books(order_book_id), None)
                ;
            } }`
    = note: to `$crate :: benchmarks_iter!
            ({} {} { T : trading_pair :: Config + core :: fmt :: Debug } () () () ()
            #[configs((x, y) = [(1, 2), (3, 4)])] delete_orderbook { let aboba = 1234 ; }
            :
            {
                OrderBookPallet::<T>::delete_orderbook(RawOrigin::Root.into(),
                        order_book_id).unwrap();
            }
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify
            {
                assert_eq! (OrderBookPallet :: < T > :: order_books(order_book_id), None)
                ;
            }) ;`
    = note: expanding `benchmarks_iter! { {} {} { T : trading_pair :: Config + core :: fmt :: Debug } () () () ()
            #[configs((x, y) = [(1, 2), (3, 4)])] delete_orderbook { let aboba = 1234 ; }
            :
            {
                OrderBookPallet::<T>::delete_orderbook(RawOrigin::Root.into(),
                        order_book_id).unwrap();
            }
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify
            {
                assert_eq! (OrderBookPallet :: < T > :: order_books(order_book_id), None)
                ;
            } }`
    = note: to `$crate :: benchmarks_iter!
            ({} {} { T : trading_pair :: Config + core :: fmt :: Debug } () () () ()
            #[configs((x, y) = [(1, 2), (3, 4)])] delete_orderbook { let aboba = 1234 ; }
            :
            {
                OrderBookPallet::<T>::delete_orderbook(RawOrigin::Root.into(),
                        order_book_id).unwrap();
            }
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify
            {
                assert_eq! (OrderBookPallet :: < T > :: order_books(order_book_id), None)
                ;
            }) ;`
    = note: expanding `benchmarks_iter! { {} {} { T : trading_pair :: Config + core :: fmt :: Debug } () () () ()
            #[configs((x, y) = [(1, 2), (3, 4)])] delete_orderbook { let aboba = 1234 ; }
            :
            {
                OrderBookPallet::<T>::delete_orderbook(RawOrigin::Root.into(),
                        order_book_id).unwrap();
            }
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify
            {
                assert_eq! (OrderBookPallet :: < T > :: order_books(order_book_id), None)
                ;
            } }`
    = note: to `$crate :: benchmarks_iter!
            ({} {} { T : trading_pair :: Config + core :: fmt :: Debug } () () () ()
            #[configs((x, y) = [(1, 2), (3, 4)])] delete_orderbook { let aboba = 1234 ; }
            :
            {
                OrderBookPallet::<T>::delete_orderbook(RawOrigin::Root.into(),
                        order_book_id).unwrap();
            }
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify
            {
                assert_eq! (OrderBookPallet :: < T > :: order_books(order_book_id), None)
                ;
            }) ;`
    = note: expanding `benchmarks_iter! { {} {} { T : trading_pair :: Config + core :: fmt :: Debug } () () () ()
            #[configs((x, y) = [(1, 2), (3, 4)])] delete_orderbook { let aboba = 1234 ; }
            :
            {
                OrderBookPallet::<T>::delete_orderbook(RawOrigin::Root.into(),
                        order_book_id).unwrap();
            }
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify
            {
                assert_eq! (OrderBookPallet :: < T > :: order_books(order_book_id), None)
                ;
            } }`
    = note: to `$crate :: benchmarks_iter!
            ({} {} { T : trading_pair :: Config + core :: fmt :: Debug } () () () ()
            #[configs((x, y) = [(1, 2), (3, 4)])] delete_orderbook { let aboba = 1234 ; }
            :
            {
                OrderBookPallet::<T>::delete_orderbook(RawOrigin::Root.into(),
                        order_book_id).unwrap();
            }
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {
                assert_eq! (OrderBookPallet :: < T > :: order_books(order_book_id), None)
                ;
            }) ;`
    = note: expanding `benchmarks_iter! { {} {} { T : trading_pair :: Config + core :: fmt :: Debug } () () () ()
            #[configs((x, y) = [(1, 2), (3, 4)])] delete_orderbook { let aboba = 1234 ; }
            :
            {
                OrderBookPallet::<T>::delete_orderbook(RawOrigin::Root.into(),
                        order_book_id).unwrap();
            }
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {
                assert_eq! (OrderBookPallet :: < T > :: order_books(order_book_id), None)
                ;
            } }`
    = note: to `$crate :: benchmarks_iter!
            ({} {} { T : trading_pair :: Config + core :: fmt :: Debug } () () () ()
            #[configs((x, y) = [(1, 2), (3, 4)])] delete_orderbook { let aboba = 1234 ; }
            :
            {
                OrderBookPallet::<T>::delete_orderbook(RawOrigin::Root.into(),
                        order_book_id).unwrap();
            }
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify
            {
                assert_eq! (OrderBookPallet :: < T > :: order_books(order_book_id), None)
                ;
            }) ;`
    = note: expanding `benchmarks_iter! { {} {} { T : trading_pair :: Config + core :: fmt :: Debug } () () () ()
            #[configs((x, y) = [(1, 2), (3, 4)])] delete_orderbook { let aboba = 1234 ; }
            :
            {
                OrderBookPallet::<T>::delete_orderbook(RawOrigin::Root.into(),
                        order_book_id).unwrap();
            }
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify
            {
                assert_eq! (OrderBookPallet :: < T > :: order_books(order_book_id), None)
                ;
            } }`
    = note: to `$crate :: benchmarks_iter!
            ({} {} { T : trading_pair :: Config + core :: fmt :: Debug } () () () ()
            #[configs((x, y) = [(1, 2), (3, 4)])] delete_orderbook { let aboba = 1234 ; }
            :
            {
                OrderBookPallet::<T>::delete_orderbook(RawOrigin::Root.into(),
                        order_book_id).unwrap();
            }
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify
            {
                assert_eq! (OrderBookPallet :: < T > :: order_books(order_book_id), None)
                ;
            }) ;`
    = note: expanding `benchmarks_iter! { {} {} { T : trading_pair :: Config + core :: fmt :: Debug } () () () ()
            #[configs((x, y) = [(1, 2), (3, 4)])] delete_orderbook { let aboba = 1234 ; }
            :
            {
                OrderBookPallet::<T>::delete_orderbook(RawOrigin::Root.into(),
                        order_book_id).unwrap();
            }
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify
            {
                assert_eq! (OrderBookPallet :: < T > :: order_books(order_book_id), None)
                ;
            } }`
    = note: to `$crate :: benchmarks_iter!
            ({} {} { T : trading_pair :: Config + core :: fmt :: Debug } () () () ()
            #[configs((x, y) = [(1, 2), (3, 4)])] delete_orderbook { let aboba = 1234 ; }
            :
            {
                OrderBookPallet::<T>::delete_orderbook(RawOrigin::Root.into(),
                        order_book_id).unwrap();
            }
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify
            {
                assert_eq! (OrderBookPallet :: < T > :: order_books(order_book_id), None)
                ;
            }) ;`
    = note: expanding `benchmarks_iter! { {} {} { T : trading_pair :: Config + core :: fmt :: Debug } () () () ()
            #[configs((x, y) = [(1, 2), (3, 4)])] delete_orderbook { let aboba = 1234 ; }
            :
            {
                OrderBookPallet::<T>::delete_orderbook(RawOrigin::Root.into(),
                        order_book_id).unwrap();
            }
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify
            {
                assert_eq! (OrderBookPallet :: < T > :: order_books(order_book_id), None)
                ;
            } }`
    = note: to `$crate :: benchmarks_iter!
            ({} {} { T : trading_pair :: Config + core :: fmt :: Debug } () () () ()
            #[configs((x, y) = [(1, 2), (3, 4)])] delete_orderbook { let aboba = 1234 ; }
            :
            {
                OrderBookPallet::<T>::delete_orderbook(RawOrigin::Root.into(),
                        order_book_id).unwrap();
            }
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify
            {
                assert_eq! (OrderBookPallet :: < T > :: order_books(order_book_id), None)
                ;
            }) ;`
    = note: expanding `benchmarks_iter! { {} {} { T : trading_pair :: Config + core :: fmt :: Debug } () () () ()
            #[configs((x, y) = [(1, 2), (3, 4)])] delete_orderbook { let aboba = 1234 ; }
            :
            {
                OrderBookPallet::<T>::delete_orderbook(RawOrigin::Root.into(),
                        order_book_id).unwrap();
            }
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify
            {
                assert_eq! (OrderBookPallet :: < T > :: order_books(order_book_id), None)
                ;
            } }`
    = note: to `$crate :: benchmarks_iter!
            ({} {} { T : trading_pair :: Config + core :: fmt :: Debug } () () () ()
            #[configs((x, y) = [(1, 2), (3, 4)])] delete_orderbook { let aboba = 1234 ; }
            :
            {
                OrderBookPallet::<T>::delete_orderbook(RawOrigin::Root.into(),
                        order_book_id).unwrap();
            }
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify
            {
                assert_eq! (OrderBookPallet :: < T > :: order_books(order_book_id), None)
                ;
            }) ;`
    = note: expanding `benchmarks_iter! { {} {} { T : trading_pair :: Config + core :: fmt :: Debug } () () () ()
            #[configs((x, y) = [(1, 2), (3, 4)])] delete_orderbook { let aboba = 1234 ; }
            :
            {
                OrderBookPallet::<T>::delete_orderbook(RawOrigin::Root.into(),
                        order_book_id).unwrap();
            }
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify
            {
                assert_eq! (OrderBookPallet :: < T > :: order_books(order_book_id), None)
                ;
            } }`
    = note: to `$crate :: benchmarks_iter!
            ({} {} { T : trading_pair :: Config + core :: fmt :: Debug } () () () ()
            #[configs((x, y) = [(1, 2), (3, 4)])] delete_orderbook { let aboba = 1234 ; }
            :
            {
                OrderBookPallet::<T>::delete_orderbook(RawOrigin::Root.into(),
                        order_book_id).unwrap();
            }
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify
            {
                assert_eq! (OrderBookPallet :: < T > :: order_books(order_book_id), None)
                ;
            }) ;`
    = note: expanding `benchmarks_iter! { {} {} { T : trading_pair :: Config + core :: fmt :: Debug } () () () ()
            #[configs((x, y) = [(1, 2), (3, 4)])] delete_orderbook { let aboba = 1234 ; }
            :
            {
                OrderBookPallet::<T>::delete_orderbook(RawOrigin::Root.into(),
                        order_book_id).unwrap();
            }
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify
            {
                assert_eq! (OrderBookPallet :: < T > :: order_books(order_book_id), None)
                ;
            } }`
    = note: to `$crate :: benchmarks_iter!
            ({} {} { T : trading_pair :: Config + core :: fmt :: Debug } () () () ()
            #[configs((x, y) = [(1, 2), (3, 4)])] delete_orderbook { let aboba = 1234 ; }
            :
            {
                OrderBookPallet::<T>::delete_orderbook(RawOrigin::Root.into(),
                        order_book_id).unwrap();
            }
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {
                assert_eq! (OrderBookPallet :: < T > :: order_books(order_book_id), None)
                ;
            }) ;`
    = note: expanding `benchmarks_iter! { {} {} { T : trading_pair :: Config + core :: fmt :: Debug } () () () ()
            #[configs((x, y) = [(1, 2), (3, 4)])] delete_orderbook { let aboba = 1234 ; }
            :
            {
                OrderBookPallet::<T>::delete_orderbook(RawOrigin::Root.into(),
                        order_book_id).unwrap();
            }
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {
                assert_eq! (OrderBookPallet :: < T > :: order_books(order_book_id), None)
                ;
            } }`
    = note: to `$crate :: benchmarks_iter!
            ({} {} { T : trading_pair :: Config + core :: fmt :: Debug } () () () ()
            #[configs((x, y) = [(1, 2), (3, 4)])] delete_orderbook { let aboba = 1234 ; }
            :
            {
                OrderBookPallet::<T>::delete_orderbook(RawOrigin::Root.into(),
                        order_book_id).unwrap();
            }
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify
            {
                assert_eq! (OrderBookPallet :: < T > :: order_books(order_book_id), None)
                ;
            }) ;`
    = note: expanding `benchmarks_iter! { {} {} { T : trading_pair :: Config + core :: fmt :: Debug } () () () ()
            #[configs((x, y) = [(1, 2), (3, 4)])] delete_orderbook { let aboba = 1234 ; }
            :
            {
                OrderBookPallet::<T>::delete_orderbook(RawOrigin::Root.into(),
                        order_book_id).unwrap();
            }
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify
            {
                assert_eq! (OrderBookPallet :: < T > :: order_books(order_book_id), None)
                ;
            } }`
    = note: to `$crate :: benchmarks_iter!
            ({} {} { T : trading_pair :: Config + core :: fmt :: Debug } () () () ()
            #[configs((x, y) = [(1, 2), (3, 4)])] delete_orderbook { let aboba = 1234 ; }
            :
            {
                OrderBookPallet::<T>::delete_orderbook(RawOrigin::Root.into(),
                        order_book_id).unwrap();
            }
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify
            {
                assert_eq! (OrderBookPallet :: < T > :: order_books(order_book_id), None)
                ;
            }) ;`
    = note: expanding `benchmarks_iter! { {} {} { T : trading_pair :: Config + core :: fmt :: Debug } () () () ()
            #[configs((x, y) = [(1, 2), (3, 4)])] delete_orderbook { let aboba = 1234 ; }
            :
            {
                OrderBookPallet::<T>::delete_orderbook(RawOrigin::Root.into(),
                        order_book_id).unwrap();
            }
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify
            {
                assert_eq! (OrderBookPallet :: < T > :: order_books(order_book_id), None)
                ;
            } }`
    = note: to `$crate :: benchmarks_iter!
            ({} {} { T : trading_pair :: Config + core :: fmt :: Debug } () () () ()
            #[configs((x, y) = [(1, 2), (3, 4)])] delete_orderbook { let aboba = 1234 ; }
            :
            {
                OrderBookPallet::<T>::delete_orderbook(RawOrigin::Root.into(),
                        order_book_id).unwrap();
            }
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify
            {
                assert_eq! (OrderBookPallet :: < T > :: order_books(order_book_id), None)
                ;
            }) ;`
    = note: expanding `benchmarks_iter! { {} {} { T : trading_pair :: Config + core :: fmt :: Debug } () () () ()
            #[configs((x, y) = [(1, 2), (3, 4)])] delete_orderbook { let aboba = 1234 ; }
            :
            {
                OrderBookPallet::<T>::delete_orderbook(RawOrigin::Root.into(),
                        order_book_id).unwrap();
            }
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify
            {
                assert_eq! (OrderBookPallet :: < T > :: order_books(order_book_id), None)
                ;
            } }`
    = note: to `$crate :: benchmarks_iter!
            ({} {} { T : trading_pair :: Config + core :: fmt :: Debug } () () () ()
            #[configs((x, y) = [(1, 2), (3, 4)])] delete_orderbook { let aboba = 1234 ; }
            :
            {
                OrderBookPallet::<T>::delete_orderbook(RawOrigin::Root.into(),
                        order_book_id).unwrap();
            }
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify
            {
                assert_eq! (OrderBookPallet :: < T > :: order_books(order_book_id), None)
                ;
            }) ;`
    = note: expanding `benchmarks_iter! { {} {} { T : trading_pair :: Config + core :: fmt :: Debug } () () () ()
            #[configs((x, y) = [(1, 2), (3, 4)])] delete_orderbook { let aboba = 1234 ; }
            :
            {
                OrderBookPallet::<T>::delete_orderbook(RawOrigin::Root.into(),
                        order_book_id).unwrap();
            }
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify
            {
                assert_eq! (OrderBookPallet :: < T > :: order_books(order_book_id), None)
                ;
            } }`
    = note: to `$crate :: benchmarks_iter!
            ({} {} { T : trading_pair :: Config + core :: fmt :: Debug } () () () ()
            #[configs((x, y) = [(1, 2), (3, 4)])] delete_orderbook { let aboba = 1234 ; }
            :
            {
                OrderBookPallet::<T>::delete_orderbook(RawOrigin::Root.into(),
                        order_book_id).unwrap();
            }
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify
            {
                assert_eq! (OrderBookPallet :: < T > :: order_books(order_book_id), None)
                ;
            }) ;`
    = note: expanding `benchmarks_iter! { {} {} { T : trading_pair :: Config + core :: fmt :: Debug } () () () ()
            #[configs((x, y) = [(1, 2), (3, 4)])] delete_orderbook { let aboba = 1234 ; }
            :
            {
                OrderBookPallet::<T>::delete_orderbook(RawOrigin::Root.into(),
                        order_book_id).unwrap();
            }
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify
            {
                assert_eq! (OrderBookPallet :: < T > :: order_books(order_book_id), None)
                ;
            } }`
    = note: to `$crate :: benchmarks_iter!
            ({} {} { T : trading_pair :: Config + core :: fmt :: Debug } () () () ()
            #[configs((x, y) = [(1, 2), (3, 4)])] delete_orderbook { let aboba = 1234 ; }
            :
            {
                OrderBookPallet::<T>::delete_orderbook(RawOrigin::Root.into(),
                        order_book_id).unwrap();
            }
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify
            {
                assert_eq! (OrderBookPallet :: < T > :: order_books(order_book_id), None)
                ;
            }) ;`
    = note: expanding `benchmarks_iter! { {} {} { T : trading_pair :: Config + core :: fmt :: Debug } () () () ()
            #[configs((x, y) = [(1, 2), (3, 4)])] delete_orderbook { let aboba = 1234 ; }
            :
            {
                OrderBookPallet::<T>::delete_orderbook(RawOrigin::Root.into(),
                        order_book_id).unwrap();
            }
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify
            {
                assert_eq! (OrderBookPallet :: < T > :: order_books(order_book_id), None)
                ;
            } }`
    = note: to `$crate :: benchmarks_iter!
            ({} {} { T : trading_pair :: Config + core :: fmt :: Debug } () () () ()
            #[configs((x, y) = [(1, 2), (3, 4)])] delete_orderbook { let aboba = 1234 ; }
            :
            {
                OrderBookPallet::<T>::delete_orderbook(RawOrigin::Root.into(),
                        order_book_id).unwrap();
            }
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify
            {
                assert_eq! (OrderBookPallet :: < T > :: order_books(order_book_id), None)
                ;
            }) ;`
    = note: expanding `benchmarks_iter! { {} {} { T : trading_pair :: Config + core :: fmt :: Debug } () () () ()
            #[configs((x, y) = [(1, 2), (3, 4)])] delete_orderbook { let aboba = 1234 ; }
            :
            {
                OrderBookPallet::<T>::delete_orderbook(RawOrigin::Root.into(),
                        order_book_id).unwrap();
            }
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify
            {
                assert_eq! (OrderBookPallet :: < T > :: order_books(order_book_id), None)
                ;
            } }`
    = note: to `$crate :: benchmarks_iter!
            ({} {} { T : trading_pair :: Config + core :: fmt :: Debug } () () () ()
            #[configs((x, y) = [(1, 2), (3, 4)])] delete_orderbook { let aboba = 1234 ; }
            :
            {
                OrderBookPallet::<T>::delete_orderbook(RawOrigin::Root.into(),
                        order_book_id).unwrap();
            }
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {
                assert_eq! (OrderBookPallet :: < T > :: order_books(order_book_id), None)
                ;
            }) ;`
    = note: expanding `benchmarks_iter! { {} {} { T : trading_pair :: Config + core :: fmt :: Debug } () () () ()
            #[configs((x, y) = [(1, 2), (3, 4)])] delete_orderbook { let aboba = 1234 ; }
            :
            {
                OrderBookPallet::<T>::delete_orderbook(RawOrigin::Root.into(),
                        order_book_id).unwrap();
            }
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {
                assert_eq! (OrderBookPallet :: < T > :: order_books(order_book_id), None)
                ;
            } }`
    = note: to `$crate :: benchmarks_iter!
            ({} {} { T : trading_pair :: Config + core :: fmt :: Debug } () () () ()
            #[configs((x, y) = [(1, 2), (3, 4)])] delete_orderbook { let aboba = 1234 ; }
            :
            {
                OrderBookPallet::<T>::delete_orderbook(RawOrigin::Root.into(),
                        order_book_id).unwrap();
            }
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify
            {
                assert_eq! (OrderBookPallet :: < T > :: order_books(order_book_id), None)
                ;
            }) ;`
    = note: expanding `benchmarks_iter! { {} {} { T : trading_pair :: Config + core :: fmt :: Debug } () () () ()
            #[configs((x, y) = [(1, 2), (3, 4)])] delete_orderbook { let aboba = 1234 ; }
            :
            {
                OrderBookPallet::<T>::delete_orderbook(RawOrigin::Root.into(),
                        order_book_id).unwrap();
            }
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify
            {
                assert_eq! (OrderBookPallet :: < T > :: order_books(order_book_id), None)
                ;
            } }`
    = note: to `$crate :: benchmarks_iter!
            ({} {} { T : trading_pair :: Config + core :: fmt :: Debug } () () () ()
            #[configs((x, y) = [(1, 2), (3, 4)])] delete_orderbook { let aboba = 1234 ; }
            :
            {
                OrderBookPallet::<T>::delete_orderbook(RawOrigin::Root.into(),
                        order_book_id).unwrap();
            }
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify
            {
                assert_eq! (OrderBookPallet :: < T > :: order_books(order_book_id), None)
                ;
            }) ;`
    = note: expanding `benchmarks_iter! { {} {} { T : trading_pair :: Config + core :: fmt :: Debug } () () () ()
            #[configs((x, y) = [(1, 2), (3, 4)])] delete_orderbook { let aboba = 1234 ; }
            :
            {
                OrderBookPallet::<T>::delete_orderbook(RawOrigin::Root.into(),
                        order_book_id).unwrap();
            }
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify
            {
                assert_eq! (OrderBookPallet :: < T > :: order_books(order_book_id), None)
                ;
            } }`
    = note: to `$crate :: benchmarks_iter!
            ({} {} { T : trading_pair :: Config + core :: fmt :: Debug } () () () ()
            #[configs((x, y) = [(1, 2), (3, 4)])] delete_orderbook { let aboba = 1234 ; }
            :
            {
                OrderBookPallet::<T>::delete_orderbook(RawOrigin::Root.into(),
                        order_book_id).unwrap();
            }
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify
            {
                assert_eq! (OrderBookPallet :: < T > :: order_books(order_book_id), None)
                ;
            }) ;`
    = note: expanding `benchmarks_iter! { {} {} { T : trading_pair :: Config + core :: fmt :: Debug } () () () ()
            #[configs((x, y) = [(1, 2), (3, 4)])] delete_orderbook { let aboba = 1234 ; }
            :
            {
                OrderBookPallet::<T>::delete_orderbook(RawOrigin::Root.into(),
                        order_book_id).unwrap();
            }
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify
            {
                assert_eq! (OrderBookPallet :: < T > :: order_books(order_book_id), None)
                ;
            } }`
    = note: to `$crate :: benchmarks_iter!
            ({} {} { T : trading_pair :: Config + core :: fmt :: Debug } () () () ()
            #[configs((x, y) = [(1, 2), (3, 4)])] delete_orderbook { let aboba = 1234 ; }
            :
            {
                OrderBookPallet::<T>::delete_orderbook(RawOrigin::Root.into(),
                        order_book_id).unwrap();
            }
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify
            {
                assert_eq! (OrderBookPallet :: < T > :: order_books(order_book_id), None)
                ;
            }) ;`
    = note: expanding `benchmarks_iter! { {} {} { T : trading_pair :: Config + core :: fmt :: Debug } () () () ()
            #[configs((x, y) = [(1, 2), (3, 4)])] delete_orderbook { let aboba = 1234 ; }
            :
            {
                OrderBookPallet::<T>::delete_orderbook(RawOrigin::Root.into(),
                        order_book_id).unwrap();
            }
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify
            {
                assert_eq! (OrderBookPallet :: < T > :: order_books(order_book_id), None)
                ;
            } }`
    = note: to `$crate :: benchmarks_iter!
            ({} {} { T : trading_pair :: Config + core :: fmt :: Debug } () () () ()
            #[configs((x, y) = [(1, 2), (3, 4)])] delete_orderbook { let aboba = 1234 ; }
            :
            {
                OrderBookPallet::<T>::delete_orderbook(RawOrigin::Root.into(),
                        order_book_id).unwrap();
            }
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify
            {
                assert_eq! (OrderBookPallet :: < T > :: order_books(order_book_id), None)
                ;
            }) ;`
    = note: expanding `benchmarks_iter! { {} {} { T : trading_pair :: Config + core :: fmt :: Debug } () () () ()
            #[configs((x, y) = [(1, 2), (3, 4)])] delete_orderbook { let aboba = 1234 ; }
            :
            {
                OrderBookPallet::<T>::delete_orderbook(RawOrigin::Root.into(),
                        order_book_id).unwrap();
            }
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify
            {
                assert_eq! (OrderBookPallet :: < T > :: order_books(order_book_id), None)
                ;
            } }`
    = note: to `$crate :: benchmarks_iter!
            ({} {} { T : trading_pair :: Config + core :: fmt :: Debug } () () () ()
            #[configs((x, y) = [(1, 2), (3, 4)])] delete_orderbook { let aboba = 1234 ; }
            :
            {
                OrderBookPallet::<T>::delete_orderbook(RawOrigin::Root.into(),
                        order_book_id).unwrap();
            }
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify
            {
                assert_eq! (OrderBookPallet :: < T > :: order_books(order_book_id), None)
                ;
            }) ;`
    = note: expanding `benchmarks_iter! { {} {} { T : trading_pair :: Config + core :: fmt :: Debug } () () () ()
            #[configs((x, y) = [(1, 2), (3, 4)])] delete_orderbook { let aboba = 1234 ; }
            :
            {
                OrderBookPallet::<T>::delete_orderbook(RawOrigin::Root.into(),
                        order_book_id).unwrap();
            }
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify
            {
                assert_eq! (OrderBookPallet :: < T > :: order_books(order_book_id), None)
                ;
            } }`
    = note: to `$crate :: benchmarks_iter!
            ({} {} { T : trading_pair :: Config + core :: fmt :: Debug } () () () ()
            #[configs((x, y) = [(1, 2), (3, 4)])] delete_orderbook { let aboba = 1234 ; }
            :
            {
                OrderBookPallet::<T>::delete_orderbook(RawOrigin::Root.into(),
                        order_book_id).unwrap();
            }
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {
                assert_eq! (OrderBookPallet :: < T > :: order_books(order_book_id), None)
                ;
            }) ;`
    = note: expanding `benchmarks_iter! { {} {} { T : trading_pair :: Config + core :: fmt :: Debug } () () () ()
            #[configs((x, y) = [(1, 2), (3, 4)])] delete_orderbook { let aboba = 1234 ; }
            :
            {
                OrderBookPallet::<T>::delete_orderbook(RawOrigin::Root.into(),
                        order_book_id).unwrap();
            }
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {
                assert_eq! (OrderBookPallet :: < T > :: order_books(order_book_id), None)
                ;
            } }`
    = note: to `$crate :: benchmarks_iter!
            ({} {} { T : trading_pair :: Config + core :: fmt :: Debug } () () () ()
            #[configs((x, y) = [(1, 2), (3, 4)])] delete_orderbook { let aboba = 1234 ; }
            :
            {
                OrderBookPallet::<T>::delete_orderbook(RawOrigin::Root.into(),
                        order_book_id).unwrap();
            }
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify
            {
                assert_eq! (OrderBookPallet :: < T > :: order_books(order_book_id), None)
                ;
            }) ;`
    = note: expanding `benchmarks_iter! { {} {} { T : trading_pair :: Config + core :: fmt :: Debug } () () () ()
            #[configs((x, y) = [(1, 2), (3, 4)])] delete_orderbook { let aboba = 1234 ; }
            :
            {
                OrderBookPallet::<T>::delete_orderbook(RawOrigin::Root.into(),
                        order_book_id).unwrap();
            }
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify
            {
                assert_eq! (OrderBookPallet :: < T > :: order_books(order_book_id), None)
                ;
            } }`
    = note: to `$crate :: benchmarks_iter!
            ({} {} { T : trading_pair :: Config + core :: fmt :: Debug } () () () ()
            #[configs((x, y) = [(1, 2), (3, 4)])] delete_orderbook { let aboba = 1234 ; }
            :
            {
                OrderBookPallet::<T>::delete_orderbook(RawOrigin::Root.into(),
                        order_book_id).unwrap();
            }
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify
            {
                assert_eq! (OrderBookPallet :: < T > :: order_books(order_book_id), None)
                ;
            }) ;`
    = note: expanding `benchmarks_iter! { {} {} { T : trading_pair :: Config + core :: fmt :: Debug } () () () ()
            #[configs((x, y) = [(1, 2), (3, 4)])] delete_orderbook { let aboba = 1234 ; }
            :
            {
                OrderBookPallet::<T>::delete_orderbook(RawOrigin::Root.into(),
                        order_book_id).unwrap();
            }
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify
            {
                assert_eq! (OrderBookPallet :: < T > :: order_books(order_book_id), None)
                ;
            } }`
    = note: to `$crate :: benchmarks_iter!
            ({} {} { T : trading_pair :: Config + core :: fmt :: Debug } () () () ()
            #[configs((x, y) = [(1, 2), (3, 4)])] delete_orderbook { let aboba = 1234 ; }
            :
            {
                OrderBookPallet::<T>::delete_orderbook(RawOrigin::Root.into(),
                        order_book_id).unwrap();
            }
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify
            {
                assert_eq! (OrderBookPallet :: < T > :: order_books(order_book_id), None)
                ;
            }) ;`
    = note: expanding `benchmarks_iter! { {} {} { T : trading_pair :: Config + core :: fmt :: Debug } () () () ()
            #[configs((x, y) = [(1, 2), (3, 4)])] delete_orderbook { let aboba = 1234 ; }
            :
            {
                OrderBookPallet::<T>::delete_orderbook(RawOrigin::Root.into(),
                        order_book_id).unwrap();
            }
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify
            {
                assert_eq! (OrderBookPallet :: < T > :: order_books(order_book_id), None)
                ;
            } }`
    = note: to `$crate :: benchmarks_iter!
            ({} {} { T : trading_pair :: Config + core :: fmt :: Debug } () () () ()
            #[configs((x, y) = [(1, 2), (3, 4)])] delete_orderbook { let aboba = 1234 ; }
            :
            {
                OrderBookPallet::<T>::delete_orderbook(RawOrigin::Root.into(),
                        order_book_id).unwrap();
            }
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify
            {
                assert_eq! (OrderBookPallet :: < T > :: order_books(order_book_id), None)
                ;
            }) ;`
    = note: expanding `benchmarks_iter! { {} {} { T : trading_pair :: Config + core :: fmt :: Debug } () () () ()
            #[configs((x, y) = [(1, 2), (3, 4)])] delete_orderbook { let aboba = 1234 ; }
            :
            {
                OrderBookPallet::<T>::delete_orderbook(RawOrigin::Root.into(),
                        order_book_id).unwrap();
            }
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify
            {
                assert_eq! (OrderBookPallet :: < T > :: order_books(order_book_id), None)
                ;
            } }`
    = note: to `$crate :: benchmarks_iter!
            ({} {} { T : trading_pair :: Config + core :: fmt :: Debug } () () () ()
            #[configs((x, y) = [(1, 2), (3, 4)])] delete_orderbook { let aboba = 1234 ; }
            :
            {
                OrderBookPallet::<T>::delete_orderbook(RawOrigin::Root.into(),
                        order_book_id).unwrap();
            }
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify
            {
                assert_eq! (OrderBookPallet :: < T > :: order_books(order_book_id), None)
                ;
            }) ;`
    = note: expanding `benchmarks_iter! { {} {} { T : trading_pair :: Config + core :: fmt :: Debug } () () () ()
            #[configs((x, y) = [(1, 2), (3, 4)])] delete_orderbook { let aboba = 1234 ; }
            :
            {
                OrderBookPallet::<T>::delete_orderbook(RawOrigin::Root.into(),
                        order_book_id).unwrap();
            }
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify
            {
                assert_eq! (OrderBookPallet :: < T > :: order_books(order_book_id), None)
                ;
            } }`
    = note: to `$crate :: benchmarks_iter!
            ({} {} { T : trading_pair :: Config + core :: fmt :: Debug } () () () ()
            #[configs((x, y) = [(1, 2), (3, 4)])] delete_orderbook { let aboba = 1234 ; }
            :
            {
                OrderBookPallet::<T>::delete_orderbook(RawOrigin::Root.into(),
                        order_book_id).unwrap();
            }
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify
            {
                assert_eq! (OrderBookPallet :: < T > :: order_books(order_book_id), None)
                ;
            }) ;`
    = note: expanding `benchmarks_iter! { {} {} { T : trading_pair :: Config + core :: fmt :: Debug } () () () ()
            #[configs((x, y) = [(1, 2), (3, 4)])] delete_orderbook { let aboba = 1234 ; }
            :
            {
                OrderBookPallet::<T>::delete_orderbook(RawOrigin::Root.into(),
                        order_book_id).unwrap();
            }
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify
            {
                assert_eq! (OrderBookPallet :: < T > :: order_books(order_book_id), None)
                ;
            } }`
    = note: to `$crate :: benchmarks_iter!
            ({} {} { T : trading_pair :: Config + core :: fmt :: Debug } () () () ()
            #[configs((x, y) = [(1, 2), (3, 4)])] delete_orderbook { let aboba = 1234 ; }
            :
            {
                OrderBookPallet::<T>::delete_orderbook(RawOrigin::Root.into(),
                        order_book_id).unwrap();
            }
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify
            {
                assert_eq! (OrderBookPallet :: < T > :: order_books(order_book_id), None)
                ;
            }) ;`
    = note: expanding `benchmarks_iter! { {} {} { T : trading_pair :: Config + core :: fmt :: Debug } () () () ()
            #[configs((x, y) = [(1, 2), (3, 4)])] delete_orderbook { let aboba = 1234 ; }
            :
            {
                OrderBookPallet::<T>::delete_orderbook(RawOrigin::Root.into(),
                        order_book_id).unwrap();
            }
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify
            {
                assert_eq! (OrderBookPallet :: < T > :: order_books(order_book_id), None)
                ;
            } }`
    = note: to `$crate :: benchmarks_iter!
            ({} {} { T : trading_pair :: Config + core :: fmt :: Debug } () () () ()
            #[configs((x, y) = [(1, 2), (3, 4)])] delete_orderbook { let aboba = 1234 ; }
            :
            {
                OrderBookPallet::<T>::delete_orderbook(RawOrigin::Root.into(),
                        order_book_id).unwrap();
            }
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {
                assert_eq! (OrderBookPallet :: < T > :: order_books(order_book_id), None)
                ;
            }) ;`
    = note: expanding `benchmarks_iter! { {} {} { T : trading_pair :: Config + core :: fmt :: Debug } () () () ()
            #[configs((x, y) = [(1, 2), (3, 4)])] delete_orderbook { let aboba = 1234 ; }
            :
            {
                OrderBookPallet::<T>::delete_orderbook(RawOrigin::Root.into(),
                        order_book_id).unwrap();
            }
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {
                assert_eq! (OrderBookPallet :: < T > :: order_books(order_book_id), None)
                ;
            } }`
    = note: to `$crate :: benchmarks_iter!
            ({} {} { T : trading_pair :: Config + core :: fmt :: Debug } () () () ()
            #[configs((x, y) = [(1, 2), (3, 4)])] delete_orderbook { let aboba = 1234 ; }
            :
            {
                OrderBookPallet::<T>::delete_orderbook(RawOrigin::Root.into(),
                        order_book_id).unwrap();
            }
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify
            {
                assert_eq! (OrderBookPallet :: < T > :: order_books(order_book_id), None)
                ;
            }) ;`
    = note: expanding `benchmarks_iter! { {} {} { T : trading_pair :: Config + core :: fmt :: Debug } () () () ()
            #[configs((x, y) = [(1, 2), (3, 4)])] delete_orderbook { let aboba = 1234 ; }
            :
            {
                OrderBookPallet::<T>::delete_orderbook(RawOrigin::Root.into(),
                        order_book_id).unwrap();
            }
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify
            {
                assert_eq! (OrderBookPallet :: < T > :: order_books(order_book_id), None)
                ;
            } }`
    = note: to `$crate :: benchmarks_iter!
            ({} {} { T : trading_pair :: Config + core :: fmt :: Debug } () () () ()
            #[configs((x, y) = [(1, 2), (3, 4)])] delete_orderbook { let aboba = 1234 ; }
            :
            {
                OrderBookPallet::<T>::delete_orderbook(RawOrigin::Root.into(),
                        order_book_id).unwrap();
            }
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify
            {
                assert_eq! (OrderBookPallet :: < T > :: order_books(order_book_id), None)
                ;
            }) ;`
    = note: expanding `benchmarks_iter! { {} {} { T : trading_pair :: Config + core :: fmt :: Debug } () () () ()
            #[configs((x, y) = [(1, 2), (3, 4)])] delete_orderbook { let aboba = 1234 ; }
            :
            {
                OrderBookPallet::<T>::delete_orderbook(RawOrigin::Root.into(),
                        order_book_id).unwrap();
            }
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify
            {
                assert_eq! (OrderBookPallet :: < T > :: order_books(order_book_id), None)
                ;
            } }`
    = note: to `$crate :: benchmarks_iter!
            ({} {} { T : trading_pair :: Config + core :: fmt :: Debug } () () () ()
            #[configs((x, y) = [(1, 2), (3, 4)])] delete_orderbook { let aboba = 1234 ; }
            :
            {
                OrderBookPallet::<T>::delete_orderbook(RawOrigin::Root.into(),
                        order_book_id).unwrap();
            }
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify
            {
                assert_eq! (OrderBookPallet :: < T > :: order_books(order_book_id), None)
                ;
            }) ;`
    = note: expanding `benchmarks_iter! { {} {} { T : trading_pair :: Config + core :: fmt :: Debug } () () () ()
            #[configs((x, y) = [(1, 2), (3, 4)])] delete_orderbook { let aboba = 1234 ; }
            :
            {
                OrderBookPallet::<T>::delete_orderbook(RawOrigin::Root.into(),
                        order_book_id).unwrap();
            }
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify
            {
                assert_eq! (OrderBookPallet :: < T > :: order_books(order_book_id), None)
                ;
            } }`
    = note: to `$crate :: benchmarks_iter!
            ({} {} { T : trading_pair :: Config + core :: fmt :: Debug } () () () ()
            #[configs((x, y) = [(1, 2), (3, 4)])] delete_orderbook { let aboba = 1234 ; }
            :
            {
                OrderBookPallet::<T>::delete_orderbook(RawOrigin::Root.into(),
                        order_book_id).unwrap();
            }
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify
            {
                assert_eq! (OrderBookPallet :: < T > :: order_books(order_book_id), None)
                ;
            }) ;`
    = note: expanding `benchmarks_iter! { {} {} { T : trading_pair :: Config + core :: fmt :: Debug } () () () ()
            #[configs((x, y) = [(1, 2), (3, 4)])] delete_orderbook { let aboba = 1234 ; }
            :
            {
                OrderBookPallet::<T>::delete_orderbook(RawOrigin::Root.into(),
                        order_book_id).unwrap();
            }
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify
            {
                assert_eq! (OrderBookPallet :: < T > :: order_books(order_book_id), None)
                ;
            } }`
    = note: to `$crate :: benchmarks_iter!
            ({} {} { T : trading_pair :: Config + core :: fmt :: Debug } () () () ()
            #[configs((x, y) = [(1, 2), (3, 4)])] delete_orderbook { let aboba = 1234 ; }
            :
            {
                OrderBookPallet::<T>::delete_orderbook(RawOrigin::Root.into(),
                        order_book_id).unwrap();
            }
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify
            {
                assert_eq! (OrderBookPallet :: < T > :: order_books(order_book_id), None)
                ;
            }) ;`
    = note: expanding `benchmarks_iter! { {} {} { T : trading_pair :: Config + core :: fmt :: Debug } () () () ()
            #[configs((x, y) = [(1, 2), (3, 4)])] delete_orderbook { let aboba = 1234 ; }
            :
            {
                OrderBookPallet::<T>::delete_orderbook(RawOrigin::Root.into(),
                        order_book_id).unwrap();
            }
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify
            {
                assert_eq! (OrderBookPallet :: < T > :: order_books(order_book_id), None)
                ;
            } }`
    = note: to `$crate :: benchmarks_iter!
            ({} {} { T : trading_pair :: Config + core :: fmt :: Debug } () () () ()
            #[configs((x, y) = [(1, 2), (3, 4)])] delete_orderbook { let aboba = 1234 ; }
            :
            {
                OrderBookPallet::<T>::delete_orderbook(RawOrigin::Root.into(),
                        order_book_id).unwrap();
            }
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify
            {
                assert_eq! (OrderBookPallet :: < T > :: order_books(order_book_id), None)
                ;
            }) ;`
    = note: expanding `benchmarks_iter! { {} {} { T : trading_pair :: Config + core :: fmt :: Debug } () () () ()
            #[configs((x, y) = [(1, 2), (3, 4)])] delete_orderbook { let aboba = 1234 ; }
            :
            {
                OrderBookPallet::<T>::delete_orderbook(RawOrigin::Root.into(),
                        order_book_id).unwrap();
            }
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify
            {
                assert_eq! (OrderBookPallet :: < T > :: order_books(order_book_id), None)
                ;
            } }`
    = note: to `$crate :: benchmarks_iter!
            ({} {} { T : trading_pair :: Config + core :: fmt :: Debug } () () () ()
            #[configs((x, y) = [(1, 2), (3, 4)])] delete_orderbook { let aboba = 1234 ; }
            :
            {
                OrderBookPallet::<T>::delete_orderbook(RawOrigin::Root.into(),
                        order_book_id).unwrap();
            }
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {
                assert_eq! (OrderBookPallet :: < T > :: order_books(order_book_id), None)
                ;
            }) ;`
    = note: expanding `benchmarks_iter! { {} {} { T : trading_pair :: Config + core :: fmt :: Debug } () () () ()
            #[configs((x, y) = [(1, 2), (3, 4)])] delete_orderbook { let aboba = 1234 ; }
            :
            {
                OrderBookPallet::<T>::delete_orderbook(RawOrigin::Root.into(),
                        order_book_id).unwrap();
            }
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {
                assert_eq! (OrderBookPallet :: < T > :: order_books(order_book_id), None)
                ;
            } }`
    = note: to `$crate :: benchmarks_iter!
            ({} {} { T : trading_pair :: Config + core :: fmt :: Debug } () () () ()
            #[configs((x, y) = [(1, 2), (3, 4)])] delete_orderbook { let aboba = 1234 ; }
            :
            {
                OrderBookPallet::<T>::delete_orderbook(RawOrigin::Root.into(),
                        order_book_id).unwrap();
            }
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify
            {
                assert_eq! (OrderBookPallet :: < T > :: order_books(order_book_id), None)
                ;
            }) ;`
    = note: expanding `benchmarks_iter! { {} {} { T : trading_pair :: Config + core :: fmt :: Debug } () () () ()
            #[configs((x, y) = [(1, 2), (3, 4)])] delete_orderbook { let aboba = 1234 ; }
            :
            {
                OrderBookPallet::<T>::delete_orderbook(RawOrigin::Root.into(),
                        order_book_id).unwrap();
            }
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify
            {
                assert_eq! (OrderBookPallet :: < T > :: order_books(order_book_id), None)
                ;
            } }`
    = note: to `$crate :: benchmarks_iter!
            ({} {} { T : trading_pair :: Config + core :: fmt :: Debug } () () () ()
            #[configs((x, y) = [(1, 2), (3, 4)])] delete_orderbook { let aboba = 1234 ; }
            :
            {
                OrderBookPallet::<T>::delete_orderbook(RawOrigin::Root.into(),
                        order_book_id).unwrap();
            }
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify
            {
                assert_eq! (OrderBookPallet :: < T > :: order_books(order_book_id), None)
                ;
            }) ;`
    = note: expanding `benchmarks_iter! { {} {} { T : trading_pair :: Config + core :: fmt :: Debug } () () () ()
            #[configs((x, y) = [(1, 2), (3, 4)])] delete_orderbook { let aboba = 1234 ; }
            :
            {
                OrderBookPallet::<T>::delete_orderbook(RawOrigin::Root.into(),
                        order_book_id).unwrap();
            }
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify
            {
                assert_eq! (OrderBookPallet :: < T > :: order_books(order_book_id), None)
                ;
            } }`
    = note: to `$crate :: benchmarks_iter!
            ({} {} { T : trading_pair :: Config + core :: fmt :: Debug } () () () ()
            #[configs((x, y) = [(1, 2), (3, 4)])] delete_orderbook { let aboba = 1234 ; }
            :
            {
                OrderBookPallet::<T>::delete_orderbook(RawOrigin::Root.into(),
                        order_book_id).unwrap();
            }
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify
            {
                assert_eq! (OrderBookPallet :: < T > :: order_books(order_book_id), None)
                ;
            }) ;`
    = note: expanding `benchmarks_iter! { {} {} { T : trading_pair :: Config + core :: fmt :: Debug } () () () ()
            #[configs((x, y) = [(1, 2), (3, 4)])] delete_orderbook { let aboba = 1234 ; }
            :
            {
                OrderBookPallet::<T>::delete_orderbook(RawOrigin::Root.into(),
                        order_book_id).unwrap();
            }
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify
            {
                assert_eq! (OrderBookPallet :: < T > :: order_books(order_book_id), None)
                ;
            } }`
    = note: to `$crate :: benchmarks_iter!
            ({} {} { T : trading_pair :: Config + core :: fmt :: Debug } () () () ()
            #[configs((x, y) = [(1, 2), (3, 4)])] delete_orderbook { let aboba = 1234 ; }
            :
            {
                OrderBookPallet::<T>::delete_orderbook(RawOrigin::Root.into(),
                        order_book_id).unwrap();
            }
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify
            {
                assert_eq! (OrderBookPallet :: < T > :: order_books(order_book_id), None)
                ;
            }) ;`
    = note: expanding `benchmarks_iter! { {} {} { T : trading_pair :: Config + core :: fmt :: Debug } () () () ()
            #[configs((x, y) = [(1, 2), (3, 4)])] delete_orderbook { let aboba = 1234 ; }
            :
            {
                OrderBookPallet::<T>::delete_orderbook(RawOrigin::Root.into(),
                        order_book_id).unwrap();
            }
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify
            {
                assert_eq! (OrderBookPallet :: < T > :: order_books(order_book_id), None)
                ;
            } }`
    = note: to `$crate :: benchmarks_iter!
            ({} {} { T : trading_pair :: Config + core :: fmt :: Debug } () () () ()
            #[configs((x, y) = [(1, 2), (3, 4)])] delete_orderbook { let aboba = 1234 ; }
            :
            {
                OrderBookPallet::<T>::delete_orderbook(RawOrigin::Root.into(),
                        order_book_id).unwrap();
            }
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify
            {
                assert_eq! (OrderBookPallet :: < T > :: order_books(order_book_id), None)
                ;
            }) ;`
    = note: expanding `benchmarks_iter! { {} {} { T : trading_pair :: Config + core :: fmt :: Debug } () () () ()
            #[configs((x, y) = [(1, 2), (3, 4)])] delete_orderbook { let aboba = 1234 ; }
            :
            {
                OrderBookPallet::<T>::delete_orderbook(RawOrigin::Root.into(),
                        order_book_id).unwrap();
            }
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify
            {
                assert_eq! (OrderBookPallet :: < T > :: order_books(order_book_id), None)
                ;
            } }`
    = note: to `$crate :: benchmarks_iter!
            ({} {} { T : trading_pair :: Config + core :: fmt :: Debug } () () () ()
            #[configs((x, y) = [(1, 2), (3, 4)])] delete_orderbook { let aboba = 1234 ; }
            :
            {
                OrderBookPallet::<T>::delete_orderbook(RawOrigin::Root.into(),
                        order_book_id).unwrap();
            }
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify
            {
                assert_eq! (OrderBookPallet :: < T > :: order_books(order_book_id), None)
                ;
            }) ;`
    = note: expanding `benchmarks_iter! { {} {} { T : trading_pair :: Config + core :: fmt :: Debug } () () () ()
            #[configs((x, y) = [(1, 2), (3, 4)])] delete_orderbook { let aboba = 1234 ; }
            :
            {
                OrderBookPallet::<T>::delete_orderbook(RawOrigin::Root.into(),
                        order_book_id).unwrap();
            }
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify
            {
                assert_eq! (OrderBookPallet :: < T > :: order_books(order_book_id), None)
                ;
            } }`
    = note: to `$crate :: benchmarks_iter!
            ({} {} { T : trading_pair :: Config + core :: fmt :: Debug } () () () ()
            #[configs((x, y) = [(1, 2), (3, 4)])] delete_orderbook { let aboba = 1234 ; }
            :
            {
                OrderBookPallet::<T>::delete_orderbook(RawOrigin::Root.into(),
                        order_book_id).unwrap();
            }
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify
            {
                assert_eq! (OrderBookPallet :: < T > :: order_books(order_book_id), None)
                ;
            }) ;`

