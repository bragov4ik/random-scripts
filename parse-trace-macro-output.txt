Diff from
'''
benchmarks! { where_clause { where T : trading_pair :: Config + core :: fmt :: Debug }
            #[configs((x, y) = [(1, 2), (3, 4)])] delete_orderbook { let aboba = 1234 ; }
            :
            {
                OrderBookPallet :: < T > ::
                delete_orderbook(RawOrigin :: Root.into(), order_book_id).unwrap() ;
            } verify
            {
                assert_eq! (OrderBookPallet :: < T > :: order_books(order_book_id), None)
                ;
            } }
'''
to
'''
$crate :: benchmarks_iter!
            ({} {} {} () () () () where_clause
            { where T : trading_pair :: Config + core :: fmt :: Debug }
            #[configs((x, y) = [(1, 2), (3, 4)])] delete_orderbook { let aboba = 1234 ; }
            :
            {
                OrderBookPallet :: < T > ::
                delete_orderbook(RawOrigin :: Root.into(), order_book_id).unwrap() ;
            } verify
            {
                assert_eq! (OrderBookPallet :: < T > :: order_books(order_book_id), None)
                ;
            }) ;
'''
::::::::::::::::::::::::::::::::::::::::::::::::::
- $crate :: benchmarks_iter!
-             ({} {} {} () () () () where_clause
-             { where T : trading_pair :: Config + core :: fmt :: Debug }
? ^^^^^^^^^^^

+ benchmarks! { where_clause { where T : trading_pair :: Config + core :: fmt :: Debug }
? ^^^^^^^^^^^        +++++++++++++++

              #[configs((x, y) = [(1, 2), (3, 4)])] delete_orderbook { let aboba = 1234 ; }
              :
              {
                  OrderBookPallet :: < T > ::
                  delete_orderbook(RawOrigin :: Root.into(), order_book_id).unwrap() ;
              } verify
              {
                  assert_eq! (OrderBookPallet :: < T > :: order_books(order_book_id), None)
                  ;
-             }) ;
?              ^^^

+             } }
?              ^^

====================================================================================================
Diff from
'''
benchmarks_iter! { {} {} {} () () () () where_clause
            { where T : trading_pair :: Config + core :: fmt :: Debug }
            #[configs((x, y) = [(1, 2), (3, 4)])] delete_orderbook { let aboba = 1234 ; }
            :
            {
                OrderBookPallet :: < T > ::
                delete_orderbook(RawOrigin :: Root.into(), order_book_id).unwrap() ;
            } verify
            {
                assert_eq! (OrderBookPallet :: < T > :: order_books(order_book_id), None)
                ;
            } }
'''
to
'''
$crate :: benchmarks_iter!
            {
                {} {} { T : trading_pair :: Config + core :: fmt :: Debug } () () () ()
                #[configs((x, y) = [(1, 2), (3, 4)])] delete_orderbook
                { let aboba = 1234 ; } :
                {
                    OrderBookPallet :: < T > ::
                    delete_orderbook(RawOrigin :: Root.into(), order_book_id).unwrap() ;
                } verify
                {
                    assert_eq!
                    (OrderBookPallet :: < T > :: order_books(order_book_id), None) ;
                }
            }
'''
::::::::::::::::::::::::::::::::::::::::::::::::::
- $crate :: benchmarks_iter!
+ benchmarks_iter! { {} {} {} () () () () where_clause
+             { where T : trading_pair :: Config + core :: fmt :: Debug }
+             #[configs((x, y) = [(1, 2), (3, 4)])] delete_orderbook { let aboba = 1234 ; }
+             :
              {
-                 {} {} { T : trading_pair :: Config + core :: fmt :: Debug } () () () ()
-                 #[configs((x, y) = [(1, 2), (3, 4)])] delete_orderbook
-                 { let aboba = 1234 ; } :
-                 {
-                     OrderBookPallet :: < T > ::
? ----

+                 OrderBookPallet :: < T > ::
-                     delete_orderbook(RawOrigin :: Root.into(), order_book_id).unwrap() ;
? ----

+                 delete_orderbook(RawOrigin :: Root.into(), order_book_id).unwrap() ;
-                 } verify
? ----

+             } verify
+             {
+                 assert_eq! (OrderBookPallet :: < T > :: order_books(order_book_id), None)
-                 {
?                 ^

+                 ;
?                 ^

-                     assert_eq!
-                     (OrderBookPallet :: < T > :: order_books(order_book_id), None) ;
-                 }
-             }
+             } }
?              ++

====================================================================================================
Diff from
'''
benchmarks_iter! { {} {} { T : trading_pair :: Config + core :: fmt :: Debug } () () () ()
            #[configs((x, y) = [(1, 2), (3, 4)])] delete_orderbook { let aboba = 1234 ; }
            :
            {
                OrderBookPallet :: < T > ::
                delete_orderbook(RawOrigin :: Root.into(), order_book_id).unwrap() ;
            } verify
            {
                assert_eq! (OrderBookPallet :: < T > :: order_books(order_book_id), None)
                ;
            } }
'''
to
'''
$crate :: benchmarks_iter!
            ({} {} { T : trading_pair :: Config + core :: fmt :: Debug } () () () ()
            #[configs((x, y) = [(1, 2), (3, 4)])] delete_orderbook { let aboba = 1234 ; }
            :
            {
                OrderBookPallet::<T>::delete_orderbook(RawOrigin::Root.into(),
                        order_book_id).unwrap();
            }
            verify {} verify
            {
                assert_eq! (OrderBookPallet :: < T > :: order_books(order_book_id), None)
                ;
            }) ;
'''
::::::::::::::::::::::::::::::::::::::::::::::::::
- $crate :: benchmarks_iter!
-             ({} {} { T : trading_pair :: Config + core :: fmt :: Debug } () () () ()
? ^^^^^^^^^^^^^

+ benchmarks_iter! { {} {} { T : trading_pair :: Config + core :: fmt :: Debug } () () () ()
? ^^^^^^^^^^^^^^^^^^^

              #[configs((x, y) = [(1, 2), (3, 4)])] delete_orderbook { let aboba = 1234 ; }
              :
              {
-                 OrderBookPallet::<T>::delete_orderbook(RawOrigin::Root.into(),
-                         order_book_id).unwrap();
+                 OrderBookPallet :: < T > ::
+                 delete_orderbook(RawOrigin :: Root.into(), order_book_id).unwrap() ;
-             }
+             } verify
?              +++++++

-             verify {} verify
              {
                  assert_eq! (OrderBookPallet :: < T > :: order_books(order_book_id), None)
                  ;
-             }) ;
?              ^^^

+             } }
?              ^^

====================================================================================================
Diff from
'''
benchmarks_iter! { {} {} { T : trading_pair :: Config + core :: fmt :: Debug } () () () ()
            #[configs((x, y) = [(1, 2), (3, 4)])] delete_orderbook { let aboba = 1234 ; }
            :
            {
                OrderBookPallet::<T>::delete_orderbook(RawOrigin::Root.into(),
                        order_book_id).unwrap();
            }
            verify {} verify
            {
                assert_eq! (OrderBookPallet :: < T > :: order_books(order_book_id), None)
                ;
            } }
'''
to
'''
$crate :: benchmarks_iter!
            ({} {} { T : trading_pair :: Config + core :: fmt :: Debug } () () () ()
            #[configs((x, y) = [(1, 2), (3, 4)])] delete_orderbook { let aboba = 1234 ; }
            :
            {
                OrderBookPallet::<T>::delete_orderbook(RawOrigin::Root.into(),
                        order_book_id).unwrap();
            }
            verify {} verify {} verify
            {
                assert_eq! (OrderBookPallet :: < T > :: order_books(order_book_id), None)
                ;
            }) ;
'''
::::::::::::::::::::::::::::::::::::::::::::::::::
- $crate :: benchmarks_iter!
-             ({} {} { T : trading_pair :: Config + core :: fmt :: Debug } () () () ()
? ^^^^^^^^^^^^^

+ benchmarks_iter! { {} {} { T : trading_pair :: Config + core :: fmt :: Debug } () () () ()
? ^^^^^^^^^^^^^^^^^^^

              #[configs((x, y) = [(1, 2), (3, 4)])] delete_orderbook { let aboba = 1234 ; }
              :
              {
                  OrderBookPallet::<T>::delete_orderbook(RawOrigin::Root.into(),
                          order_book_id).unwrap();
              }
-             verify {} verify {} verify
?                             ----------

+             verify {} verify
              {
                  assert_eq! (OrderBookPallet :: < T > :: order_books(order_book_id), None)
                  ;
-             }) ;
?              ^^^

+             } }
?              ^^

====================================================================================================
Diff from
'''
benchmarks_iter! { {} {} { T : trading_pair :: Config + core :: fmt :: Debug } () () () ()
            #[configs((x, y) = [(1, 2), (3, 4)])] delete_orderbook { let aboba = 1234 ; }
            :
            {
                OrderBookPallet::<T>::delete_orderbook(RawOrigin::Root.into(),
                        order_book_id).unwrap();
            }
            verify {} verify {} verify
            {
                assert_eq! (OrderBookPallet :: < T > :: order_books(order_book_id), None)
                ;
            } }
'''
to
'''
$crate :: benchmarks_iter!
            ({} {} { T : trading_pair :: Config + core :: fmt :: Debug } () () () ()
            #[configs((x, y) = [(1, 2), (3, 4)])] delete_orderbook { let aboba = 1234 ; }
            :
            {
                OrderBookPallet::<T>::delete_orderbook(RawOrigin::Root.into(),
                        order_book_id).unwrap();
            }
            verify {} verify {} verify {} verify
            {
                assert_eq! (OrderBookPallet :: < T > :: order_books(order_book_id), None)
                ;
            }) ;
'''
::::::::::::::::::::::::::::::::::::::::::::::::::
- $crate :: benchmarks_iter!
-             ({} {} { T : trading_pair :: Config + core :: fmt :: Debug } () () () ()
? ^^^^^^^^^^^^^

+ benchmarks_iter! { {} {} { T : trading_pair :: Config + core :: fmt :: Debug } () () () ()
? ^^^^^^^^^^^^^^^^^^^

              #[configs((x, y) = [(1, 2), (3, 4)])] delete_orderbook { let aboba = 1234 ; }
              :
              {
                  OrderBookPallet::<T>::delete_orderbook(RawOrigin::Root.into(),
                          order_book_id).unwrap();
              }
-             verify {} verify {} verify {} verify
?                                       ----------

+             verify {} verify {} verify
              {
                  assert_eq! (OrderBookPallet :: < T > :: order_books(order_book_id), None)
                  ;
-             }) ;
?              ^^^

+             } }
?              ^^

====================================================================================================
Diff from
'''
benchmarks_iter! { {} {} { T : trading_pair :: Config + core :: fmt :: Debug } () () () ()
            #[configs((x, y) = [(1, 2), (3, 4)])] delete_orderbook { let aboba = 1234 ; }
            :
            {
                OrderBookPallet::<T>::delete_orderbook(RawOrigin::Root.into(),
                        order_book_id).unwrap();
            }
            verify {} verify {} verify {} verify
            {
                assert_eq! (OrderBookPallet :: < T > :: order_books(order_book_id), None)
                ;
            } }
'''
to
'''
$crate :: benchmarks_iter!
            ({} {} { T : trading_pair :: Config + core :: fmt :: Debug } () () () ()
            #[configs((x, y) = [(1, 2), (3, 4)])] delete_orderbook { let aboba = 1234 ; }
            :
            {
                OrderBookPallet::<T>::delete_orderbook(RawOrigin::Root.into(),
                        order_book_id).unwrap();
            }
            verify {} verify {} verify {} verify {} verify
            {
                assert_eq! (OrderBookPallet :: < T > :: order_books(order_book_id), None)
                ;
            }) ;
'''
::::::::::::::::::::::::::::::::::::::::::::::::::
- $crate :: benchmarks_iter!
-             ({} {} { T : trading_pair :: Config + core :: fmt :: Debug } () () () ()
? ^^^^^^^^^^^^^

+ benchmarks_iter! { {} {} { T : trading_pair :: Config + core :: fmt :: Debug } () () () ()
? ^^^^^^^^^^^^^^^^^^^

              #[configs((x, y) = [(1, 2), (3, 4)])] delete_orderbook { let aboba = 1234 ; }
              :
              {
                  OrderBookPallet::<T>::delete_orderbook(RawOrigin::Root.into(),
                          order_book_id).unwrap();
              }
-             verify {} verify {} verify {} verify {} verify
?                                                 ----------

+             verify {} verify {} verify {} verify
              {
                  assert_eq! (OrderBookPallet :: < T > :: order_books(order_book_id), None)
                  ;
-             }) ;
?              ^^^

+             } }
?              ^^

====================================================================================================
Diff from
'''
benchmarks_iter! { {} {} { T : trading_pair :: Config + core :: fmt :: Debug } () () () ()
            #[configs((x, y) = [(1, 2), (3, 4)])] delete_orderbook { let aboba = 1234 ; }
            :
            {
                OrderBookPallet::<T>::delete_orderbook(RawOrigin::Root.into(),
                        order_book_id).unwrap();
            }
            verify {} verify {} verify {} verify {} verify
            {
                assert_eq! (OrderBookPallet :: < T > :: order_books(order_book_id), None)
                ;
            } }
'''
to
'''
$crate :: benchmarks_iter!
            ({} {} { T : trading_pair :: Config + core :: fmt :: Debug } () () () ()
            #[configs((x, y) = [(1, 2), (3, 4)])] delete_orderbook { let aboba = 1234 ; }
            :
            {
                OrderBookPallet::<T>::delete_orderbook(RawOrigin::Root.into(),
                        order_book_id).unwrap();
            }
            verify {} verify {} verify {} verify {} verify {} verify
            {
                assert_eq! (OrderBookPallet :: < T > :: order_books(order_book_id), None)
                ;
            }) ;
'''
::::::::::::::::::::::::::::::::::::::::::::::::::
- $crate :: benchmarks_iter!
-             ({} {} { T : trading_pair :: Config + core :: fmt :: Debug } () () () ()
? ^^^^^^^^^^^^^

+ benchmarks_iter! { {} {} { T : trading_pair :: Config + core :: fmt :: Debug } () () () ()
? ^^^^^^^^^^^^^^^^^^^

              #[configs((x, y) = [(1, 2), (3, 4)])] delete_orderbook { let aboba = 1234 ; }
              :
              {
                  OrderBookPallet::<T>::delete_orderbook(RawOrigin::Root.into(),
                          order_book_id).unwrap();
              }
-             verify {} verify {} verify {} verify {} verify {} verify
?                                                           ----------

+             verify {} verify {} verify {} verify {} verify
              {
                  assert_eq! (OrderBookPallet :: < T > :: order_books(order_book_id), None)
                  ;
-             }) ;
?              ^^^

+             } }
?              ^^

====================================================================================================
Diff from
'''
benchmarks_iter! { {} {} { T : trading_pair :: Config + core :: fmt :: Debug } () () () ()
            #[configs((x, y) = [(1, 2), (3, 4)])] delete_orderbook { let aboba = 1234 ; }
            :
            {
                OrderBookPallet::<T>::delete_orderbook(RawOrigin::Root.into(),
                        order_book_id).unwrap();
            }
            verify {} verify {} verify {} verify {} verify {} verify
            {
                assert_eq! (OrderBookPallet :: < T > :: order_books(order_book_id), None)
                ;
            } }
'''
to
'''
$crate :: benchmarks_iter!
            ({} {} { T : trading_pair :: Config + core :: fmt :: Debug } () () () ()
            #[configs((x, y) = [(1, 2), (3, 4)])] delete_orderbook { let aboba = 1234 ; }
            :
            {
                OrderBookPallet::<T>::delete_orderbook(RawOrigin::Root.into(),
                        order_book_id).unwrap();
            }
            verify {} verify {} verify {} verify {} verify {} verify {} verify
            {
                assert_eq! (OrderBookPallet :: < T > :: order_books(order_book_id), None)
                ;
            }) ;
'''
::::::::::::::::::::::::::::::::::::::::::::::::::
- $crate :: benchmarks_iter!
-             ({} {} { T : trading_pair :: Config + core :: fmt :: Debug } () () () ()
? ^^^^^^^^^^^^^

+ benchmarks_iter! { {} {} { T : trading_pair :: Config + core :: fmt :: Debug } () () () ()
? ^^^^^^^^^^^^^^^^^^^

              #[configs((x, y) = [(1, 2), (3, 4)])] delete_orderbook { let aboba = 1234 ; }
              :
              {
                  OrderBookPallet::<T>::delete_orderbook(RawOrigin::Root.into(),
                          order_book_id).unwrap();
              }
-             verify {} verify {} verify {} verify {} verify {} verify {} verify
?                                                                     ----------

+             verify {} verify {} verify {} verify {} verify {} verify
              {
                  assert_eq! (OrderBookPallet :: < T > :: order_books(order_book_id), None)
                  ;
-             }) ;
?              ^^^

+             } }
?              ^^

====================================================================================================
Diff from
'''
benchmarks_iter! { {} {} { T : trading_pair :: Config + core :: fmt :: Debug } () () () ()
            #[configs((x, y) = [(1, 2), (3, 4)])] delete_orderbook { let aboba = 1234 ; }
            :
            {
                OrderBookPallet::<T>::delete_orderbook(RawOrigin::Root.into(),
                        order_book_id).unwrap();
            }
            verify {} verify {} verify {} verify {} verify {} verify {} verify
            {
                assert_eq! (OrderBookPallet :: < T > :: order_books(order_book_id), None)
                ;
            } }
'''
to
'''
$crate :: benchmarks_iter!
            ({} {} { T : trading_pair :: Config + core :: fmt :: Debug } () () () ()
            #[configs((x, y) = [(1, 2), (3, 4)])] delete_orderbook { let aboba = 1234 ; }
            :
            {
                OrderBookPallet::<T>::delete_orderbook(RawOrigin::Root.into(),
                        order_book_id).unwrap();
            }
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {
                assert_eq! (OrderBookPallet :: < T > :: order_books(order_book_id), None)
                ;
            }) ;
'''
::::::::::::::::::::::::::::::::::::::::::::::::::
- $crate :: benchmarks_iter!
-             ({} {} { T : trading_pair :: Config + core :: fmt :: Debug } () () () ()
? ^^^^^^^^^^^^^

+ benchmarks_iter! { {} {} { T : trading_pair :: Config + core :: fmt :: Debug } () () () ()
? ^^^^^^^^^^^^^^^^^^^

              #[configs((x, y) = [(1, 2), (3, 4)])] delete_orderbook { let aboba = 1234 ; }
              :
              {
                  OrderBookPallet::<T>::delete_orderbook(RawOrigin::Root.into(),
                          order_book_id).unwrap();
              }
-             verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
?                                                                               ----------

+             verify {} verify {} verify {} verify {} verify {} verify {} verify
              {
                  assert_eq! (OrderBookPallet :: < T > :: order_books(order_book_id), None)
                  ;
-             }) ;
?              ^^^

+             } }
?              ^^

====================================================================================================
Diff from
'''
benchmarks_iter! { {} {} { T : trading_pair :: Config + core :: fmt :: Debug } () () () ()
            #[configs((x, y) = [(1, 2), (3, 4)])] delete_orderbook { let aboba = 1234 ; }
            :
            {
                OrderBookPallet::<T>::delete_orderbook(RawOrigin::Root.into(),
                        order_book_id).unwrap();
            }
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {
                assert_eq! (OrderBookPallet :: < T > :: order_books(order_book_id), None)
                ;
            } }
'''
to
'''
$crate :: benchmarks_iter!
            ({} {} { T : trading_pair :: Config + core :: fmt :: Debug } () () () ()
            #[configs((x, y) = [(1, 2), (3, 4)])] delete_orderbook { let aboba = 1234 ; }
            :
            {
                OrderBookPallet::<T>::delete_orderbook(RawOrigin::Root.into(),
                        order_book_id).unwrap();
            }
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify
            {
                assert_eq! (OrderBookPallet :: < T > :: order_books(order_book_id), None)
                ;
            }) ;
'''
::::::::::::::::::::::::::::::::::::::::::::::::::
- $crate :: benchmarks_iter!
-             ({} {} { T : trading_pair :: Config + core :: fmt :: Debug } () () () ()
? ^^^^^^^^^^^^^

+ benchmarks_iter! { {} {} { T : trading_pair :: Config + core :: fmt :: Debug } () () () ()
? ^^^^^^^^^^^^^^^^^^^

              #[configs((x, y) = [(1, 2), (3, 4)])] delete_orderbook { let aboba = 1234 ; }
              :
              {
                  OrderBookPallet::<T>::delete_orderbook(RawOrigin::Root.into(),
                          order_book_id).unwrap();
              }
              verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
-             {} verify
              {
                  assert_eq! (OrderBookPallet :: < T > :: order_books(order_book_id), None)
                  ;
-             }) ;
?              ^^^

+             } }
?              ^^

====================================================================================================
Diff from
'''
benchmarks_iter! { {} {} { T : trading_pair :: Config + core :: fmt :: Debug } () () () ()
            #[configs((x, y) = [(1, 2), (3, 4)])] delete_orderbook { let aboba = 1234 ; }
            :
            {
                OrderBookPallet::<T>::delete_orderbook(RawOrigin::Root.into(),
                        order_book_id).unwrap();
            }
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify
            {
                assert_eq! (OrderBookPallet :: < T > :: order_books(order_book_id), None)
                ;
            } }
'''
to
'''
$crate :: benchmarks_iter!
            ({} {} { T : trading_pair :: Config + core :: fmt :: Debug } () () () ()
            #[configs((x, y) = [(1, 2), (3, 4)])] delete_orderbook { let aboba = 1234 ; }
            :
            {
                OrderBookPallet::<T>::delete_orderbook(RawOrigin::Root.into(),
                        order_book_id).unwrap();
            }
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify
            {
                assert_eq! (OrderBookPallet :: < T > :: order_books(order_book_id), None)
                ;
            }) ;
'''
::::::::::::::::::::::::::::::::::::::::::::::::::
- $crate :: benchmarks_iter!
-             ({} {} { T : trading_pair :: Config + core :: fmt :: Debug } () () () ()
? ^^^^^^^^^^^^^

+ benchmarks_iter! { {} {} { T : trading_pair :: Config + core :: fmt :: Debug } () () () ()
? ^^^^^^^^^^^^^^^^^^^

              #[configs((x, y) = [(1, 2), (3, 4)])] delete_orderbook { let aboba = 1234 ; }
              :
              {
                  OrderBookPallet::<T>::delete_orderbook(RawOrigin::Root.into(),
                          order_book_id).unwrap();
              }
              verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
-             {} verify {} verify
?                      ----------

+             {} verify
              {
                  assert_eq! (OrderBookPallet :: < T > :: order_books(order_book_id), None)
                  ;
-             }) ;
?              ^^^

+             } }
?              ^^

====================================================================================================
Diff from
'''
benchmarks_iter! { {} {} { T : trading_pair :: Config + core :: fmt :: Debug } () () () ()
            #[configs((x, y) = [(1, 2), (3, 4)])] delete_orderbook { let aboba = 1234 ; }
            :
            {
                OrderBookPallet::<T>::delete_orderbook(RawOrigin::Root.into(),
                        order_book_id).unwrap();
            }
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify
            {
                assert_eq! (OrderBookPallet :: < T > :: order_books(order_book_id), None)
                ;
            } }
'''
to
'''
$crate :: benchmarks_iter!
            ({} {} { T : trading_pair :: Config + core :: fmt :: Debug } () () () ()
            #[configs((x, y) = [(1, 2), (3, 4)])] delete_orderbook { let aboba = 1234 ; }
            :
            {
                OrderBookPallet::<T>::delete_orderbook(RawOrigin::Root.into(),
                        order_book_id).unwrap();
            }
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify
            {
                assert_eq! (OrderBookPallet :: < T > :: order_books(order_book_id), None)
                ;
            }) ;
'''
::::::::::::::::::::::::::::::::::::::::::::::::::
- $crate :: benchmarks_iter!
-             ({} {} { T : trading_pair :: Config + core :: fmt :: Debug } () () () ()
? ^^^^^^^^^^^^^

+ benchmarks_iter! { {} {} { T : trading_pair :: Config + core :: fmt :: Debug } () () () ()
? ^^^^^^^^^^^^^^^^^^^

              #[configs((x, y) = [(1, 2), (3, 4)])] delete_orderbook { let aboba = 1234 ; }
              :
              {
                  OrderBookPallet::<T>::delete_orderbook(RawOrigin::Root.into(),
                          order_book_id).unwrap();
              }
              verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
-             {} verify {} verify {} verify
?                                ----------

+             {} verify {} verify
              {
                  assert_eq! (OrderBookPallet :: < T > :: order_books(order_book_id), None)
                  ;
-             }) ;
?              ^^^

+             } }
?              ^^

====================================================================================================
Diff from
'''
benchmarks_iter! { {} {} { T : trading_pair :: Config + core :: fmt :: Debug } () () () ()
            #[configs((x, y) = [(1, 2), (3, 4)])] delete_orderbook { let aboba = 1234 ; }
            :
            {
                OrderBookPallet::<T>::delete_orderbook(RawOrigin::Root.into(),
                        order_book_id).unwrap();
            }
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify
            {
                assert_eq! (OrderBookPallet :: < T > :: order_books(order_book_id), None)
                ;
            } }
'''
to
'''
$crate :: benchmarks_iter!
            ({} {} { T : trading_pair :: Config + core :: fmt :: Debug } () () () ()
            #[configs((x, y) = [(1, 2), (3, 4)])] delete_orderbook { let aboba = 1234 ; }
            :
            {
                OrderBookPallet::<T>::delete_orderbook(RawOrigin::Root.into(),
                        order_book_id).unwrap();
            }
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify
            {
                assert_eq! (OrderBookPallet :: < T > :: order_books(order_book_id), None)
                ;
            }) ;
'''
::::::::::::::::::::::::::::::::::::::::::::::::::
- $crate :: benchmarks_iter!
-             ({} {} { T : trading_pair :: Config + core :: fmt :: Debug } () () () ()
? ^^^^^^^^^^^^^

+ benchmarks_iter! { {} {} { T : trading_pair :: Config + core :: fmt :: Debug } () () () ()
? ^^^^^^^^^^^^^^^^^^^

              #[configs((x, y) = [(1, 2), (3, 4)])] delete_orderbook { let aboba = 1234 ; }
              :
              {
                  OrderBookPallet::<T>::delete_orderbook(RawOrigin::Root.into(),
                          order_book_id).unwrap();
              }
              verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
-             {} verify {} verify {} verify {} verify
?                                          ----------

+             {} verify {} verify {} verify
              {
                  assert_eq! (OrderBookPallet :: < T > :: order_books(order_book_id), None)
                  ;
-             }) ;
?              ^^^

+             } }
?              ^^

====================================================================================================
Diff from
'''
benchmarks_iter! { {} {} { T : trading_pair :: Config + core :: fmt :: Debug } () () () ()
            #[configs((x, y) = [(1, 2), (3, 4)])] delete_orderbook { let aboba = 1234 ; }
            :
            {
                OrderBookPallet::<T>::delete_orderbook(RawOrigin::Root.into(),
                        order_book_id).unwrap();
            }
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify
            {
                assert_eq! (OrderBookPallet :: < T > :: order_books(order_book_id), None)
                ;
            } }
'''
to
'''
$crate :: benchmarks_iter!
            ({} {} { T : trading_pair :: Config + core :: fmt :: Debug } () () () ()
            #[configs((x, y) = [(1, 2), (3, 4)])] delete_orderbook { let aboba = 1234 ; }
            :
            {
                OrderBookPallet::<T>::delete_orderbook(RawOrigin::Root.into(),
                        order_book_id).unwrap();
            }
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify
            {
                assert_eq! (OrderBookPallet :: < T > :: order_books(order_book_id), None)
                ;
            }) ;
'''
::::::::::::::::::::::::::::::::::::::::::::::::::
- $crate :: benchmarks_iter!
-             ({} {} { T : trading_pair :: Config + core :: fmt :: Debug } () () () ()
? ^^^^^^^^^^^^^

+ benchmarks_iter! { {} {} { T : trading_pair :: Config + core :: fmt :: Debug } () () () ()
? ^^^^^^^^^^^^^^^^^^^

              #[configs((x, y) = [(1, 2), (3, 4)])] delete_orderbook { let aboba = 1234 ; }
              :
              {
                  OrderBookPallet::<T>::delete_orderbook(RawOrigin::Root.into(),
                          order_book_id).unwrap();
              }
              verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
-             {} verify {} verify {} verify {} verify {} verify
?                                                    ----------

+             {} verify {} verify {} verify {} verify
              {
                  assert_eq! (OrderBookPallet :: < T > :: order_books(order_book_id), None)
                  ;
-             }) ;
?              ^^^

+             } }
?              ^^

====================================================================================================
Diff from
'''
benchmarks_iter! { {} {} { T : trading_pair :: Config + core :: fmt :: Debug } () () () ()
            #[configs((x, y) = [(1, 2), (3, 4)])] delete_orderbook { let aboba = 1234 ; }
            :
            {
                OrderBookPallet::<T>::delete_orderbook(RawOrigin::Root.into(),
                        order_book_id).unwrap();
            }
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify
            {
                assert_eq! (OrderBookPallet :: < T > :: order_books(order_book_id), None)
                ;
            } }
'''
to
'''
$crate :: benchmarks_iter!
            ({} {} { T : trading_pair :: Config + core :: fmt :: Debug } () () () ()
            #[configs((x, y) = [(1, 2), (3, 4)])] delete_orderbook { let aboba = 1234 ; }
            :
            {
                OrderBookPallet::<T>::delete_orderbook(RawOrigin::Root.into(),
                        order_book_id).unwrap();
            }
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify
            {
                assert_eq! (OrderBookPallet :: < T > :: order_books(order_book_id), None)
                ;
            }) ;
'''
::::::::::::::::::::::::::::::::::::::::::::::::::
- $crate :: benchmarks_iter!
-             ({} {} { T : trading_pair :: Config + core :: fmt :: Debug } () () () ()
? ^^^^^^^^^^^^^

+ benchmarks_iter! { {} {} { T : trading_pair :: Config + core :: fmt :: Debug } () () () ()
? ^^^^^^^^^^^^^^^^^^^

              #[configs((x, y) = [(1, 2), (3, 4)])] delete_orderbook { let aboba = 1234 ; }
              :
              {
                  OrderBookPallet::<T>::delete_orderbook(RawOrigin::Root.into(),
                          order_book_id).unwrap();
              }
              verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
-             {} verify {} verify {} verify {} verify {} verify {} verify
?                                                              ----------

+             {} verify {} verify {} verify {} verify {} verify
              {
                  assert_eq! (OrderBookPallet :: < T > :: order_books(order_book_id), None)
                  ;
-             }) ;
?              ^^^

+             } }
?              ^^

====================================================================================================
Diff from
'''
benchmarks_iter! { {} {} { T : trading_pair :: Config + core :: fmt :: Debug } () () () ()
            #[configs((x, y) = [(1, 2), (3, 4)])] delete_orderbook { let aboba = 1234 ; }
            :
            {
                OrderBookPallet::<T>::delete_orderbook(RawOrigin::Root.into(),
                        order_book_id).unwrap();
            }
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify
            {
                assert_eq! (OrderBookPallet :: < T > :: order_books(order_book_id), None)
                ;
            } }
'''
to
'''
$crate :: benchmarks_iter!
            ({} {} { T : trading_pair :: Config + core :: fmt :: Debug } () () () ()
            #[configs((x, y) = [(1, 2), (3, 4)])] delete_orderbook { let aboba = 1234 ; }
            :
            {
                OrderBookPallet::<T>::delete_orderbook(RawOrigin::Root.into(),
                        order_book_id).unwrap();
            }
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {
                assert_eq! (OrderBookPallet :: < T > :: order_books(order_book_id), None)
                ;
            }) ;
'''
::::::::::::::::::::::::::::::::::::::::::::::::::
- $crate :: benchmarks_iter!
-             ({} {} { T : trading_pair :: Config + core :: fmt :: Debug } () () () ()
? ^^^^^^^^^^^^^

+ benchmarks_iter! { {} {} { T : trading_pair :: Config + core :: fmt :: Debug } () () () ()
? ^^^^^^^^^^^^^^^^^^^

              #[configs((x, y) = [(1, 2), (3, 4)])] delete_orderbook { let aboba = 1234 ; }
              :
              {
                  OrderBookPallet::<T>::delete_orderbook(RawOrigin::Root.into(),
                          order_book_id).unwrap();
              }
              verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
-             {} verify {} verify {} verify {} verify {} verify {} verify {} verify
?                                                                        ----------

+             {} verify {} verify {} verify {} verify {} verify {} verify
              {
                  assert_eq! (OrderBookPallet :: < T > :: order_books(order_book_id), None)
                  ;
-             }) ;
?              ^^^

+             } }
?              ^^

====================================================================================================
Diff from
'''
benchmarks_iter! { {} {} { T : trading_pair :: Config + core :: fmt :: Debug } () () () ()
            #[configs((x, y) = [(1, 2), (3, 4)])] delete_orderbook { let aboba = 1234 ; }
            :
            {
                OrderBookPallet::<T>::delete_orderbook(RawOrigin::Root.into(),
                        order_book_id).unwrap();
            }
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {
                assert_eq! (OrderBookPallet :: < T > :: order_books(order_book_id), None)
                ;
            } }
'''
to
'''
$crate :: benchmarks_iter!
            ({} {} { T : trading_pair :: Config + core :: fmt :: Debug } () () () ()
            #[configs((x, y) = [(1, 2), (3, 4)])] delete_orderbook { let aboba = 1234 ; }
            :
            {
                OrderBookPallet::<T>::delete_orderbook(RawOrigin::Root.into(),
                        order_book_id).unwrap();
            }
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify
            {
                assert_eq! (OrderBookPallet :: < T > :: order_books(order_book_id), None)
                ;
            }) ;
'''
::::::::::::::::::::::::::::::::::::::::::::::::::
- $crate :: benchmarks_iter!
-             ({} {} { T : trading_pair :: Config + core :: fmt :: Debug } () () () ()
? ^^^^^^^^^^^^^

+ benchmarks_iter! { {} {} { T : trading_pair :: Config + core :: fmt :: Debug } () () () ()
? ^^^^^^^^^^^^^^^^^^^

              #[configs((x, y) = [(1, 2), (3, 4)])] delete_orderbook { let aboba = 1234 ; }
              :
              {
                  OrderBookPallet::<T>::delete_orderbook(RawOrigin::Root.into(),
                          order_book_id).unwrap();
              }
              verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
-             {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
?                                                                                  ---

+             {} verify {} verify {} verify {} verify {} verify {} verify {} verify
-             verify
              {
                  assert_eq! (OrderBookPallet :: < T > :: order_books(order_book_id), None)
                  ;
-             }) ;
?              ^^^

+             } }
?              ^^

====================================================================================================
Diff from
'''
benchmarks_iter! { {} {} { T : trading_pair :: Config + core :: fmt :: Debug } () () () ()
            #[configs((x, y) = [(1, 2), (3, 4)])] delete_orderbook { let aboba = 1234 ; }
            :
            {
                OrderBookPallet::<T>::delete_orderbook(RawOrigin::Root.into(),
                        order_book_id).unwrap();
            }
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify
            {
                assert_eq! (OrderBookPallet :: < T > :: order_books(order_book_id), None)
                ;
            } }
'''
to
'''
$crate :: benchmarks_iter!
            ({} {} { T : trading_pair :: Config + core :: fmt :: Debug } () () () ()
            #[configs((x, y) = [(1, 2), (3, 4)])] delete_orderbook { let aboba = 1234 ; }
            :
            {
                OrderBookPallet::<T>::delete_orderbook(RawOrigin::Root.into(),
                        order_book_id).unwrap();
            }
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify
            {
                assert_eq! (OrderBookPallet :: < T > :: order_books(order_book_id), None)
                ;
            }) ;
'''
::::::::::::::::::::::::::::::::::::::::::::::::::
- $crate :: benchmarks_iter!
-             ({} {} { T : trading_pair :: Config + core :: fmt :: Debug } () () () ()
? ^^^^^^^^^^^^^

+ benchmarks_iter! { {} {} { T : trading_pair :: Config + core :: fmt :: Debug } () () () ()
? ^^^^^^^^^^^^^^^^^^^

              #[configs((x, y) = [(1, 2), (3, 4)])] delete_orderbook { let aboba = 1234 ; }
              :
              {
                  OrderBookPallet::<T>::delete_orderbook(RawOrigin::Root.into(),
                          order_book_id).unwrap();
              }
              verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
              {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
-             verify {} verify
?                   ----------

+             verify
              {
                  assert_eq! (OrderBookPallet :: < T > :: order_books(order_book_id), None)
                  ;
-             }) ;
?              ^^^

+             } }
?              ^^

====================================================================================================
Diff from
'''
benchmarks_iter! { {} {} { T : trading_pair :: Config + core :: fmt :: Debug } () () () ()
            #[configs((x, y) = [(1, 2), (3, 4)])] delete_orderbook { let aboba = 1234 ; }
            :
            {
                OrderBookPallet::<T>::delete_orderbook(RawOrigin::Root.into(),
                        order_book_id).unwrap();
            }
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify
            {
                assert_eq! (OrderBookPallet :: < T > :: order_books(order_book_id), None)
                ;
            } }
'''
to
'''
$crate :: benchmarks_iter!
            ({} {} { T : trading_pair :: Config + core :: fmt :: Debug } () () () ()
            #[configs((x, y) = [(1, 2), (3, 4)])] delete_orderbook { let aboba = 1234 ; }
            :
            {
                OrderBookPallet::<T>::delete_orderbook(RawOrigin::Root.into(),
                        order_book_id).unwrap();
            }
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify
            {
                assert_eq! (OrderBookPallet :: < T > :: order_books(order_book_id), None)
                ;
            }) ;
'''
::::::::::::::::::::::::::::::::::::::::::::::::::
- $crate :: benchmarks_iter!
-             ({} {} { T : trading_pair :: Config + core :: fmt :: Debug } () () () ()
? ^^^^^^^^^^^^^

+ benchmarks_iter! { {} {} { T : trading_pair :: Config + core :: fmt :: Debug } () () () ()
? ^^^^^^^^^^^^^^^^^^^

              #[configs((x, y) = [(1, 2), (3, 4)])] delete_orderbook { let aboba = 1234 ; }
              :
              {
                  OrderBookPallet::<T>::delete_orderbook(RawOrigin::Root.into(),
                          order_book_id).unwrap();
              }
              verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
              {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
-             verify {} verify {} verify
?                             ----------

+             verify {} verify
              {
                  assert_eq! (OrderBookPallet :: < T > :: order_books(order_book_id), None)
                  ;
-             }) ;
?              ^^^

+             } }
?              ^^

====================================================================================================
Diff from
'''
benchmarks_iter! { {} {} { T : trading_pair :: Config + core :: fmt :: Debug } () () () ()
            #[configs((x, y) = [(1, 2), (3, 4)])] delete_orderbook { let aboba = 1234 ; }
            :
            {
                OrderBookPallet::<T>::delete_orderbook(RawOrigin::Root.into(),
                        order_book_id).unwrap();
            }
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify
            {
                assert_eq! (OrderBookPallet :: < T > :: order_books(order_book_id), None)
                ;
            } }
'''
to
'''
$crate :: benchmarks_iter!
            ({} {} { T : trading_pair :: Config + core :: fmt :: Debug } () () () ()
            #[configs((x, y) = [(1, 2), (3, 4)])] delete_orderbook { let aboba = 1234 ; }
            :
            {
                OrderBookPallet::<T>::delete_orderbook(RawOrigin::Root.into(),
                        order_book_id).unwrap();
            }
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify
            {
                assert_eq! (OrderBookPallet :: < T > :: order_books(order_book_id), None)
                ;
            }) ;
'''
::::::::::::::::::::::::::::::::::::::::::::::::::
- $crate :: benchmarks_iter!
-             ({} {} { T : trading_pair :: Config + core :: fmt :: Debug } () () () ()
? ^^^^^^^^^^^^^

+ benchmarks_iter! { {} {} { T : trading_pair :: Config + core :: fmt :: Debug } () () () ()
? ^^^^^^^^^^^^^^^^^^^

              #[configs((x, y) = [(1, 2), (3, 4)])] delete_orderbook { let aboba = 1234 ; }
              :
              {
                  OrderBookPallet::<T>::delete_orderbook(RawOrigin::Root.into(),
                          order_book_id).unwrap();
              }
              verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
              {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
-             verify {} verify {} verify {} verify
?                                       ----------

+             verify {} verify {} verify
              {
                  assert_eq! (OrderBookPallet :: < T > :: order_books(order_book_id), None)
                  ;
-             }) ;
?              ^^^

+             } }
?              ^^

====================================================================================================
Diff from
'''
benchmarks_iter! { {} {} { T : trading_pair :: Config + core :: fmt :: Debug } () () () ()
            #[configs((x, y) = [(1, 2), (3, 4)])] delete_orderbook { let aboba = 1234 ; }
            :
            {
                OrderBookPallet::<T>::delete_orderbook(RawOrigin::Root.into(),
                        order_book_id).unwrap();
            }
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify
            {
                assert_eq! (OrderBookPallet :: < T > :: order_books(order_book_id), None)
                ;
            } }
'''
to
'''
$crate :: benchmarks_iter!
            ({} {} { T : trading_pair :: Config + core :: fmt :: Debug } () () () ()
            #[configs((x, y) = [(1, 2), (3, 4)])] delete_orderbook { let aboba = 1234 ; }
            :
            {
                OrderBookPallet::<T>::delete_orderbook(RawOrigin::Root.into(),
                        order_book_id).unwrap();
            }
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify
            {
                assert_eq! (OrderBookPallet :: < T > :: order_books(order_book_id), None)
                ;
            }) ;
'''
::::::::::::::::::::::::::::::::::::::::::::::::::
- $crate :: benchmarks_iter!
-             ({} {} { T : trading_pair :: Config + core :: fmt :: Debug } () () () ()
? ^^^^^^^^^^^^^

+ benchmarks_iter! { {} {} { T : trading_pair :: Config + core :: fmt :: Debug } () () () ()
? ^^^^^^^^^^^^^^^^^^^

              #[configs((x, y) = [(1, 2), (3, 4)])] delete_orderbook { let aboba = 1234 ; }
              :
              {
                  OrderBookPallet::<T>::delete_orderbook(RawOrigin::Root.into(),
                          order_book_id).unwrap();
              }
              verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
              {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
-             verify {} verify {} verify {} verify {} verify
?                                                 ----------

+             verify {} verify {} verify {} verify
              {
                  assert_eq! (OrderBookPallet :: < T > :: order_books(order_book_id), None)
                  ;
-             }) ;
?              ^^^

+             } }
?              ^^

====================================================================================================
Diff from
'''
benchmarks_iter! { {} {} { T : trading_pair :: Config + core :: fmt :: Debug } () () () ()
            #[configs((x, y) = [(1, 2), (3, 4)])] delete_orderbook { let aboba = 1234 ; }
            :
            {
                OrderBookPallet::<T>::delete_orderbook(RawOrigin::Root.into(),
                        order_book_id).unwrap();
            }
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify
            {
                assert_eq! (OrderBookPallet :: < T > :: order_books(order_book_id), None)
                ;
            } }
'''
to
'''
$crate :: benchmarks_iter!
            ({} {} { T : trading_pair :: Config + core :: fmt :: Debug } () () () ()
            #[configs((x, y) = [(1, 2), (3, 4)])] delete_orderbook { let aboba = 1234 ; }
            :
            {
                OrderBookPallet::<T>::delete_orderbook(RawOrigin::Root.into(),
                        order_book_id).unwrap();
            }
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify
            {
                assert_eq! (OrderBookPallet :: < T > :: order_books(order_book_id), None)
                ;
            }) ;
'''
::::::::::::::::::::::::::::::::::::::::::::::::::
- $crate :: benchmarks_iter!
-             ({} {} { T : trading_pair :: Config + core :: fmt :: Debug } () () () ()
? ^^^^^^^^^^^^^

+ benchmarks_iter! { {} {} { T : trading_pair :: Config + core :: fmt :: Debug } () () () ()
? ^^^^^^^^^^^^^^^^^^^

              #[configs((x, y) = [(1, 2), (3, 4)])] delete_orderbook { let aboba = 1234 ; }
              :
              {
                  OrderBookPallet::<T>::delete_orderbook(RawOrigin::Root.into(),
                          order_book_id).unwrap();
              }
              verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
              {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
-             verify {} verify {} verify {} verify {} verify {} verify
?                                                           ----------

+             verify {} verify {} verify {} verify {} verify
              {
                  assert_eq! (OrderBookPallet :: < T > :: order_books(order_book_id), None)
                  ;
-             }) ;
?              ^^^

+             } }
?              ^^

====================================================================================================
Diff from
'''
benchmarks_iter! { {} {} { T : trading_pair :: Config + core :: fmt :: Debug } () () () ()
            #[configs((x, y) = [(1, 2), (3, 4)])] delete_orderbook { let aboba = 1234 ; }
            :
            {
                OrderBookPallet::<T>::delete_orderbook(RawOrigin::Root.into(),
                        order_book_id).unwrap();
            }
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify
            {
                assert_eq! (OrderBookPallet :: < T > :: order_books(order_book_id), None)
                ;
            } }
'''
to
'''
$crate :: benchmarks_iter!
            ({} {} { T : trading_pair :: Config + core :: fmt :: Debug } () () () ()
            #[configs((x, y) = [(1, 2), (3, 4)])] delete_orderbook { let aboba = 1234 ; }
            :
            {
                OrderBookPallet::<T>::delete_orderbook(RawOrigin::Root.into(),
                        order_book_id).unwrap();
            }
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify
            {
                assert_eq! (OrderBookPallet :: < T > :: order_books(order_book_id), None)
                ;
            }) ;
'''
::::::::::::::::::::::::::::::::::::::::::::::::::
- $crate :: benchmarks_iter!
-             ({} {} { T : trading_pair :: Config + core :: fmt :: Debug } () () () ()
? ^^^^^^^^^^^^^

+ benchmarks_iter! { {} {} { T : trading_pair :: Config + core :: fmt :: Debug } () () () ()
? ^^^^^^^^^^^^^^^^^^^

              #[configs((x, y) = [(1, 2), (3, 4)])] delete_orderbook { let aboba = 1234 ; }
              :
              {
                  OrderBookPallet::<T>::delete_orderbook(RawOrigin::Root.into(),
                          order_book_id).unwrap();
              }
              verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
              {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
-             verify {} verify {} verify {} verify {} verify {} verify {} verify
?                                                                     ----------

+             verify {} verify {} verify {} verify {} verify {} verify
              {
                  assert_eq! (OrderBookPallet :: < T > :: order_books(order_book_id), None)
                  ;
-             }) ;
?              ^^^

+             } }
?              ^^

====================================================================================================
Diff from
'''
benchmarks_iter! { {} {} { T : trading_pair :: Config + core :: fmt :: Debug } () () () ()
            #[configs((x, y) = [(1, 2), (3, 4)])] delete_orderbook { let aboba = 1234 ; }
            :
            {
                OrderBookPallet::<T>::delete_orderbook(RawOrigin::Root.into(),
                        order_book_id).unwrap();
            }
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify
            {
                assert_eq! (OrderBookPallet :: < T > :: order_books(order_book_id), None)
                ;
            } }
'''
to
'''
$crate :: benchmarks_iter!
            ({} {} { T : trading_pair :: Config + core :: fmt :: Debug } () () () ()
            #[configs((x, y) = [(1, 2), (3, 4)])] delete_orderbook { let aboba = 1234 ; }
            :
            {
                OrderBookPallet::<T>::delete_orderbook(RawOrigin::Root.into(),
                        order_book_id).unwrap();
            }
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {
                assert_eq! (OrderBookPallet :: < T > :: order_books(order_book_id), None)
                ;
            }) ;
'''
::::::::::::::::::::::::::::::::::::::::::::::::::
- $crate :: benchmarks_iter!
-             ({} {} { T : trading_pair :: Config + core :: fmt :: Debug } () () () ()
? ^^^^^^^^^^^^^

+ benchmarks_iter! { {} {} { T : trading_pair :: Config + core :: fmt :: Debug } () () () ()
? ^^^^^^^^^^^^^^^^^^^

              #[configs((x, y) = [(1, 2), (3, 4)])] delete_orderbook { let aboba = 1234 ; }
              :
              {
                  OrderBookPallet::<T>::delete_orderbook(RawOrigin::Root.into(),
                          order_book_id).unwrap();
              }
              verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
              {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
-             verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
?                                                                               ----------

+             verify {} verify {} verify {} verify {} verify {} verify {} verify
              {
                  assert_eq! (OrderBookPallet :: < T > :: order_books(order_book_id), None)
                  ;
-             }) ;
?              ^^^

+             } }
?              ^^

====================================================================================================
Diff from
'''
benchmarks_iter! { {} {} { T : trading_pair :: Config + core :: fmt :: Debug } () () () ()
            #[configs((x, y) = [(1, 2), (3, 4)])] delete_orderbook { let aboba = 1234 ; }
            :
            {
                OrderBookPallet::<T>::delete_orderbook(RawOrigin::Root.into(),
                        order_book_id).unwrap();
            }
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {
                assert_eq! (OrderBookPallet :: < T > :: order_books(order_book_id), None)
                ;
            } }
'''
to
'''
$crate :: benchmarks_iter!
            ({} {} { T : trading_pair :: Config + core :: fmt :: Debug } () () () ()
            #[configs((x, y) = [(1, 2), (3, 4)])] delete_orderbook { let aboba = 1234 ; }
            :
            {
                OrderBookPallet::<T>::delete_orderbook(RawOrigin::Root.into(),
                        order_book_id).unwrap();
            }
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify
            {
                assert_eq! (OrderBookPallet :: < T > :: order_books(order_book_id), None)
                ;
            }) ;
'''
::::::::::::::::::::::::::::::::::::::::::::::::::
- $crate :: benchmarks_iter!
-             ({} {} { T : trading_pair :: Config + core :: fmt :: Debug } () () () ()
? ^^^^^^^^^^^^^

+ benchmarks_iter! { {} {} { T : trading_pair :: Config + core :: fmt :: Debug } () () () ()
? ^^^^^^^^^^^^^^^^^^^

              #[configs((x, y) = [(1, 2), (3, 4)])] delete_orderbook { let aboba = 1234 ; }
              :
              {
                  OrderBookPallet::<T>::delete_orderbook(RawOrigin::Root.into(),
                          order_book_id).unwrap();
              }
              verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
              {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
              verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
-             {} verify
              {
                  assert_eq! (OrderBookPallet :: < T > :: order_books(order_book_id), None)
                  ;
-             }) ;
?              ^^^

+             } }
?              ^^

====================================================================================================
Diff from
'''
benchmarks_iter! { {} {} { T : trading_pair :: Config + core :: fmt :: Debug } () () () ()
            #[configs((x, y) = [(1, 2), (3, 4)])] delete_orderbook { let aboba = 1234 ; }
            :
            {
                OrderBookPallet::<T>::delete_orderbook(RawOrigin::Root.into(),
                        order_book_id).unwrap();
            }
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify
            {
                assert_eq! (OrderBookPallet :: < T > :: order_books(order_book_id), None)
                ;
            } }
'''
to
'''
$crate :: benchmarks_iter!
            ({} {} { T : trading_pair :: Config + core :: fmt :: Debug } () () () ()
            #[configs((x, y) = [(1, 2), (3, 4)])] delete_orderbook { let aboba = 1234 ; }
            :
            {
                OrderBookPallet::<T>::delete_orderbook(RawOrigin::Root.into(),
                        order_book_id).unwrap();
            }
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify
            {
                assert_eq! (OrderBookPallet :: < T > :: order_books(order_book_id), None)
                ;
            }) ;
'''
::::::::::::::::::::::::::::::::::::::::::::::::::
- $crate :: benchmarks_iter!
-             ({} {} { T : trading_pair :: Config + core :: fmt :: Debug } () () () ()
? ^^^^^^^^^^^^^

+ benchmarks_iter! { {} {} { T : trading_pair :: Config + core :: fmt :: Debug } () () () ()
? ^^^^^^^^^^^^^^^^^^^

              #[configs((x, y) = [(1, 2), (3, 4)])] delete_orderbook { let aboba = 1234 ; }
              :
              {
                  OrderBookPallet::<T>::delete_orderbook(RawOrigin::Root.into(),
                          order_book_id).unwrap();
              }
              verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
              {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
              verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
-             {} verify {} verify
?                      ----------

+             {} verify
              {
                  assert_eq! (OrderBookPallet :: < T > :: order_books(order_book_id), None)
                  ;
-             }) ;
?              ^^^

+             } }
?              ^^

====================================================================================================
Diff from
'''
benchmarks_iter! { {} {} { T : trading_pair :: Config + core :: fmt :: Debug } () () () ()
            #[configs((x, y) = [(1, 2), (3, 4)])] delete_orderbook { let aboba = 1234 ; }
            :
            {
                OrderBookPallet::<T>::delete_orderbook(RawOrigin::Root.into(),
                        order_book_id).unwrap();
            }
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify
            {
                assert_eq! (OrderBookPallet :: < T > :: order_books(order_book_id), None)
                ;
            } }
'''
to
'''
$crate :: benchmarks_iter!
            ({} {} { T : trading_pair :: Config + core :: fmt :: Debug } () () () ()
            #[configs((x, y) = [(1, 2), (3, 4)])] delete_orderbook { let aboba = 1234 ; }
            :
            {
                OrderBookPallet::<T>::delete_orderbook(RawOrigin::Root.into(),
                        order_book_id).unwrap();
            }
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify
            {
                assert_eq! (OrderBookPallet :: < T > :: order_books(order_book_id), None)
                ;
            }) ;
'''
::::::::::::::::::::::::::::::::::::::::::::::::::
- $crate :: benchmarks_iter!
-             ({} {} { T : trading_pair :: Config + core :: fmt :: Debug } () () () ()
? ^^^^^^^^^^^^^

+ benchmarks_iter! { {} {} { T : trading_pair :: Config + core :: fmt :: Debug } () () () ()
? ^^^^^^^^^^^^^^^^^^^

              #[configs((x, y) = [(1, 2), (3, 4)])] delete_orderbook { let aboba = 1234 ; }
              :
              {
                  OrderBookPallet::<T>::delete_orderbook(RawOrigin::Root.into(),
                          order_book_id).unwrap();
              }
              verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
              {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
              verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
-             {} verify {} verify {} verify
?                                ----------

+             {} verify {} verify
              {
                  assert_eq! (OrderBookPallet :: < T > :: order_books(order_book_id), None)
                  ;
-             }) ;
?              ^^^

+             } }
?              ^^

====================================================================================================
Diff from
'''
benchmarks_iter! { {} {} { T : trading_pair :: Config + core :: fmt :: Debug } () () () ()
            #[configs((x, y) = [(1, 2), (3, 4)])] delete_orderbook { let aboba = 1234 ; }
            :
            {
                OrderBookPallet::<T>::delete_orderbook(RawOrigin::Root.into(),
                        order_book_id).unwrap();
            }
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify
            {
                assert_eq! (OrderBookPallet :: < T > :: order_books(order_book_id), None)
                ;
            } }
'''
to
'''
$crate :: benchmarks_iter!
            ({} {} { T : trading_pair :: Config + core :: fmt :: Debug } () () () ()
            #[configs((x, y) = [(1, 2), (3, 4)])] delete_orderbook { let aboba = 1234 ; }
            :
            {
                OrderBookPallet::<T>::delete_orderbook(RawOrigin::Root.into(),
                        order_book_id).unwrap();
            }
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify
            {
                assert_eq! (OrderBookPallet :: < T > :: order_books(order_book_id), None)
                ;
            }) ;
'''
::::::::::::::::::::::::::::::::::::::::::::::::::
- $crate :: benchmarks_iter!
-             ({} {} { T : trading_pair :: Config + core :: fmt :: Debug } () () () ()
? ^^^^^^^^^^^^^

+ benchmarks_iter! { {} {} { T : trading_pair :: Config + core :: fmt :: Debug } () () () ()
? ^^^^^^^^^^^^^^^^^^^

              #[configs((x, y) = [(1, 2), (3, 4)])] delete_orderbook { let aboba = 1234 ; }
              :
              {
                  OrderBookPallet::<T>::delete_orderbook(RawOrigin::Root.into(),
                          order_book_id).unwrap();
              }
              verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
              {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
              verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
-             {} verify {} verify {} verify {} verify
?                                          ----------

+             {} verify {} verify {} verify
              {
                  assert_eq! (OrderBookPallet :: < T > :: order_books(order_book_id), None)
                  ;
-             }) ;
?              ^^^

+             } }
?              ^^

====================================================================================================
Diff from
'''
benchmarks_iter! { {} {} { T : trading_pair :: Config + core :: fmt :: Debug } () () () ()
            #[configs((x, y) = [(1, 2), (3, 4)])] delete_orderbook { let aboba = 1234 ; }
            :
            {
                OrderBookPallet::<T>::delete_orderbook(RawOrigin::Root.into(),
                        order_book_id).unwrap();
            }
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify
            {
                assert_eq! (OrderBookPallet :: < T > :: order_books(order_book_id), None)
                ;
            } }
'''
to
'''
$crate :: benchmarks_iter!
            ({} {} { T : trading_pair :: Config + core :: fmt :: Debug } () () () ()
            #[configs((x, y) = [(1, 2), (3, 4)])] delete_orderbook { let aboba = 1234 ; }
            :
            {
                OrderBookPallet::<T>::delete_orderbook(RawOrigin::Root.into(),
                        order_book_id).unwrap();
            }
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify
            {
                assert_eq! (OrderBookPallet :: < T > :: order_books(order_book_id), None)
                ;
            }) ;
'''
::::::::::::::::::::::::::::::::::::::::::::::::::
- $crate :: benchmarks_iter!
-             ({} {} { T : trading_pair :: Config + core :: fmt :: Debug } () () () ()
? ^^^^^^^^^^^^^

+ benchmarks_iter! { {} {} { T : trading_pair :: Config + core :: fmt :: Debug } () () () ()
? ^^^^^^^^^^^^^^^^^^^

              #[configs((x, y) = [(1, 2), (3, 4)])] delete_orderbook { let aboba = 1234 ; }
              :
              {
                  OrderBookPallet::<T>::delete_orderbook(RawOrigin::Root.into(),
                          order_book_id).unwrap();
              }
              verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
              {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
              verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
-             {} verify {} verify {} verify {} verify {} verify
?                                                    ----------

+             {} verify {} verify {} verify {} verify
              {
                  assert_eq! (OrderBookPallet :: < T > :: order_books(order_book_id), None)
                  ;
-             }) ;
?              ^^^

+             } }
?              ^^

====================================================================================================
Diff from
'''
benchmarks_iter! { {} {} { T : trading_pair :: Config + core :: fmt :: Debug } () () () ()
            #[configs((x, y) = [(1, 2), (3, 4)])] delete_orderbook { let aboba = 1234 ; }
            :
            {
                OrderBookPallet::<T>::delete_orderbook(RawOrigin::Root.into(),
                        order_book_id).unwrap();
            }
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify
            {
                assert_eq! (OrderBookPallet :: < T > :: order_books(order_book_id), None)
                ;
            } }
'''
to
'''
$crate :: benchmarks_iter!
            ({} {} { T : trading_pair :: Config + core :: fmt :: Debug } () () () ()
            #[configs((x, y) = [(1, 2), (3, 4)])] delete_orderbook { let aboba = 1234 ; }
            :
            {
                OrderBookPallet::<T>::delete_orderbook(RawOrigin::Root.into(),
                        order_book_id).unwrap();
            }
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify
            {
                assert_eq! (OrderBookPallet :: < T > :: order_books(order_book_id), None)
                ;
            }) ;
'''
::::::::::::::::::::::::::::::::::::::::::::::::::
- $crate :: benchmarks_iter!
-             ({} {} { T : trading_pair :: Config + core :: fmt :: Debug } () () () ()
? ^^^^^^^^^^^^^

+ benchmarks_iter! { {} {} { T : trading_pair :: Config + core :: fmt :: Debug } () () () ()
? ^^^^^^^^^^^^^^^^^^^

              #[configs((x, y) = [(1, 2), (3, 4)])] delete_orderbook { let aboba = 1234 ; }
              :
              {
                  OrderBookPallet::<T>::delete_orderbook(RawOrigin::Root.into(),
                          order_book_id).unwrap();
              }
              verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
              {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
              verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
-             {} verify {} verify {} verify {} verify {} verify {} verify
?                                                              ----------

+             {} verify {} verify {} verify {} verify {} verify
              {
                  assert_eq! (OrderBookPallet :: < T > :: order_books(order_book_id), None)
                  ;
-             }) ;
?              ^^^

+             } }
?              ^^

====================================================================================================
Diff from
'''
benchmarks_iter! { {} {} { T : trading_pair :: Config + core :: fmt :: Debug } () () () ()
            #[configs((x, y) = [(1, 2), (3, 4)])] delete_orderbook { let aboba = 1234 ; }
            :
            {
                OrderBookPallet::<T>::delete_orderbook(RawOrigin::Root.into(),
                        order_book_id).unwrap();
            }
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify
            {
                assert_eq! (OrderBookPallet :: < T > :: order_books(order_book_id), None)
                ;
            } }
'''
to
'''
$crate :: benchmarks_iter!
            ({} {} { T : trading_pair :: Config + core :: fmt :: Debug } () () () ()
            #[configs((x, y) = [(1, 2), (3, 4)])] delete_orderbook { let aboba = 1234 ; }
            :
            {
                OrderBookPallet::<T>::delete_orderbook(RawOrigin::Root.into(),
                        order_book_id).unwrap();
            }
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {
                assert_eq! (OrderBookPallet :: < T > :: order_books(order_book_id), None)
                ;
            }) ;
'''
::::::::::::::::::::::::::::::::::::::::::::::::::
- $crate :: benchmarks_iter!
-             ({} {} { T : trading_pair :: Config + core :: fmt :: Debug } () () () ()
? ^^^^^^^^^^^^^

+ benchmarks_iter! { {} {} { T : trading_pair :: Config + core :: fmt :: Debug } () () () ()
? ^^^^^^^^^^^^^^^^^^^

              #[configs((x, y) = [(1, 2), (3, 4)])] delete_orderbook { let aboba = 1234 ; }
              :
              {
                  OrderBookPallet::<T>::delete_orderbook(RawOrigin::Root.into(),
                          order_book_id).unwrap();
              }
              verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
              {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
              verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
-             {} verify {} verify {} verify {} verify {} verify {} verify {} verify
?                                                                        ----------

+             {} verify {} verify {} verify {} verify {} verify {} verify
              {
                  assert_eq! (OrderBookPallet :: < T > :: order_books(order_book_id), None)
                  ;
-             }) ;
?              ^^^

+             } }
?              ^^

====================================================================================================
Diff from
'''
benchmarks_iter! { {} {} { T : trading_pair :: Config + core :: fmt :: Debug } () () () ()
            #[configs((x, y) = [(1, 2), (3, 4)])] delete_orderbook { let aboba = 1234 ; }
            :
            {
                OrderBookPallet::<T>::delete_orderbook(RawOrigin::Root.into(),
                        order_book_id).unwrap();
            }
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {
                assert_eq! (OrderBookPallet :: < T > :: order_books(order_book_id), None)
                ;
            } }
'''
to
'''
$crate :: benchmarks_iter!
            ({} {} { T : trading_pair :: Config + core :: fmt :: Debug } () () () ()
            #[configs((x, y) = [(1, 2), (3, 4)])] delete_orderbook { let aboba = 1234 ; }
            :
            {
                OrderBookPallet::<T>::delete_orderbook(RawOrigin::Root.into(),
                        order_book_id).unwrap();
            }
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify
            {
                assert_eq! (OrderBookPallet :: < T > :: order_books(order_book_id), None)
                ;
            }) ;
'''
::::::::::::::::::::::::::::::::::::::::::::::::::
- $crate :: benchmarks_iter!
-             ({} {} { T : trading_pair :: Config + core :: fmt :: Debug } () () () ()
? ^^^^^^^^^^^^^

+ benchmarks_iter! { {} {} { T : trading_pair :: Config + core :: fmt :: Debug } () () () ()
? ^^^^^^^^^^^^^^^^^^^

              #[configs((x, y) = [(1, 2), (3, 4)])] delete_orderbook { let aboba = 1234 ; }
              :
              {
                  OrderBookPallet::<T>::delete_orderbook(RawOrigin::Root.into(),
                          order_book_id).unwrap();
              }
              verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
              {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
              verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
-             {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
?                                                                                  ---

+             {} verify {} verify {} verify {} verify {} verify {} verify {} verify
-             verify
              {
                  assert_eq! (OrderBookPallet :: < T > :: order_books(order_book_id), None)
                  ;
-             }) ;
?              ^^^

+             } }
?              ^^

====================================================================================================
Diff from
'''
benchmarks_iter! { {} {} { T : trading_pair :: Config + core :: fmt :: Debug } () () () ()
            #[configs((x, y) = [(1, 2), (3, 4)])] delete_orderbook { let aboba = 1234 ; }
            :
            {
                OrderBookPallet::<T>::delete_orderbook(RawOrigin::Root.into(),
                        order_book_id).unwrap();
            }
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify
            {
                assert_eq! (OrderBookPallet :: < T > :: order_books(order_book_id), None)
                ;
            } }
'''
to
'''
$crate :: benchmarks_iter!
            ({} {} { T : trading_pair :: Config + core :: fmt :: Debug } () () () ()
            #[configs((x, y) = [(1, 2), (3, 4)])] delete_orderbook { let aboba = 1234 ; }
            :
            {
                OrderBookPallet::<T>::delete_orderbook(RawOrigin::Root.into(),
                        order_book_id).unwrap();
            }
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify
            {
                assert_eq! (OrderBookPallet :: < T > :: order_books(order_book_id), None)
                ;
            }) ;
'''
::::::::::::::::::::::::::::::::::::::::::::::::::
- $crate :: benchmarks_iter!
-             ({} {} { T : trading_pair :: Config + core :: fmt :: Debug } () () () ()
? ^^^^^^^^^^^^^

+ benchmarks_iter! { {} {} { T : trading_pair :: Config + core :: fmt :: Debug } () () () ()
? ^^^^^^^^^^^^^^^^^^^

              #[configs((x, y) = [(1, 2), (3, 4)])] delete_orderbook { let aboba = 1234 ; }
              :
              {
                  OrderBookPallet::<T>::delete_orderbook(RawOrigin::Root.into(),
                          order_book_id).unwrap();
              }
              verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
              {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
              verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
              {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
-             verify {} verify
?                   ----------

+             verify
              {
                  assert_eq! (OrderBookPallet :: < T > :: order_books(order_book_id), None)
                  ;
-             }) ;
?              ^^^

+             } }
?              ^^

====================================================================================================
Diff from
'''
benchmarks_iter! { {} {} { T : trading_pair :: Config + core :: fmt :: Debug } () () () ()
            #[configs((x, y) = [(1, 2), (3, 4)])] delete_orderbook { let aboba = 1234 ; }
            :
            {
                OrderBookPallet::<T>::delete_orderbook(RawOrigin::Root.into(),
                        order_book_id).unwrap();
            }
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify
            {
                assert_eq! (OrderBookPallet :: < T > :: order_books(order_book_id), None)
                ;
            } }
'''
to
'''
$crate :: benchmarks_iter!
            ({} {} { T : trading_pair :: Config + core :: fmt :: Debug } () () () ()
            #[configs((x, y) = [(1, 2), (3, 4)])] delete_orderbook { let aboba = 1234 ; }
            :
            {
                OrderBookPallet::<T>::delete_orderbook(RawOrigin::Root.into(),
                        order_book_id).unwrap();
            }
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify
            {
                assert_eq! (OrderBookPallet :: < T > :: order_books(order_book_id), None)
                ;
            }) ;
'''
::::::::::::::::::::::::::::::::::::::::::::::::::
- $crate :: benchmarks_iter!
-             ({} {} { T : trading_pair :: Config + core :: fmt :: Debug } () () () ()
? ^^^^^^^^^^^^^

+ benchmarks_iter! { {} {} { T : trading_pair :: Config + core :: fmt :: Debug } () () () ()
? ^^^^^^^^^^^^^^^^^^^

              #[configs((x, y) = [(1, 2), (3, 4)])] delete_orderbook { let aboba = 1234 ; }
              :
              {
                  OrderBookPallet::<T>::delete_orderbook(RawOrigin::Root.into(),
                          order_book_id).unwrap();
              }
              verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
              {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
              verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
              {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
-             verify {} verify {} verify
?                             ----------

+             verify {} verify
              {
                  assert_eq! (OrderBookPallet :: < T > :: order_books(order_book_id), None)
                  ;
-             }) ;
?              ^^^

+             } }
?              ^^

====================================================================================================
Diff from
'''
benchmarks_iter! { {} {} { T : trading_pair :: Config + core :: fmt :: Debug } () () () ()
            #[configs((x, y) = [(1, 2), (3, 4)])] delete_orderbook { let aboba = 1234 ; }
            :
            {
                OrderBookPallet::<T>::delete_orderbook(RawOrigin::Root.into(),
                        order_book_id).unwrap();
            }
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify
            {
                assert_eq! (OrderBookPallet :: < T > :: order_books(order_book_id), None)
                ;
            } }
'''
to
'''
$crate :: benchmarks_iter!
            ({} {} { T : trading_pair :: Config + core :: fmt :: Debug } () () () ()
            #[configs((x, y) = [(1, 2), (3, 4)])] delete_orderbook { let aboba = 1234 ; }
            :
            {
                OrderBookPallet::<T>::delete_orderbook(RawOrigin::Root.into(),
                        order_book_id).unwrap();
            }
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify
            {
                assert_eq! (OrderBookPallet :: < T > :: order_books(order_book_id), None)
                ;
            }) ;
'''
::::::::::::::::::::::::::::::::::::::::::::::::::
- $crate :: benchmarks_iter!
-             ({} {} { T : trading_pair :: Config + core :: fmt :: Debug } () () () ()
? ^^^^^^^^^^^^^

+ benchmarks_iter! { {} {} { T : trading_pair :: Config + core :: fmt :: Debug } () () () ()
? ^^^^^^^^^^^^^^^^^^^

              #[configs((x, y) = [(1, 2), (3, 4)])] delete_orderbook { let aboba = 1234 ; }
              :
              {
                  OrderBookPallet::<T>::delete_orderbook(RawOrigin::Root.into(),
                          order_book_id).unwrap();
              }
              verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
              {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
              verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
              {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
-             verify {} verify {} verify {} verify
?                                       ----------

+             verify {} verify {} verify
              {
                  assert_eq! (OrderBookPallet :: < T > :: order_books(order_book_id), None)
                  ;
-             }) ;
?              ^^^

+             } }
?              ^^

====================================================================================================
Diff from
'''
benchmarks_iter! { {} {} { T : trading_pair :: Config + core :: fmt :: Debug } () () () ()
            #[configs((x, y) = [(1, 2), (3, 4)])] delete_orderbook { let aboba = 1234 ; }
            :
            {
                OrderBookPallet::<T>::delete_orderbook(RawOrigin::Root.into(),
                        order_book_id).unwrap();
            }
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify
            {
                assert_eq! (OrderBookPallet :: < T > :: order_books(order_book_id), None)
                ;
            } }
'''
to
'''
$crate :: benchmarks_iter!
            ({} {} { T : trading_pair :: Config + core :: fmt :: Debug } () () () ()
            #[configs((x, y) = [(1, 2), (3, 4)])] delete_orderbook { let aboba = 1234 ; }
            :
            {
                OrderBookPallet::<T>::delete_orderbook(RawOrigin::Root.into(),
                        order_book_id).unwrap();
            }
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify
            {
                assert_eq! (OrderBookPallet :: < T > :: order_books(order_book_id), None)
                ;
            }) ;
'''
::::::::::::::::::::::::::::::::::::::::::::::::::
- $crate :: benchmarks_iter!
-             ({} {} { T : trading_pair :: Config + core :: fmt :: Debug } () () () ()
? ^^^^^^^^^^^^^

+ benchmarks_iter! { {} {} { T : trading_pair :: Config + core :: fmt :: Debug } () () () ()
? ^^^^^^^^^^^^^^^^^^^

              #[configs((x, y) = [(1, 2), (3, 4)])] delete_orderbook { let aboba = 1234 ; }
              :
              {
                  OrderBookPallet::<T>::delete_orderbook(RawOrigin::Root.into(),
                          order_book_id).unwrap();
              }
              verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
              {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
              verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
              {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
-             verify {} verify {} verify {} verify {} verify
?                                                 ----------

+             verify {} verify {} verify {} verify
              {
                  assert_eq! (OrderBookPallet :: < T > :: order_books(order_book_id), None)
                  ;
-             }) ;
?              ^^^

+             } }
?              ^^

====================================================================================================
Diff from
'''
benchmarks_iter! { {} {} { T : trading_pair :: Config + core :: fmt :: Debug } () () () ()
            #[configs((x, y) = [(1, 2), (3, 4)])] delete_orderbook { let aboba = 1234 ; }
            :
            {
                OrderBookPallet::<T>::delete_orderbook(RawOrigin::Root.into(),
                        order_book_id).unwrap();
            }
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify
            {
                assert_eq! (OrderBookPallet :: < T > :: order_books(order_book_id), None)
                ;
            } }
'''
to
'''
$crate :: benchmarks_iter!
            ({} {} { T : trading_pair :: Config + core :: fmt :: Debug } () () () ()
            #[configs((x, y) = [(1, 2), (3, 4)])] delete_orderbook { let aboba = 1234 ; }
            :
            {
                OrderBookPallet::<T>::delete_orderbook(RawOrigin::Root.into(),
                        order_book_id).unwrap();
            }
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify
            {
                assert_eq! (OrderBookPallet :: < T > :: order_books(order_book_id), None)
                ;
            }) ;
'''
::::::::::::::::::::::::::::::::::::::::::::::::::
- $crate :: benchmarks_iter!
-             ({} {} { T : trading_pair :: Config + core :: fmt :: Debug } () () () ()
? ^^^^^^^^^^^^^

+ benchmarks_iter! { {} {} { T : trading_pair :: Config + core :: fmt :: Debug } () () () ()
? ^^^^^^^^^^^^^^^^^^^

              #[configs((x, y) = [(1, 2), (3, 4)])] delete_orderbook { let aboba = 1234 ; }
              :
              {
                  OrderBookPallet::<T>::delete_orderbook(RawOrigin::Root.into(),
                          order_book_id).unwrap();
              }
              verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
              {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
              verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
              {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
-             verify {} verify {} verify {} verify {} verify {} verify
?                                                           ----------

+             verify {} verify {} verify {} verify {} verify
              {
                  assert_eq! (OrderBookPallet :: < T > :: order_books(order_book_id), None)
                  ;
-             }) ;
?              ^^^

+             } }
?              ^^

====================================================================================================
Diff from
'''
benchmarks_iter! { {} {} { T : trading_pair :: Config + core :: fmt :: Debug } () () () ()
            #[configs((x, y) = [(1, 2), (3, 4)])] delete_orderbook { let aboba = 1234 ; }
            :
            {
                OrderBookPallet::<T>::delete_orderbook(RawOrigin::Root.into(),
                        order_book_id).unwrap();
            }
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify
            {
                assert_eq! (OrderBookPallet :: < T > :: order_books(order_book_id), None)
                ;
            } }
'''
to
'''
$crate :: benchmarks_iter!
            ({} {} { T : trading_pair :: Config + core :: fmt :: Debug } () () () ()
            #[configs((x, y) = [(1, 2), (3, 4)])] delete_orderbook { let aboba = 1234 ; }
            :
            {
                OrderBookPallet::<T>::delete_orderbook(RawOrigin::Root.into(),
                        order_book_id).unwrap();
            }
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify
            {
                assert_eq! (OrderBookPallet :: < T > :: order_books(order_book_id), None)
                ;
            }) ;
'''
::::::::::::::::::::::::::::::::::::::::::::::::::
- $crate :: benchmarks_iter!
-             ({} {} { T : trading_pair :: Config + core :: fmt :: Debug } () () () ()
? ^^^^^^^^^^^^^

+ benchmarks_iter! { {} {} { T : trading_pair :: Config + core :: fmt :: Debug } () () () ()
? ^^^^^^^^^^^^^^^^^^^

              #[configs((x, y) = [(1, 2), (3, 4)])] delete_orderbook { let aboba = 1234 ; }
              :
              {
                  OrderBookPallet::<T>::delete_orderbook(RawOrigin::Root.into(),
                          order_book_id).unwrap();
              }
              verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
              {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
              verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
              {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
-             verify {} verify {} verify {} verify {} verify {} verify {} verify
?                                                                     ----------

+             verify {} verify {} verify {} verify {} verify {} verify
              {
                  assert_eq! (OrderBookPallet :: < T > :: order_books(order_book_id), None)
                  ;
-             }) ;
?              ^^^

+             } }
?              ^^

====================================================================================================
Diff from
'''
benchmarks_iter! { {} {} { T : trading_pair :: Config + core :: fmt :: Debug } () () () ()
            #[configs((x, y) = [(1, 2), (3, 4)])] delete_orderbook { let aboba = 1234 ; }
            :
            {
                OrderBookPallet::<T>::delete_orderbook(RawOrigin::Root.into(),
                        order_book_id).unwrap();
            }
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify
            {
                assert_eq! (OrderBookPallet :: < T > :: order_books(order_book_id), None)
                ;
            } }
'''
to
'''
$crate :: benchmarks_iter!
            ({} {} { T : trading_pair :: Config + core :: fmt :: Debug } () () () ()
            #[configs((x, y) = [(1, 2), (3, 4)])] delete_orderbook { let aboba = 1234 ; }
            :
            {
                OrderBookPallet::<T>::delete_orderbook(RawOrigin::Root.into(),
                        order_book_id).unwrap();
            }
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {
                assert_eq! (OrderBookPallet :: < T > :: order_books(order_book_id), None)
                ;
            }) ;
'''
::::::::::::::::::::::::::::::::::::::::::::::::::
- $crate :: benchmarks_iter!
-             ({} {} { T : trading_pair :: Config + core :: fmt :: Debug } () () () ()
? ^^^^^^^^^^^^^

+ benchmarks_iter! { {} {} { T : trading_pair :: Config + core :: fmt :: Debug } () () () ()
? ^^^^^^^^^^^^^^^^^^^

              #[configs((x, y) = [(1, 2), (3, 4)])] delete_orderbook { let aboba = 1234 ; }
              :
              {
                  OrderBookPallet::<T>::delete_orderbook(RawOrigin::Root.into(),
                          order_book_id).unwrap();
              }
              verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
              {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
              verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
              {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
-             verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
?                                                                               ----------

+             verify {} verify {} verify {} verify {} verify {} verify {} verify
              {
                  assert_eq! (OrderBookPallet :: < T > :: order_books(order_book_id), None)
                  ;
-             }) ;
?              ^^^

+             } }
?              ^^

====================================================================================================
Diff from
'''
benchmarks_iter! { {} {} { T : trading_pair :: Config + core :: fmt :: Debug } () () () ()
            #[configs((x, y) = [(1, 2), (3, 4)])] delete_orderbook { let aboba = 1234 ; }
            :
            {
                OrderBookPallet::<T>::delete_orderbook(RawOrigin::Root.into(),
                        order_book_id).unwrap();
            }
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {
                assert_eq! (OrderBookPallet :: < T > :: order_books(order_book_id), None)
                ;
            } }
'''
to
'''
$crate :: benchmarks_iter!
            ({} {} { T : trading_pair :: Config + core :: fmt :: Debug } () () () ()
            #[configs((x, y) = [(1, 2), (3, 4)])] delete_orderbook { let aboba = 1234 ; }
            :
            {
                OrderBookPallet::<T>::delete_orderbook(RawOrigin::Root.into(),
                        order_book_id).unwrap();
            }
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify
            {
                assert_eq! (OrderBookPallet :: < T > :: order_books(order_book_id), None)
                ;
            }) ;
'''
::::::::::::::::::::::::::::::::::::::::::::::::::
- $crate :: benchmarks_iter!
-             ({} {} { T : trading_pair :: Config + core :: fmt :: Debug } () () () ()
? ^^^^^^^^^^^^^

+ benchmarks_iter! { {} {} { T : trading_pair :: Config + core :: fmt :: Debug } () () () ()
? ^^^^^^^^^^^^^^^^^^^

              #[configs((x, y) = [(1, 2), (3, 4)])] delete_orderbook { let aboba = 1234 ; }
              :
              {
                  OrderBookPallet::<T>::delete_orderbook(RawOrigin::Root.into(),
                          order_book_id).unwrap();
              }
              verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
              {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
              verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
              {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
              verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
-             {} verify
              {
                  assert_eq! (OrderBookPallet :: < T > :: order_books(order_book_id), None)
                  ;
-             }) ;
?              ^^^

+             } }
?              ^^

====================================================================================================
Diff from
'''
benchmarks_iter! { {} {} { T : trading_pair :: Config + core :: fmt :: Debug } () () () ()
            #[configs((x, y) = [(1, 2), (3, 4)])] delete_orderbook { let aboba = 1234 ; }
            :
            {
                OrderBookPallet::<T>::delete_orderbook(RawOrigin::Root.into(),
                        order_book_id).unwrap();
            }
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify
            {
                assert_eq! (OrderBookPallet :: < T > :: order_books(order_book_id), None)
                ;
            } }
'''
to
'''
$crate :: benchmarks_iter!
            ({} {} { T : trading_pair :: Config + core :: fmt :: Debug } () () () ()
            #[configs((x, y) = [(1, 2), (3, 4)])] delete_orderbook { let aboba = 1234 ; }
            :
            {
                OrderBookPallet::<T>::delete_orderbook(RawOrigin::Root.into(),
                        order_book_id).unwrap();
            }
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify
            {
                assert_eq! (OrderBookPallet :: < T > :: order_books(order_book_id), None)
                ;
            }) ;
'''
::::::::::::::::::::::::::::::::::::::::::::::::::
- $crate :: benchmarks_iter!
-             ({} {} { T : trading_pair :: Config + core :: fmt :: Debug } () () () ()
? ^^^^^^^^^^^^^

+ benchmarks_iter! { {} {} { T : trading_pair :: Config + core :: fmt :: Debug } () () () ()
? ^^^^^^^^^^^^^^^^^^^

              #[configs((x, y) = [(1, 2), (3, 4)])] delete_orderbook { let aboba = 1234 ; }
              :
              {
                  OrderBookPallet::<T>::delete_orderbook(RawOrigin::Root.into(),
                          order_book_id).unwrap();
              }
              verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
              {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
              verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
              {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
              verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
-             {} verify {} verify
?                      ----------

+             {} verify
              {
                  assert_eq! (OrderBookPallet :: < T > :: order_books(order_book_id), None)
                  ;
-             }) ;
?              ^^^

+             } }
?              ^^

====================================================================================================
Diff from
'''
benchmarks_iter! { {} {} { T : trading_pair :: Config + core :: fmt :: Debug } () () () ()
            #[configs((x, y) = [(1, 2), (3, 4)])] delete_orderbook { let aboba = 1234 ; }
            :
            {
                OrderBookPallet::<T>::delete_orderbook(RawOrigin::Root.into(),
                        order_book_id).unwrap();
            }
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify
            {
                assert_eq! (OrderBookPallet :: < T > :: order_books(order_book_id), None)
                ;
            } }
'''
to
'''
$crate :: benchmarks_iter!
            ({} {} { T : trading_pair :: Config + core :: fmt :: Debug } () () () ()
            #[configs((x, y) = [(1, 2), (3, 4)])] delete_orderbook { let aboba = 1234 ; }
            :
            {
                OrderBookPallet::<T>::delete_orderbook(RawOrigin::Root.into(),
                        order_book_id).unwrap();
            }
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify
            {
                assert_eq! (OrderBookPallet :: < T > :: order_books(order_book_id), None)
                ;
            }) ;
'''
::::::::::::::::::::::::::::::::::::::::::::::::::
- $crate :: benchmarks_iter!
-             ({} {} { T : trading_pair :: Config + core :: fmt :: Debug } () () () ()
? ^^^^^^^^^^^^^

+ benchmarks_iter! { {} {} { T : trading_pair :: Config + core :: fmt :: Debug } () () () ()
? ^^^^^^^^^^^^^^^^^^^

              #[configs((x, y) = [(1, 2), (3, 4)])] delete_orderbook { let aboba = 1234 ; }
              :
              {
                  OrderBookPallet::<T>::delete_orderbook(RawOrigin::Root.into(),
                          order_book_id).unwrap();
              }
              verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
              {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
              verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
              {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
              verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
-             {} verify {} verify {} verify
?                                ----------

+             {} verify {} verify
              {
                  assert_eq! (OrderBookPallet :: < T > :: order_books(order_book_id), None)
                  ;
-             }) ;
?              ^^^

+             } }
?              ^^

====================================================================================================
Diff from
'''
benchmarks_iter! { {} {} { T : trading_pair :: Config + core :: fmt :: Debug } () () () ()
            #[configs((x, y) = [(1, 2), (3, 4)])] delete_orderbook { let aboba = 1234 ; }
            :
            {
                OrderBookPallet::<T>::delete_orderbook(RawOrigin::Root.into(),
                        order_book_id).unwrap();
            }
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify
            {
                assert_eq! (OrderBookPallet :: < T > :: order_books(order_book_id), None)
                ;
            } }
'''
to
'''
$crate :: benchmarks_iter!
            ({} {} { T : trading_pair :: Config + core :: fmt :: Debug } () () () ()
            #[configs((x, y) = [(1, 2), (3, 4)])] delete_orderbook { let aboba = 1234 ; }
            :
            {
                OrderBookPallet::<T>::delete_orderbook(RawOrigin::Root.into(),
                        order_book_id).unwrap();
            }
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify
            {
                assert_eq! (OrderBookPallet :: < T > :: order_books(order_book_id), None)
                ;
            }) ;
'''
::::::::::::::::::::::::::::::::::::::::::::::::::
- $crate :: benchmarks_iter!
-             ({} {} { T : trading_pair :: Config + core :: fmt :: Debug } () () () ()
? ^^^^^^^^^^^^^

+ benchmarks_iter! { {} {} { T : trading_pair :: Config + core :: fmt :: Debug } () () () ()
? ^^^^^^^^^^^^^^^^^^^

              #[configs((x, y) = [(1, 2), (3, 4)])] delete_orderbook { let aboba = 1234 ; }
              :
              {
                  OrderBookPallet::<T>::delete_orderbook(RawOrigin::Root.into(),
                          order_book_id).unwrap();
              }
              verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
              {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
              verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
              {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
              verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
-             {} verify {} verify {} verify {} verify
?                                          ----------

+             {} verify {} verify {} verify
              {
                  assert_eq! (OrderBookPallet :: < T > :: order_books(order_book_id), None)
                  ;
-             }) ;
?              ^^^

+             } }
?              ^^

====================================================================================================
Diff from
'''
benchmarks_iter! { {} {} { T : trading_pair :: Config + core :: fmt :: Debug } () () () ()
            #[configs((x, y) = [(1, 2), (3, 4)])] delete_orderbook { let aboba = 1234 ; }
            :
            {
                OrderBookPallet::<T>::delete_orderbook(RawOrigin::Root.into(),
                        order_book_id).unwrap();
            }
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify
            {
                assert_eq! (OrderBookPallet :: < T > :: order_books(order_book_id), None)
                ;
            } }
'''
to
'''
$crate :: benchmarks_iter!
            ({} {} { T : trading_pair :: Config + core :: fmt :: Debug } () () () ()
            #[configs((x, y) = [(1, 2), (3, 4)])] delete_orderbook { let aboba = 1234 ; }
            :
            {
                OrderBookPallet::<T>::delete_orderbook(RawOrigin::Root.into(),
                        order_book_id).unwrap();
            }
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify
            {
                assert_eq! (OrderBookPallet :: < T > :: order_books(order_book_id), None)
                ;
            }) ;
'''
::::::::::::::::::::::::::::::::::::::::::::::::::
- $crate :: benchmarks_iter!
-             ({} {} { T : trading_pair :: Config + core :: fmt :: Debug } () () () ()
? ^^^^^^^^^^^^^

+ benchmarks_iter! { {} {} { T : trading_pair :: Config + core :: fmt :: Debug } () () () ()
? ^^^^^^^^^^^^^^^^^^^

              #[configs((x, y) = [(1, 2), (3, 4)])] delete_orderbook { let aboba = 1234 ; }
              :
              {
                  OrderBookPallet::<T>::delete_orderbook(RawOrigin::Root.into(),
                          order_book_id).unwrap();
              }
              verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
              {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
              verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
              {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
              verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
-             {} verify {} verify {} verify {} verify {} verify
?                                                    ----------

+             {} verify {} verify {} verify {} verify
              {
                  assert_eq! (OrderBookPallet :: < T > :: order_books(order_book_id), None)
                  ;
-             }) ;
?              ^^^

+             } }
?              ^^

====================================================================================================
Diff from
'''
benchmarks_iter! { {} {} { T : trading_pair :: Config + core :: fmt :: Debug } () () () ()
            #[configs((x, y) = [(1, 2), (3, 4)])] delete_orderbook { let aboba = 1234 ; }
            :
            {
                OrderBookPallet::<T>::delete_orderbook(RawOrigin::Root.into(),
                        order_book_id).unwrap();
            }
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify
            {
                assert_eq! (OrderBookPallet :: < T > :: order_books(order_book_id), None)
                ;
            } }
'''
to
'''
$crate :: benchmarks_iter!
            ({} {} { T : trading_pair :: Config + core :: fmt :: Debug } () () () ()
            #[configs((x, y) = [(1, 2), (3, 4)])] delete_orderbook { let aboba = 1234 ; }
            :
            {
                OrderBookPallet::<T>::delete_orderbook(RawOrigin::Root.into(),
                        order_book_id).unwrap();
            }
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify
            {
                assert_eq! (OrderBookPallet :: < T > :: order_books(order_book_id), None)
                ;
            }) ;
'''
::::::::::::::::::::::::::::::::::::::::::::::::::
- $crate :: benchmarks_iter!
-             ({} {} { T : trading_pair :: Config + core :: fmt :: Debug } () () () ()
? ^^^^^^^^^^^^^

+ benchmarks_iter! { {} {} { T : trading_pair :: Config + core :: fmt :: Debug } () () () ()
? ^^^^^^^^^^^^^^^^^^^

              #[configs((x, y) = [(1, 2), (3, 4)])] delete_orderbook { let aboba = 1234 ; }
              :
              {
                  OrderBookPallet::<T>::delete_orderbook(RawOrigin::Root.into(),
                          order_book_id).unwrap();
              }
              verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
              {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
              verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
              {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
              verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
-             {} verify {} verify {} verify {} verify {} verify {} verify
?                                                              ----------

+             {} verify {} verify {} verify {} verify {} verify
              {
                  assert_eq! (OrderBookPallet :: < T > :: order_books(order_book_id), None)
                  ;
-             }) ;
?              ^^^

+             } }
?              ^^

====================================================================================================
Diff from
'''
benchmarks_iter! { {} {} { T : trading_pair :: Config + core :: fmt :: Debug } () () () ()
            #[configs((x, y) = [(1, 2), (3, 4)])] delete_orderbook { let aboba = 1234 ; }
            :
            {
                OrderBookPallet::<T>::delete_orderbook(RawOrigin::Root.into(),
                        order_book_id).unwrap();
            }
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify
            {
                assert_eq! (OrderBookPallet :: < T > :: order_books(order_book_id), None)
                ;
            } }
'''
to
'''
$crate :: benchmarks_iter!
            ({} {} { T : trading_pair :: Config + core :: fmt :: Debug } () () () ()
            #[configs((x, y) = [(1, 2), (3, 4)])] delete_orderbook { let aboba = 1234 ; }
            :
            {
                OrderBookPallet::<T>::delete_orderbook(RawOrigin::Root.into(),
                        order_book_id).unwrap();
            }
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {
                assert_eq! (OrderBookPallet :: < T > :: order_books(order_book_id), None)
                ;
            }) ;
'''
::::::::::::::::::::::::::::::::::::::::::::::::::
- $crate :: benchmarks_iter!
-             ({} {} { T : trading_pair :: Config + core :: fmt :: Debug } () () () ()
? ^^^^^^^^^^^^^

+ benchmarks_iter! { {} {} { T : trading_pair :: Config + core :: fmt :: Debug } () () () ()
? ^^^^^^^^^^^^^^^^^^^

              #[configs((x, y) = [(1, 2), (3, 4)])] delete_orderbook { let aboba = 1234 ; }
              :
              {
                  OrderBookPallet::<T>::delete_orderbook(RawOrigin::Root.into(),
                          order_book_id).unwrap();
              }
              verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
              {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
              verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
              {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
              verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
-             {} verify {} verify {} verify {} verify {} verify {} verify {} verify
?                                                                        ----------

+             {} verify {} verify {} verify {} verify {} verify {} verify
              {
                  assert_eq! (OrderBookPallet :: < T > :: order_books(order_book_id), None)
                  ;
-             }) ;
?              ^^^

+             } }
?              ^^

====================================================================================================
Diff from
'''
benchmarks_iter! { {} {} { T : trading_pair :: Config + core :: fmt :: Debug } () () () ()
            #[configs((x, y) = [(1, 2), (3, 4)])] delete_orderbook { let aboba = 1234 ; }
            :
            {
                OrderBookPallet::<T>::delete_orderbook(RawOrigin::Root.into(),
                        order_book_id).unwrap();
            }
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {
                assert_eq! (OrderBookPallet :: < T > :: order_books(order_book_id), None)
                ;
            } }
'''
to
'''
$crate :: benchmarks_iter!
            ({} {} { T : trading_pair :: Config + core :: fmt :: Debug } () () () ()
            #[configs((x, y) = [(1, 2), (3, 4)])] delete_orderbook { let aboba = 1234 ; }
            :
            {
                OrderBookPallet::<T>::delete_orderbook(RawOrigin::Root.into(),
                        order_book_id).unwrap();
            }
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify
            {
                assert_eq! (OrderBookPallet :: < T > :: order_books(order_book_id), None)
                ;
            }) ;
'''
::::::::::::::::::::::::::::::::::::::::::::::::::
- $crate :: benchmarks_iter!
-             ({} {} { T : trading_pair :: Config + core :: fmt :: Debug } () () () ()
? ^^^^^^^^^^^^^

+ benchmarks_iter! { {} {} { T : trading_pair :: Config + core :: fmt :: Debug } () () () ()
? ^^^^^^^^^^^^^^^^^^^

              #[configs((x, y) = [(1, 2), (3, 4)])] delete_orderbook { let aboba = 1234 ; }
              :
              {
                  OrderBookPallet::<T>::delete_orderbook(RawOrigin::Root.into(),
                          order_book_id).unwrap();
              }
              verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
              {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
              verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
              {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
              verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
-             {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
?                                                                                  ---

+             {} verify {} verify {} verify {} verify {} verify {} verify {} verify
-             verify
              {
                  assert_eq! (OrderBookPallet :: < T > :: order_books(order_book_id), None)
                  ;
-             }) ;
?              ^^^

+             } }
?              ^^

====================================================================================================
Diff from
'''
benchmarks_iter! { {} {} { T : trading_pair :: Config + core :: fmt :: Debug } () () () ()
            #[configs((x, y) = [(1, 2), (3, 4)])] delete_orderbook { let aboba = 1234 ; }
            :
            {
                OrderBookPallet::<T>::delete_orderbook(RawOrigin::Root.into(),
                        order_book_id).unwrap();
            }
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify
            {
                assert_eq! (OrderBookPallet :: < T > :: order_books(order_book_id), None)
                ;
            } }
'''
to
'''
$crate :: benchmarks_iter!
            ({} {} { T : trading_pair :: Config + core :: fmt :: Debug } () () () ()
            #[configs((x, y) = [(1, 2), (3, 4)])] delete_orderbook { let aboba = 1234 ; }
            :
            {
                OrderBookPallet::<T>::delete_orderbook(RawOrigin::Root.into(),
                        order_book_id).unwrap();
            }
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify
            {
                assert_eq! (OrderBookPallet :: < T > :: order_books(order_book_id), None)
                ;
            }) ;
'''
::::::::::::::::::::::::::::::::::::::::::::::::::
- $crate :: benchmarks_iter!
-             ({} {} { T : trading_pair :: Config + core :: fmt :: Debug } () () () ()
? ^^^^^^^^^^^^^

+ benchmarks_iter! { {} {} { T : trading_pair :: Config + core :: fmt :: Debug } () () () ()
? ^^^^^^^^^^^^^^^^^^^

              #[configs((x, y) = [(1, 2), (3, 4)])] delete_orderbook { let aboba = 1234 ; }
              :
              {
                  OrderBookPallet::<T>::delete_orderbook(RawOrigin::Root.into(),
                          order_book_id).unwrap();
              }
              verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
              {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
              verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
              {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
              verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
              {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
-             verify {} verify
?                   ----------

+             verify
              {
                  assert_eq! (OrderBookPallet :: < T > :: order_books(order_book_id), None)
                  ;
-             }) ;
?              ^^^

+             } }
?              ^^

====================================================================================================
Diff from
'''
benchmarks_iter! { {} {} { T : trading_pair :: Config + core :: fmt :: Debug } () () () ()
            #[configs((x, y) = [(1, 2), (3, 4)])] delete_orderbook { let aboba = 1234 ; }
            :
            {
                OrderBookPallet::<T>::delete_orderbook(RawOrigin::Root.into(),
                        order_book_id).unwrap();
            }
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify
            {
                assert_eq! (OrderBookPallet :: < T > :: order_books(order_book_id), None)
                ;
            } }
'''
to
'''
$crate :: benchmarks_iter!
            ({} {} { T : trading_pair :: Config + core :: fmt :: Debug } () () () ()
            #[configs((x, y) = [(1, 2), (3, 4)])] delete_orderbook { let aboba = 1234 ; }
            :
            {
                OrderBookPallet::<T>::delete_orderbook(RawOrigin::Root.into(),
                        order_book_id).unwrap();
            }
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify
            {
                assert_eq! (OrderBookPallet :: < T > :: order_books(order_book_id), None)
                ;
            }) ;
'''
::::::::::::::::::::::::::::::::::::::::::::::::::
- $crate :: benchmarks_iter!
-             ({} {} { T : trading_pair :: Config + core :: fmt :: Debug } () () () ()
? ^^^^^^^^^^^^^

+ benchmarks_iter! { {} {} { T : trading_pair :: Config + core :: fmt :: Debug } () () () ()
? ^^^^^^^^^^^^^^^^^^^

              #[configs((x, y) = [(1, 2), (3, 4)])] delete_orderbook { let aboba = 1234 ; }
              :
              {
                  OrderBookPallet::<T>::delete_orderbook(RawOrigin::Root.into(),
                          order_book_id).unwrap();
              }
              verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
              {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
              verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
              {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
              verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
              {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
-             verify {} verify {} verify
?                             ----------

+             verify {} verify
              {
                  assert_eq! (OrderBookPallet :: < T > :: order_books(order_book_id), None)
                  ;
-             }) ;
?              ^^^

+             } }
?              ^^

====================================================================================================
Diff from
'''
benchmarks_iter! { {} {} { T : trading_pair :: Config + core :: fmt :: Debug } () () () ()
            #[configs((x, y) = [(1, 2), (3, 4)])] delete_orderbook { let aboba = 1234 ; }
            :
            {
                OrderBookPallet::<T>::delete_orderbook(RawOrigin::Root.into(),
                        order_book_id).unwrap();
            }
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify
            {
                assert_eq! (OrderBookPallet :: < T > :: order_books(order_book_id), None)
                ;
            } }
'''
to
'''
$crate :: benchmarks_iter!
            ({} {} { T : trading_pair :: Config + core :: fmt :: Debug } () () () ()
            #[configs((x, y) = [(1, 2), (3, 4)])] delete_orderbook { let aboba = 1234 ; }
            :
            {
                OrderBookPallet::<T>::delete_orderbook(RawOrigin::Root.into(),
                        order_book_id).unwrap();
            }
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify
            {
                assert_eq! (OrderBookPallet :: < T > :: order_books(order_book_id), None)
                ;
            }) ;
'''
::::::::::::::::::::::::::::::::::::::::::::::::::
- $crate :: benchmarks_iter!
-             ({} {} { T : trading_pair :: Config + core :: fmt :: Debug } () () () ()
? ^^^^^^^^^^^^^

+ benchmarks_iter! { {} {} { T : trading_pair :: Config + core :: fmt :: Debug } () () () ()
? ^^^^^^^^^^^^^^^^^^^

              #[configs((x, y) = [(1, 2), (3, 4)])] delete_orderbook { let aboba = 1234 ; }
              :
              {
                  OrderBookPallet::<T>::delete_orderbook(RawOrigin::Root.into(),
                          order_book_id).unwrap();
              }
              verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
              {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
              verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
              {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
              verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
              {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
-             verify {} verify {} verify {} verify
?                                       ----------

+             verify {} verify {} verify
              {
                  assert_eq! (OrderBookPallet :: < T > :: order_books(order_book_id), None)
                  ;
-             }) ;
?              ^^^

+             } }
?              ^^

====================================================================================================
Diff from
'''
benchmarks_iter! { {} {} { T : trading_pair :: Config + core :: fmt :: Debug } () () () ()
            #[configs((x, y) = [(1, 2), (3, 4)])] delete_orderbook { let aboba = 1234 ; }
            :
            {
                OrderBookPallet::<T>::delete_orderbook(RawOrigin::Root.into(),
                        order_book_id).unwrap();
            }
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify
            {
                assert_eq! (OrderBookPallet :: < T > :: order_books(order_book_id), None)
                ;
            } }
'''
to
'''
$crate :: benchmarks_iter!
            ({} {} { T : trading_pair :: Config + core :: fmt :: Debug } () () () ()
            #[configs((x, y) = [(1, 2), (3, 4)])] delete_orderbook { let aboba = 1234 ; }
            :
            {
                OrderBookPallet::<T>::delete_orderbook(RawOrigin::Root.into(),
                        order_book_id).unwrap();
            }
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify
            {
                assert_eq! (OrderBookPallet :: < T > :: order_books(order_book_id), None)
                ;
            }) ;
'''
::::::::::::::::::::::::::::::::::::::::::::::::::
- $crate :: benchmarks_iter!
-             ({} {} { T : trading_pair :: Config + core :: fmt :: Debug } () () () ()
? ^^^^^^^^^^^^^

+ benchmarks_iter! { {} {} { T : trading_pair :: Config + core :: fmt :: Debug } () () () ()
? ^^^^^^^^^^^^^^^^^^^

              #[configs((x, y) = [(1, 2), (3, 4)])] delete_orderbook { let aboba = 1234 ; }
              :
              {
                  OrderBookPallet::<T>::delete_orderbook(RawOrigin::Root.into(),
                          order_book_id).unwrap();
              }
              verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
              {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
              verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
              {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
              verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
              {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
-             verify {} verify {} verify {} verify {} verify
?                                                 ----------

+             verify {} verify {} verify {} verify
              {
                  assert_eq! (OrderBookPallet :: < T > :: order_books(order_book_id), None)
                  ;
-             }) ;
?              ^^^

+             } }
?              ^^

====================================================================================================
Diff from
'''
benchmarks_iter! { {} {} { T : trading_pair :: Config + core :: fmt :: Debug } () () () ()
            #[configs((x, y) = [(1, 2), (3, 4)])] delete_orderbook { let aboba = 1234 ; }
            :
            {
                OrderBookPallet::<T>::delete_orderbook(RawOrigin::Root.into(),
                        order_book_id).unwrap();
            }
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify
            {
                assert_eq! (OrderBookPallet :: < T > :: order_books(order_book_id), None)
                ;
            } }
'''
to
'''
$crate :: benchmarks_iter!
            ({} {} { T : trading_pair :: Config + core :: fmt :: Debug } () () () ()
            #[configs((x, y) = [(1, 2), (3, 4)])] delete_orderbook { let aboba = 1234 ; }
            :
            {
                OrderBookPallet::<T>::delete_orderbook(RawOrigin::Root.into(),
                        order_book_id).unwrap();
            }
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify
            {
                assert_eq! (OrderBookPallet :: < T > :: order_books(order_book_id), None)
                ;
            }) ;
'''
::::::::::::::::::::::::::::::::::::::::::::::::::
- $crate :: benchmarks_iter!
-             ({} {} { T : trading_pair :: Config + core :: fmt :: Debug } () () () ()
? ^^^^^^^^^^^^^

+ benchmarks_iter! { {} {} { T : trading_pair :: Config + core :: fmt :: Debug } () () () ()
? ^^^^^^^^^^^^^^^^^^^

              #[configs((x, y) = [(1, 2), (3, 4)])] delete_orderbook { let aboba = 1234 ; }
              :
              {
                  OrderBookPallet::<T>::delete_orderbook(RawOrigin::Root.into(),
                          order_book_id).unwrap();
              }
              verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
              {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
              verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
              {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
              verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
              {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
-             verify {} verify {} verify {} verify {} verify {} verify
?                                                           ----------

+             verify {} verify {} verify {} verify {} verify
              {
                  assert_eq! (OrderBookPallet :: < T > :: order_books(order_book_id), None)
                  ;
-             }) ;
?              ^^^

+             } }
?              ^^

====================================================================================================
Diff from
'''
benchmarks_iter! { {} {} { T : trading_pair :: Config + core :: fmt :: Debug } () () () ()
            #[configs((x, y) = [(1, 2), (3, 4)])] delete_orderbook { let aboba = 1234 ; }
            :
            {
                OrderBookPallet::<T>::delete_orderbook(RawOrigin::Root.into(),
                        order_book_id).unwrap();
            }
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify
            {
                assert_eq! (OrderBookPallet :: < T > :: order_books(order_book_id), None)
                ;
            } }
'''
to
'''
$crate :: benchmarks_iter!
            ({} {} { T : trading_pair :: Config + core :: fmt :: Debug } () () () ()
            #[configs((x, y) = [(1, 2), (3, 4)])] delete_orderbook { let aboba = 1234 ; }
            :
            {
                OrderBookPallet::<T>::delete_orderbook(RawOrigin::Root.into(),
                        order_book_id).unwrap();
            }
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify
            {
                assert_eq! (OrderBookPallet :: < T > :: order_books(order_book_id), None)
                ;
            }) ;
'''
::::::::::::::::::::::::::::::::::::::::::::::::::
- $crate :: benchmarks_iter!
-             ({} {} { T : trading_pair :: Config + core :: fmt :: Debug } () () () ()
? ^^^^^^^^^^^^^

+ benchmarks_iter! { {} {} { T : trading_pair :: Config + core :: fmt :: Debug } () () () ()
? ^^^^^^^^^^^^^^^^^^^

              #[configs((x, y) = [(1, 2), (3, 4)])] delete_orderbook { let aboba = 1234 ; }
              :
              {
                  OrderBookPallet::<T>::delete_orderbook(RawOrigin::Root.into(),
                          order_book_id).unwrap();
              }
              verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
              {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
              verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
              {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
              verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
              {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
-             verify {} verify {} verify {} verify {} verify {} verify {} verify
?                                                                     ----------

+             verify {} verify {} verify {} verify {} verify {} verify
              {
                  assert_eq! (OrderBookPallet :: < T > :: order_books(order_book_id), None)
                  ;
-             }) ;
?              ^^^

+             } }
?              ^^

====================================================================================================
Diff from
'''
benchmarks_iter! { {} {} { T : trading_pair :: Config + core :: fmt :: Debug } () () () ()
            #[configs((x, y) = [(1, 2), (3, 4)])] delete_orderbook { let aboba = 1234 ; }
            :
            {
                OrderBookPallet::<T>::delete_orderbook(RawOrigin::Root.into(),
                        order_book_id).unwrap();
            }
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify
            {
                assert_eq! (OrderBookPallet :: < T > :: order_books(order_book_id), None)
                ;
            } }
'''
to
'''
$crate :: benchmarks_iter!
            ({} {} { T : trading_pair :: Config + core :: fmt :: Debug } () () () ()
            #[configs((x, y) = [(1, 2), (3, 4)])] delete_orderbook { let aboba = 1234 ; }
            :
            {
                OrderBookPallet::<T>::delete_orderbook(RawOrigin::Root.into(),
                        order_book_id).unwrap();
            }
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {
                assert_eq! (OrderBookPallet :: < T > :: order_books(order_book_id), None)
                ;
            }) ;
'''
::::::::::::::::::::::::::::::::::::::::::::::::::
- $crate :: benchmarks_iter!
-             ({} {} { T : trading_pair :: Config + core :: fmt :: Debug } () () () ()
? ^^^^^^^^^^^^^

+ benchmarks_iter! { {} {} { T : trading_pair :: Config + core :: fmt :: Debug } () () () ()
? ^^^^^^^^^^^^^^^^^^^

              #[configs((x, y) = [(1, 2), (3, 4)])] delete_orderbook { let aboba = 1234 ; }
              :
              {
                  OrderBookPallet::<T>::delete_orderbook(RawOrigin::Root.into(),
                          order_book_id).unwrap();
              }
              verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
              {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
              verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
              {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
              verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
              {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
-             verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
?                                                                               ----------

+             verify {} verify {} verify {} verify {} verify {} verify {} verify
              {
                  assert_eq! (OrderBookPallet :: < T > :: order_books(order_book_id), None)
                  ;
-             }) ;
?              ^^^

+             } }
?              ^^

====================================================================================================
Diff from
'''
benchmarks_iter! { {} {} { T : trading_pair :: Config + core :: fmt :: Debug } () () () ()
            #[configs((x, y) = [(1, 2), (3, 4)])] delete_orderbook { let aboba = 1234 ; }
            :
            {
                OrderBookPallet::<T>::delete_orderbook(RawOrigin::Root.into(),
                        order_book_id).unwrap();
            }
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {
                assert_eq! (OrderBookPallet :: < T > :: order_books(order_book_id), None)
                ;
            } }
'''
to
'''
$crate :: benchmarks_iter!
            ({} {} { T : trading_pair :: Config + core :: fmt :: Debug } () () () ()
            #[configs((x, y) = [(1, 2), (3, 4)])] delete_orderbook { let aboba = 1234 ; }
            :
            {
                OrderBookPallet::<T>::delete_orderbook(RawOrigin::Root.into(),
                        order_book_id).unwrap();
            }
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify
            {
                assert_eq! (OrderBookPallet :: < T > :: order_books(order_book_id), None)
                ;
            }) ;
'''
::::::::::::::::::::::::::::::::::::::::::::::::::
- $crate :: benchmarks_iter!
-             ({} {} { T : trading_pair :: Config + core :: fmt :: Debug } () () () ()
? ^^^^^^^^^^^^^

+ benchmarks_iter! { {} {} { T : trading_pair :: Config + core :: fmt :: Debug } () () () ()
? ^^^^^^^^^^^^^^^^^^^

              #[configs((x, y) = [(1, 2), (3, 4)])] delete_orderbook { let aboba = 1234 ; }
              :
              {
                  OrderBookPallet::<T>::delete_orderbook(RawOrigin::Root.into(),
                          order_book_id).unwrap();
              }
              verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
              {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
              verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
              {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
              verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
              {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
              verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
-             {} verify
              {
                  assert_eq! (OrderBookPallet :: < T > :: order_books(order_book_id), None)
                  ;
-             }) ;
?              ^^^

+             } }
?              ^^

====================================================================================================
Diff from
'''
benchmarks_iter! { {} {} { T : trading_pair :: Config + core :: fmt :: Debug } () () () ()
            #[configs((x, y) = [(1, 2), (3, 4)])] delete_orderbook { let aboba = 1234 ; }
            :
            {
                OrderBookPallet::<T>::delete_orderbook(RawOrigin::Root.into(),
                        order_book_id).unwrap();
            }
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify
            {
                assert_eq! (OrderBookPallet :: < T > :: order_books(order_book_id), None)
                ;
            } }
'''
to
'''
$crate :: benchmarks_iter!
            ({} {} { T : trading_pair :: Config + core :: fmt :: Debug } () () () ()
            #[configs((x, y) = [(1, 2), (3, 4)])] delete_orderbook { let aboba = 1234 ; }
            :
            {
                OrderBookPallet::<T>::delete_orderbook(RawOrigin::Root.into(),
                        order_book_id).unwrap();
            }
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify
            {
                assert_eq! (OrderBookPallet :: < T > :: order_books(order_book_id), None)
                ;
            }) ;
'''
::::::::::::::::::::::::::::::::::::::::::::::::::
- $crate :: benchmarks_iter!
-             ({} {} { T : trading_pair :: Config + core :: fmt :: Debug } () () () ()
? ^^^^^^^^^^^^^

+ benchmarks_iter! { {} {} { T : trading_pair :: Config + core :: fmt :: Debug } () () () ()
? ^^^^^^^^^^^^^^^^^^^

              #[configs((x, y) = [(1, 2), (3, 4)])] delete_orderbook { let aboba = 1234 ; }
              :
              {
                  OrderBookPallet::<T>::delete_orderbook(RawOrigin::Root.into(),
                          order_book_id).unwrap();
              }
              verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
              {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
              verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
              {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
              verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
              {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
              verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
-             {} verify {} verify
?                      ----------

+             {} verify
              {
                  assert_eq! (OrderBookPallet :: < T > :: order_books(order_book_id), None)
                  ;
-             }) ;
?              ^^^

+             } }
?              ^^

====================================================================================================
Diff from
'''
benchmarks_iter! { {} {} { T : trading_pair :: Config + core :: fmt :: Debug } () () () ()
            #[configs((x, y) = [(1, 2), (3, 4)])] delete_orderbook { let aboba = 1234 ; }
            :
            {
                OrderBookPallet::<T>::delete_orderbook(RawOrigin::Root.into(),
                        order_book_id).unwrap();
            }
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify
            {
                assert_eq! (OrderBookPallet :: < T > :: order_books(order_book_id), None)
                ;
            } }
'''
to
'''
$crate :: benchmarks_iter!
            ({} {} { T : trading_pair :: Config + core :: fmt :: Debug } () () () ()
            #[configs((x, y) = [(1, 2), (3, 4)])] delete_orderbook { let aboba = 1234 ; }
            :
            {
                OrderBookPallet::<T>::delete_orderbook(RawOrigin::Root.into(),
                        order_book_id).unwrap();
            }
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify
            {
                assert_eq! (OrderBookPallet :: < T > :: order_books(order_book_id), None)
                ;
            }) ;
'''
::::::::::::::::::::::::::::::::::::::::::::::::::
- $crate :: benchmarks_iter!
-             ({} {} { T : trading_pair :: Config + core :: fmt :: Debug } () () () ()
? ^^^^^^^^^^^^^

+ benchmarks_iter! { {} {} { T : trading_pair :: Config + core :: fmt :: Debug } () () () ()
? ^^^^^^^^^^^^^^^^^^^

              #[configs((x, y) = [(1, 2), (3, 4)])] delete_orderbook { let aboba = 1234 ; }
              :
              {
                  OrderBookPallet::<T>::delete_orderbook(RawOrigin::Root.into(),
                          order_book_id).unwrap();
              }
              verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
              {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
              verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
              {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
              verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
              {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
              verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
-             {} verify {} verify {} verify
?                                ----------

+             {} verify {} verify
              {
                  assert_eq! (OrderBookPallet :: < T > :: order_books(order_book_id), None)
                  ;
-             }) ;
?              ^^^

+             } }
?              ^^

====================================================================================================
Diff from
'''
benchmarks_iter! { {} {} { T : trading_pair :: Config + core :: fmt :: Debug } () () () ()
            #[configs((x, y) = [(1, 2), (3, 4)])] delete_orderbook { let aboba = 1234 ; }
            :
            {
                OrderBookPallet::<T>::delete_orderbook(RawOrigin::Root.into(),
                        order_book_id).unwrap();
            }
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify
            {
                assert_eq! (OrderBookPallet :: < T > :: order_books(order_book_id), None)
                ;
            } }
'''
to
'''
$crate :: benchmarks_iter!
            ({} {} { T : trading_pair :: Config + core :: fmt :: Debug } () () () ()
            #[configs((x, y) = [(1, 2), (3, 4)])] delete_orderbook { let aboba = 1234 ; }
            :
            {
                OrderBookPallet::<T>::delete_orderbook(RawOrigin::Root.into(),
                        order_book_id).unwrap();
            }
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify
            {
                assert_eq! (OrderBookPallet :: < T > :: order_books(order_book_id), None)
                ;
            }) ;
'''
::::::::::::::::::::::::::::::::::::::::::::::::::
- $crate :: benchmarks_iter!
-             ({} {} { T : trading_pair :: Config + core :: fmt :: Debug } () () () ()
? ^^^^^^^^^^^^^

+ benchmarks_iter! { {} {} { T : trading_pair :: Config + core :: fmt :: Debug } () () () ()
? ^^^^^^^^^^^^^^^^^^^

              #[configs((x, y) = [(1, 2), (3, 4)])] delete_orderbook { let aboba = 1234 ; }
              :
              {
                  OrderBookPallet::<T>::delete_orderbook(RawOrigin::Root.into(),
                          order_book_id).unwrap();
              }
              verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
              {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
              verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
              {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
              verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
              {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
              verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
-             {} verify {} verify {} verify {} verify
?                                          ----------

+             {} verify {} verify {} verify
              {
                  assert_eq! (OrderBookPallet :: < T > :: order_books(order_book_id), None)
                  ;
-             }) ;
?              ^^^

+             } }
?              ^^

====================================================================================================
Diff from
'''
benchmarks_iter! { {} {} { T : trading_pair :: Config + core :: fmt :: Debug } () () () ()
            #[configs((x, y) = [(1, 2), (3, 4)])] delete_orderbook { let aboba = 1234 ; }
            :
            {
                OrderBookPallet::<T>::delete_orderbook(RawOrigin::Root.into(),
                        order_book_id).unwrap();
            }
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify
            {
                assert_eq! (OrderBookPallet :: < T > :: order_books(order_book_id), None)
                ;
            } }
'''
to
'''
$crate :: benchmarks_iter!
            ({} {} { T : trading_pair :: Config + core :: fmt :: Debug } () () () ()
            #[configs((x, y) = [(1, 2), (3, 4)])] delete_orderbook { let aboba = 1234 ; }
            :
            {
                OrderBookPallet::<T>::delete_orderbook(RawOrigin::Root.into(),
                        order_book_id).unwrap();
            }
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify
            {
                assert_eq! (OrderBookPallet :: < T > :: order_books(order_book_id), None)
                ;
            }) ;
'''
::::::::::::::::::::::::::::::::::::::::::::::::::
- $crate :: benchmarks_iter!
-             ({} {} { T : trading_pair :: Config + core :: fmt :: Debug } () () () ()
? ^^^^^^^^^^^^^

+ benchmarks_iter! { {} {} { T : trading_pair :: Config + core :: fmt :: Debug } () () () ()
? ^^^^^^^^^^^^^^^^^^^

              #[configs((x, y) = [(1, 2), (3, 4)])] delete_orderbook { let aboba = 1234 ; }
              :
              {
                  OrderBookPallet::<T>::delete_orderbook(RawOrigin::Root.into(),
                          order_book_id).unwrap();
              }
              verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
              {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
              verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
              {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
              verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
              {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
              verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
-             {} verify {} verify {} verify {} verify {} verify
?                                                    ----------

+             {} verify {} verify {} verify {} verify
              {
                  assert_eq! (OrderBookPallet :: < T > :: order_books(order_book_id), None)
                  ;
-             }) ;
?              ^^^

+             } }
?              ^^

====================================================================================================
Diff from
'''
benchmarks_iter! { {} {} { T : trading_pair :: Config + core :: fmt :: Debug } () () () ()
            #[configs((x, y) = [(1, 2), (3, 4)])] delete_orderbook { let aboba = 1234 ; }
            :
            {
                OrderBookPallet::<T>::delete_orderbook(RawOrigin::Root.into(),
                        order_book_id).unwrap();
            }
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify
            {
                assert_eq! (OrderBookPallet :: < T > :: order_books(order_book_id), None)
                ;
            } }
'''
to
'''
$crate :: benchmarks_iter!
            ({} {} { T : trading_pair :: Config + core :: fmt :: Debug } () () () ()
            #[configs((x, y) = [(1, 2), (3, 4)])] delete_orderbook { let aboba = 1234 ; }
            :
            {
                OrderBookPallet::<T>::delete_orderbook(RawOrigin::Root.into(),
                        order_book_id).unwrap();
            }
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify
            {
                assert_eq! (OrderBookPallet :: < T > :: order_books(order_book_id), None)
                ;
            }) ;
'''
::::::::::::::::::::::::::::::::::::::::::::::::::
- $crate :: benchmarks_iter!
-             ({} {} { T : trading_pair :: Config + core :: fmt :: Debug } () () () ()
? ^^^^^^^^^^^^^

+ benchmarks_iter! { {} {} { T : trading_pair :: Config + core :: fmt :: Debug } () () () ()
? ^^^^^^^^^^^^^^^^^^^

              #[configs((x, y) = [(1, 2), (3, 4)])] delete_orderbook { let aboba = 1234 ; }
              :
              {
                  OrderBookPallet::<T>::delete_orderbook(RawOrigin::Root.into(),
                          order_book_id).unwrap();
              }
              verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
              {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
              verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
              {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
              verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
              {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
              verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
-             {} verify {} verify {} verify {} verify {} verify {} verify
?                                                              ----------

+             {} verify {} verify {} verify {} verify {} verify
              {
                  assert_eq! (OrderBookPallet :: < T > :: order_books(order_book_id), None)
                  ;
-             }) ;
?              ^^^

+             } }
?              ^^

====================================================================================================
Diff from
'''
benchmarks_iter! { {} {} { T : trading_pair :: Config + core :: fmt :: Debug } () () () ()
            #[configs((x, y) = [(1, 2), (3, 4)])] delete_orderbook { let aboba = 1234 ; }
            :
            {
                OrderBookPallet::<T>::delete_orderbook(RawOrigin::Root.into(),
                        order_book_id).unwrap();
            }
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify
            {
                assert_eq! (OrderBookPallet :: < T > :: order_books(order_book_id), None)
                ;
            } }
'''
to
'''
$crate :: benchmarks_iter!
            ({} {} { T : trading_pair :: Config + core :: fmt :: Debug } () () () ()
            #[configs((x, y) = [(1, 2), (3, 4)])] delete_orderbook { let aboba = 1234 ; }
            :
            {
                OrderBookPallet::<T>::delete_orderbook(RawOrigin::Root.into(),
                        order_book_id).unwrap();
            }
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {
                assert_eq! (OrderBookPallet :: < T > :: order_books(order_book_id), None)
                ;
            }) ;
'''
::::::::::::::::::::::::::::::::::::::::::::::::::
- $crate :: benchmarks_iter!
-             ({} {} { T : trading_pair :: Config + core :: fmt :: Debug } () () () ()
? ^^^^^^^^^^^^^

+ benchmarks_iter! { {} {} { T : trading_pair :: Config + core :: fmt :: Debug } () () () ()
? ^^^^^^^^^^^^^^^^^^^

              #[configs((x, y) = [(1, 2), (3, 4)])] delete_orderbook { let aboba = 1234 ; }
              :
              {
                  OrderBookPallet::<T>::delete_orderbook(RawOrigin::Root.into(),
                          order_book_id).unwrap();
              }
              verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
              {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
              verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
              {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
              verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
              {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
              verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
-             {} verify {} verify {} verify {} verify {} verify {} verify {} verify
?                                                                        ----------

+             {} verify {} verify {} verify {} verify {} verify {} verify
              {
                  assert_eq! (OrderBookPallet :: < T > :: order_books(order_book_id), None)
                  ;
-             }) ;
?              ^^^

+             } }
?              ^^

====================================================================================================
Diff from
'''
benchmarks_iter! { {} {} { T : trading_pair :: Config + core :: fmt :: Debug } () () () ()
            #[configs((x, y) = [(1, 2), (3, 4)])] delete_orderbook { let aboba = 1234 ; }
            :
            {
                OrderBookPallet::<T>::delete_orderbook(RawOrigin::Root.into(),
                        order_book_id).unwrap();
            }
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {
                assert_eq! (OrderBookPallet :: < T > :: order_books(order_book_id), None)
                ;
            } }
'''
to
'''
$crate :: benchmarks_iter!
            ({} {} { T : trading_pair :: Config + core :: fmt :: Debug } () () () ()
            #[configs((x, y) = [(1, 2), (3, 4)])] delete_orderbook { let aboba = 1234 ; }
            :
            {
                OrderBookPallet::<T>::delete_orderbook(RawOrigin::Root.into(),
                        order_book_id).unwrap();
            }
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify
            {
                assert_eq! (OrderBookPallet :: < T > :: order_books(order_book_id), None)
                ;
            }) ;
'''
::::::::::::::::::::::::::::::::::::::::::::::::::
- $crate :: benchmarks_iter!
-             ({} {} { T : trading_pair :: Config + core :: fmt :: Debug } () () () ()
? ^^^^^^^^^^^^^

+ benchmarks_iter! { {} {} { T : trading_pair :: Config + core :: fmt :: Debug } () () () ()
? ^^^^^^^^^^^^^^^^^^^

              #[configs((x, y) = [(1, 2), (3, 4)])] delete_orderbook { let aboba = 1234 ; }
              :
              {
                  OrderBookPallet::<T>::delete_orderbook(RawOrigin::Root.into(),
                          order_book_id).unwrap();
              }
              verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
              {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
              verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
              {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
              verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
              {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
              verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
-             {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
?                                                                                  ---

+             {} verify {} verify {} verify {} verify {} verify {} verify {} verify
-             verify
              {
                  assert_eq! (OrderBookPallet :: < T > :: order_books(order_book_id), None)
                  ;
-             }) ;
?              ^^^

+             } }
?              ^^

====================================================================================================
Diff from
'''
benchmarks_iter! { {} {} { T : trading_pair :: Config + core :: fmt :: Debug } () () () ()
            #[configs((x, y) = [(1, 2), (3, 4)])] delete_orderbook { let aboba = 1234 ; }
            :
            {
                OrderBookPallet::<T>::delete_orderbook(RawOrigin::Root.into(),
                        order_book_id).unwrap();
            }
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify
            {
                assert_eq! (OrderBookPallet :: < T > :: order_books(order_book_id), None)
                ;
            } }
'''
to
'''
$crate :: benchmarks_iter!
            ({} {} { T : trading_pair :: Config + core :: fmt :: Debug } () () () ()
            #[configs((x, y) = [(1, 2), (3, 4)])] delete_orderbook { let aboba = 1234 ; }
            :
            {
                OrderBookPallet::<T>::delete_orderbook(RawOrigin::Root.into(),
                        order_book_id).unwrap();
            }
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify
            {
                assert_eq! (OrderBookPallet :: < T > :: order_books(order_book_id), None)
                ;
            }) ;
'''
::::::::::::::::::::::::::::::::::::::::::::::::::
- $crate :: benchmarks_iter!
-             ({} {} { T : trading_pair :: Config + core :: fmt :: Debug } () () () ()
? ^^^^^^^^^^^^^

+ benchmarks_iter! { {} {} { T : trading_pair :: Config + core :: fmt :: Debug } () () () ()
? ^^^^^^^^^^^^^^^^^^^

              #[configs((x, y) = [(1, 2), (3, 4)])] delete_orderbook { let aboba = 1234 ; }
              :
              {
                  OrderBookPallet::<T>::delete_orderbook(RawOrigin::Root.into(),
                          order_book_id).unwrap();
              }
              verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
              {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
              verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
              {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
              verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
              {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
              verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
              {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
-             verify {} verify
?                   ----------

+             verify
              {
                  assert_eq! (OrderBookPallet :: < T > :: order_books(order_book_id), None)
                  ;
-             }) ;
?              ^^^

+             } }
?              ^^

====================================================================================================
Diff from
'''
benchmarks_iter! { {} {} { T : trading_pair :: Config + core :: fmt :: Debug } () () () ()
            #[configs((x, y) = [(1, 2), (3, 4)])] delete_orderbook { let aboba = 1234 ; }
            :
            {
                OrderBookPallet::<T>::delete_orderbook(RawOrigin::Root.into(),
                        order_book_id).unwrap();
            }
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify
            {
                assert_eq! (OrderBookPallet :: < T > :: order_books(order_book_id), None)
                ;
            } }
'''
to
'''
$crate :: benchmarks_iter!
            ({} {} { T : trading_pair :: Config + core :: fmt :: Debug } () () () ()
            #[configs((x, y) = [(1, 2), (3, 4)])] delete_orderbook { let aboba = 1234 ; }
            :
            {
                OrderBookPallet::<T>::delete_orderbook(RawOrigin::Root.into(),
                        order_book_id).unwrap();
            }
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify
            {
                assert_eq! (OrderBookPallet :: < T > :: order_books(order_book_id), None)
                ;
            }) ;
'''
::::::::::::::::::::::::::::::::::::::::::::::::::
- $crate :: benchmarks_iter!
-             ({} {} { T : trading_pair :: Config + core :: fmt :: Debug } () () () ()
? ^^^^^^^^^^^^^

+ benchmarks_iter! { {} {} { T : trading_pair :: Config + core :: fmt :: Debug } () () () ()
? ^^^^^^^^^^^^^^^^^^^

              #[configs((x, y) = [(1, 2), (3, 4)])] delete_orderbook { let aboba = 1234 ; }
              :
              {
                  OrderBookPallet::<T>::delete_orderbook(RawOrigin::Root.into(),
                          order_book_id).unwrap();
              }
              verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
              {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
              verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
              {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
              verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
              {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
              verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
              {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
-             verify {} verify {} verify
?                             ----------

+             verify {} verify
              {
                  assert_eq! (OrderBookPallet :: < T > :: order_books(order_book_id), None)
                  ;
-             }) ;
?              ^^^

+             } }
?              ^^

====================================================================================================
Diff from
'''
benchmarks_iter! { {} {} { T : trading_pair :: Config + core :: fmt :: Debug } () () () ()
            #[configs((x, y) = [(1, 2), (3, 4)])] delete_orderbook { let aboba = 1234 ; }
            :
            {
                OrderBookPallet::<T>::delete_orderbook(RawOrigin::Root.into(),
                        order_book_id).unwrap();
            }
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify
            {
                assert_eq! (OrderBookPallet :: < T > :: order_books(order_book_id), None)
                ;
            } }
'''
to
'''
$crate :: benchmarks_iter!
            ({} {} { T : trading_pair :: Config + core :: fmt :: Debug } () () () ()
            #[configs((x, y) = [(1, 2), (3, 4)])] delete_orderbook { let aboba = 1234 ; }
            :
            {
                OrderBookPallet::<T>::delete_orderbook(RawOrigin::Root.into(),
                        order_book_id).unwrap();
            }
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify
            {
                assert_eq! (OrderBookPallet :: < T > :: order_books(order_book_id), None)
                ;
            }) ;
'''
::::::::::::::::::::::::::::::::::::::::::::::::::
- $crate :: benchmarks_iter!
-             ({} {} { T : trading_pair :: Config + core :: fmt :: Debug } () () () ()
? ^^^^^^^^^^^^^

+ benchmarks_iter! { {} {} { T : trading_pair :: Config + core :: fmt :: Debug } () () () ()
? ^^^^^^^^^^^^^^^^^^^

              #[configs((x, y) = [(1, 2), (3, 4)])] delete_orderbook { let aboba = 1234 ; }
              :
              {
                  OrderBookPallet::<T>::delete_orderbook(RawOrigin::Root.into(),
                          order_book_id).unwrap();
              }
              verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
              {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
              verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
              {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
              verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
              {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
              verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
              {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
-             verify {} verify {} verify {} verify
?                                       ----------

+             verify {} verify {} verify
              {
                  assert_eq! (OrderBookPallet :: < T > :: order_books(order_book_id), None)
                  ;
-             }) ;
?              ^^^

+             } }
?              ^^

====================================================================================================
Diff from
'''
benchmarks_iter! { {} {} { T : trading_pair :: Config + core :: fmt :: Debug } () () () ()
            #[configs((x, y) = [(1, 2), (3, 4)])] delete_orderbook { let aboba = 1234 ; }
            :
            {
                OrderBookPallet::<T>::delete_orderbook(RawOrigin::Root.into(),
                        order_book_id).unwrap();
            }
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify
            {
                assert_eq! (OrderBookPallet :: < T > :: order_books(order_book_id), None)
                ;
            } }
'''
to
'''
$crate :: benchmarks_iter!
            ({} {} { T : trading_pair :: Config + core :: fmt :: Debug } () () () ()
            #[configs((x, y) = [(1, 2), (3, 4)])] delete_orderbook { let aboba = 1234 ; }
            :
            {
                OrderBookPallet::<T>::delete_orderbook(RawOrigin::Root.into(),
                        order_book_id).unwrap();
            }
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify
            {
                assert_eq! (OrderBookPallet :: < T > :: order_books(order_book_id), None)
                ;
            }) ;
'''
::::::::::::::::::::::::::::::::::::::::::::::::::
- $crate :: benchmarks_iter!
-             ({} {} { T : trading_pair :: Config + core :: fmt :: Debug } () () () ()
? ^^^^^^^^^^^^^

+ benchmarks_iter! { {} {} { T : trading_pair :: Config + core :: fmt :: Debug } () () () ()
? ^^^^^^^^^^^^^^^^^^^

              #[configs((x, y) = [(1, 2), (3, 4)])] delete_orderbook { let aboba = 1234 ; }
              :
              {
                  OrderBookPallet::<T>::delete_orderbook(RawOrigin::Root.into(),
                          order_book_id).unwrap();
              }
              verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
              {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
              verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
              {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
              verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
              {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
              verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
              {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
-             verify {} verify {} verify {} verify {} verify
?                                                 ----------

+             verify {} verify {} verify {} verify
              {
                  assert_eq! (OrderBookPallet :: < T > :: order_books(order_book_id), None)
                  ;
-             }) ;
?              ^^^

+             } }
?              ^^

====================================================================================================
Diff from
'''
benchmarks_iter! { {} {} { T : trading_pair :: Config + core :: fmt :: Debug } () () () ()
            #[configs((x, y) = [(1, 2), (3, 4)])] delete_orderbook { let aboba = 1234 ; }
            :
            {
                OrderBookPallet::<T>::delete_orderbook(RawOrigin::Root.into(),
                        order_book_id).unwrap();
            }
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify
            {
                assert_eq! (OrderBookPallet :: < T > :: order_books(order_book_id), None)
                ;
            } }
'''
to
'''
$crate :: benchmarks_iter!
            ({} {} { T : trading_pair :: Config + core :: fmt :: Debug } () () () ()
            #[configs((x, y) = [(1, 2), (3, 4)])] delete_orderbook { let aboba = 1234 ; }
            :
            {
                OrderBookPallet::<T>::delete_orderbook(RawOrigin::Root.into(),
                        order_book_id).unwrap();
            }
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify
            {
                assert_eq! (OrderBookPallet :: < T > :: order_books(order_book_id), None)
                ;
            }) ;
'''
::::::::::::::::::::::::::::::::::::::::::::::::::
- $crate :: benchmarks_iter!
-             ({} {} { T : trading_pair :: Config + core :: fmt :: Debug } () () () ()
? ^^^^^^^^^^^^^

+ benchmarks_iter! { {} {} { T : trading_pair :: Config + core :: fmt :: Debug } () () () ()
? ^^^^^^^^^^^^^^^^^^^

              #[configs((x, y) = [(1, 2), (3, 4)])] delete_orderbook { let aboba = 1234 ; }
              :
              {
                  OrderBookPallet::<T>::delete_orderbook(RawOrigin::Root.into(),
                          order_book_id).unwrap();
              }
              verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
              {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
              verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
              {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
              verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
              {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
              verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
              {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
-             verify {} verify {} verify {} verify {} verify {} verify
?                                                           ----------

+             verify {} verify {} verify {} verify {} verify
              {
                  assert_eq! (OrderBookPallet :: < T > :: order_books(order_book_id), None)
                  ;
-             }) ;
?              ^^^

+             } }
?              ^^

====================================================================================================
Diff from
'''
benchmarks_iter! { {} {} { T : trading_pair :: Config + core :: fmt :: Debug } () () () ()
            #[configs((x, y) = [(1, 2), (3, 4)])] delete_orderbook { let aboba = 1234 ; }
            :
            {
                OrderBookPallet::<T>::delete_orderbook(RawOrigin::Root.into(),
                        order_book_id).unwrap();
            }
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify
            {
                assert_eq! (OrderBookPallet :: < T > :: order_books(order_book_id), None)
                ;
            } }
'''
to
'''
$crate :: benchmarks_iter!
            ({} {} { T : trading_pair :: Config + core :: fmt :: Debug } () () () ()
            #[configs((x, y) = [(1, 2), (3, 4)])] delete_orderbook { let aboba = 1234 ; }
            :
            {
                OrderBookPallet::<T>::delete_orderbook(RawOrigin::Root.into(),
                        order_book_id).unwrap();
            }
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify
            {
                assert_eq! (OrderBookPallet :: < T > :: order_books(order_book_id), None)
                ;
            }) ;
'''
::::::::::::::::::::::::::::::::::::::::::::::::::
- $crate :: benchmarks_iter!
-             ({} {} { T : trading_pair :: Config + core :: fmt :: Debug } () () () ()
? ^^^^^^^^^^^^^

+ benchmarks_iter! { {} {} { T : trading_pair :: Config + core :: fmt :: Debug } () () () ()
? ^^^^^^^^^^^^^^^^^^^

              #[configs((x, y) = [(1, 2), (3, 4)])] delete_orderbook { let aboba = 1234 ; }
              :
              {
                  OrderBookPallet::<T>::delete_orderbook(RawOrigin::Root.into(),
                          order_book_id).unwrap();
              }
              verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
              {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
              verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
              {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
              verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
              {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
              verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
              {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
-             verify {} verify {} verify {} verify {} verify {} verify {} verify
?                                                                     ----------

+             verify {} verify {} verify {} verify {} verify {} verify
              {
                  assert_eq! (OrderBookPallet :: < T > :: order_books(order_book_id), None)
                  ;
-             }) ;
?              ^^^

+             } }
?              ^^

====================================================================================================
Diff from
'''
benchmarks_iter! { {} {} { T : trading_pair :: Config + core :: fmt :: Debug } () () () ()
            #[configs((x, y) = [(1, 2), (3, 4)])] delete_orderbook { let aboba = 1234 ; }
            :
            {
                OrderBookPallet::<T>::delete_orderbook(RawOrigin::Root.into(),
                        order_book_id).unwrap();
            }
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify
            {
                assert_eq! (OrderBookPallet :: < T > :: order_books(order_book_id), None)
                ;
            } }
'''
to
'''
$crate :: benchmarks_iter!
            ({} {} { T : trading_pair :: Config + core :: fmt :: Debug } () () () ()
            #[configs((x, y) = [(1, 2), (3, 4)])] delete_orderbook { let aboba = 1234 ; }
            :
            {
                OrderBookPallet::<T>::delete_orderbook(RawOrigin::Root.into(),
                        order_book_id).unwrap();
            }
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {
                assert_eq! (OrderBookPallet :: < T > :: order_books(order_book_id), None)
                ;
            }) ;
'''
::::::::::::::::::::::::::::::::::::::::::::::::::
- $crate :: benchmarks_iter!
-             ({} {} { T : trading_pair :: Config + core :: fmt :: Debug } () () () ()
? ^^^^^^^^^^^^^

+ benchmarks_iter! { {} {} { T : trading_pair :: Config + core :: fmt :: Debug } () () () ()
? ^^^^^^^^^^^^^^^^^^^

              #[configs((x, y) = [(1, 2), (3, 4)])] delete_orderbook { let aboba = 1234 ; }
              :
              {
                  OrderBookPallet::<T>::delete_orderbook(RawOrigin::Root.into(),
                          order_book_id).unwrap();
              }
              verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
              {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
              verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
              {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
              verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
              {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
              verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
              {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
-             verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
?                                                                               ----------

+             verify {} verify {} verify {} verify {} verify {} verify {} verify
              {
                  assert_eq! (OrderBookPallet :: < T > :: order_books(order_book_id), None)
                  ;
-             }) ;
?              ^^^

+             } }
?              ^^

====================================================================================================
Diff from
'''
benchmarks_iter! { {} {} { T : trading_pair :: Config + core :: fmt :: Debug } () () () ()
            #[configs((x, y) = [(1, 2), (3, 4)])] delete_orderbook { let aboba = 1234 ; }
            :
            {
                OrderBookPallet::<T>::delete_orderbook(RawOrigin::Root.into(),
                        order_book_id).unwrap();
            }
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {
                assert_eq! (OrderBookPallet :: < T > :: order_books(order_book_id), None)
                ;
            } }
'''
to
'''
$crate :: benchmarks_iter!
            ({} {} { T : trading_pair :: Config + core :: fmt :: Debug } () () () ()
            #[configs((x, y) = [(1, 2), (3, 4)])] delete_orderbook { let aboba = 1234 ; }
            :
            {
                OrderBookPallet::<T>::delete_orderbook(RawOrigin::Root.into(),
                        order_book_id).unwrap();
            }
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify
            {
                assert_eq! (OrderBookPallet :: < T > :: order_books(order_book_id), None)
                ;
            }) ;
'''
::::::::::::::::::::::::::::::::::::::::::::::::::
- $crate :: benchmarks_iter!
-             ({} {} { T : trading_pair :: Config + core :: fmt :: Debug } () () () ()
? ^^^^^^^^^^^^^

+ benchmarks_iter! { {} {} { T : trading_pair :: Config + core :: fmt :: Debug } () () () ()
? ^^^^^^^^^^^^^^^^^^^

              #[configs((x, y) = [(1, 2), (3, 4)])] delete_orderbook { let aboba = 1234 ; }
              :
              {
                  OrderBookPallet::<T>::delete_orderbook(RawOrigin::Root.into(),
                          order_book_id).unwrap();
              }
              verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
              {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
              verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
              {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
              verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
              {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
              verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
              {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
              verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
-             {} verify
              {
                  assert_eq! (OrderBookPallet :: < T > :: order_books(order_book_id), None)
                  ;
-             }) ;
?              ^^^

+             } }
?              ^^

====================================================================================================
Diff from
'''
benchmarks_iter! { {} {} { T : trading_pair :: Config + core :: fmt :: Debug } () () () ()
            #[configs((x, y) = [(1, 2), (3, 4)])] delete_orderbook { let aboba = 1234 ; }
            :
            {
                OrderBookPallet::<T>::delete_orderbook(RawOrigin::Root.into(),
                        order_book_id).unwrap();
            }
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify
            {
                assert_eq! (OrderBookPallet :: < T > :: order_books(order_book_id), None)
                ;
            } }
'''
to
'''
$crate :: benchmarks_iter!
            ({} {} { T : trading_pair :: Config + core :: fmt :: Debug } () () () ()
            #[configs((x, y) = [(1, 2), (3, 4)])] delete_orderbook { let aboba = 1234 ; }
            :
            {
                OrderBookPallet::<T>::delete_orderbook(RawOrigin::Root.into(),
                        order_book_id).unwrap();
            }
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify
            {
                assert_eq! (OrderBookPallet :: < T > :: order_books(order_book_id), None)
                ;
            }) ;
'''
::::::::::::::::::::::::::::::::::::::::::::::::::
- $crate :: benchmarks_iter!
-             ({} {} { T : trading_pair :: Config + core :: fmt :: Debug } () () () ()
? ^^^^^^^^^^^^^

+ benchmarks_iter! { {} {} { T : trading_pair :: Config + core :: fmt :: Debug } () () () ()
? ^^^^^^^^^^^^^^^^^^^

              #[configs((x, y) = [(1, 2), (3, 4)])] delete_orderbook { let aboba = 1234 ; }
              :
              {
                  OrderBookPallet::<T>::delete_orderbook(RawOrigin::Root.into(),
                          order_book_id).unwrap();
              }
              verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
              {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
              verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
              {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
              verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
              {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
              verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
              {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
              verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
-             {} verify {} verify
?                      ----------

+             {} verify
              {
                  assert_eq! (OrderBookPallet :: < T > :: order_books(order_book_id), None)
                  ;
-             }) ;
?              ^^^

+             } }
?              ^^

====================================================================================================
Diff from
'''
benchmarks_iter! { {} {} { T : trading_pair :: Config + core :: fmt :: Debug } () () () ()
            #[configs((x, y) = [(1, 2), (3, 4)])] delete_orderbook { let aboba = 1234 ; }
            :
            {
                OrderBookPallet::<T>::delete_orderbook(RawOrigin::Root.into(),
                        order_book_id).unwrap();
            }
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify
            {
                assert_eq! (OrderBookPallet :: < T > :: order_books(order_book_id), None)
                ;
            } }
'''
to
'''
$crate :: benchmarks_iter!
            ({} {} { T : trading_pair :: Config + core :: fmt :: Debug } () () () ()
            #[configs((x, y) = [(1, 2), (3, 4)])] delete_orderbook { let aboba = 1234 ; }
            :
            {
                OrderBookPallet::<T>::delete_orderbook(RawOrigin::Root.into(),
                        order_book_id).unwrap();
            }
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify
            {
                assert_eq! (OrderBookPallet :: < T > :: order_books(order_book_id), None)
                ;
            }) ;
'''
::::::::::::::::::::::::::::::::::::::::::::::::::
- $crate :: benchmarks_iter!
-             ({} {} { T : trading_pair :: Config + core :: fmt :: Debug } () () () ()
? ^^^^^^^^^^^^^

+ benchmarks_iter! { {} {} { T : trading_pair :: Config + core :: fmt :: Debug } () () () ()
? ^^^^^^^^^^^^^^^^^^^

              #[configs((x, y) = [(1, 2), (3, 4)])] delete_orderbook { let aboba = 1234 ; }
              :
              {
                  OrderBookPallet::<T>::delete_orderbook(RawOrigin::Root.into(),
                          order_book_id).unwrap();
              }
              verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
              {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
              verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
              {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
              verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
              {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
              verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
              {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
              verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
-             {} verify {} verify {} verify
?                                ----------

+             {} verify {} verify
              {
                  assert_eq! (OrderBookPallet :: < T > :: order_books(order_book_id), None)
                  ;
-             }) ;
?              ^^^

+             } }
?              ^^

====================================================================================================
Diff from
'''
benchmarks_iter! { {} {} { T : trading_pair :: Config + core :: fmt :: Debug } () () () ()
            #[configs((x, y) = [(1, 2), (3, 4)])] delete_orderbook { let aboba = 1234 ; }
            :
            {
                OrderBookPallet::<T>::delete_orderbook(RawOrigin::Root.into(),
                        order_book_id).unwrap();
            }
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify
            {
                assert_eq! (OrderBookPallet :: < T > :: order_books(order_book_id), None)
                ;
            } }
'''
to
'''
$crate :: benchmarks_iter!
            ({} {} { T : trading_pair :: Config + core :: fmt :: Debug } () () () ()
            #[configs((x, y) = [(1, 2), (3, 4)])] delete_orderbook { let aboba = 1234 ; }
            :
            {
                OrderBookPallet::<T>::delete_orderbook(RawOrigin::Root.into(),
                        order_book_id).unwrap();
            }
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify
            {
                assert_eq! (OrderBookPallet :: < T > :: order_books(order_book_id), None)
                ;
            }) ;
'''
::::::::::::::::::::::::::::::::::::::::::::::::::
- $crate :: benchmarks_iter!
-             ({} {} { T : trading_pair :: Config + core :: fmt :: Debug } () () () ()
? ^^^^^^^^^^^^^

+ benchmarks_iter! { {} {} { T : trading_pair :: Config + core :: fmt :: Debug } () () () ()
? ^^^^^^^^^^^^^^^^^^^

              #[configs((x, y) = [(1, 2), (3, 4)])] delete_orderbook { let aboba = 1234 ; }
              :
              {
                  OrderBookPallet::<T>::delete_orderbook(RawOrigin::Root.into(),
                          order_book_id).unwrap();
              }
              verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
              {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
              verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
              {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
              verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
              {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
              verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
              {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
              verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
-             {} verify {} verify {} verify {} verify
?                                          ----------

+             {} verify {} verify {} verify
              {
                  assert_eq! (OrderBookPallet :: < T > :: order_books(order_book_id), None)
                  ;
-             }) ;
?              ^^^

+             } }
?              ^^

====================================================================================================
Diff from
'''
benchmarks_iter! { {} {} { T : trading_pair :: Config + core :: fmt :: Debug } () () () ()
            #[configs((x, y) = [(1, 2), (3, 4)])] delete_orderbook { let aboba = 1234 ; }
            :
            {
                OrderBookPallet::<T>::delete_orderbook(RawOrigin::Root.into(),
                        order_book_id).unwrap();
            }
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify
            {
                assert_eq! (OrderBookPallet :: < T > :: order_books(order_book_id), None)
                ;
            } }
'''
to
'''
$crate :: benchmarks_iter!
            ({} {} { T : trading_pair :: Config + core :: fmt :: Debug } () () () ()
            #[configs((x, y) = [(1, 2), (3, 4)])] delete_orderbook { let aboba = 1234 ; }
            :
            {
                OrderBookPallet::<T>::delete_orderbook(RawOrigin::Root.into(),
                        order_book_id).unwrap();
            }
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify
            {
                assert_eq! (OrderBookPallet :: < T > :: order_books(order_book_id), None)
                ;
            }) ;
'''
::::::::::::::::::::::::::::::::::::::::::::::::::
- $crate :: benchmarks_iter!
-             ({} {} { T : trading_pair :: Config + core :: fmt :: Debug } () () () ()
? ^^^^^^^^^^^^^

+ benchmarks_iter! { {} {} { T : trading_pair :: Config + core :: fmt :: Debug } () () () ()
? ^^^^^^^^^^^^^^^^^^^

              #[configs((x, y) = [(1, 2), (3, 4)])] delete_orderbook { let aboba = 1234 ; }
              :
              {
                  OrderBookPallet::<T>::delete_orderbook(RawOrigin::Root.into(),
                          order_book_id).unwrap();
              }
              verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
              {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
              verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
              {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
              verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
              {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
              verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
              {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
              verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
-             {} verify {} verify {} verify {} verify {} verify
?                                                    ----------

+             {} verify {} verify {} verify {} verify
              {
                  assert_eq! (OrderBookPallet :: < T > :: order_books(order_book_id), None)
                  ;
-             }) ;
?              ^^^

+             } }
?              ^^

====================================================================================================
Diff from
'''
benchmarks_iter! { {} {} { T : trading_pair :: Config + core :: fmt :: Debug } () () () ()
            #[configs((x, y) = [(1, 2), (3, 4)])] delete_orderbook { let aboba = 1234 ; }
            :
            {
                OrderBookPallet::<T>::delete_orderbook(RawOrigin::Root.into(),
                        order_book_id).unwrap();
            }
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify
            {
                assert_eq! (OrderBookPallet :: < T > :: order_books(order_book_id), None)
                ;
            } }
'''
to
'''
$crate :: benchmarks_iter!
            ({} {} { T : trading_pair :: Config + core :: fmt :: Debug } () () () ()
            #[configs((x, y) = [(1, 2), (3, 4)])] delete_orderbook { let aboba = 1234 ; }
            :
            {
                OrderBookPallet::<T>::delete_orderbook(RawOrigin::Root.into(),
                        order_book_id).unwrap();
            }
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify
            {
                assert_eq! (OrderBookPallet :: < T > :: order_books(order_book_id), None)
                ;
            }) ;
'''
::::::::::::::::::::::::::::::::::::::::::::::::::
- $crate :: benchmarks_iter!
-             ({} {} { T : trading_pair :: Config + core :: fmt :: Debug } () () () ()
? ^^^^^^^^^^^^^

+ benchmarks_iter! { {} {} { T : trading_pair :: Config + core :: fmt :: Debug } () () () ()
? ^^^^^^^^^^^^^^^^^^^

              #[configs((x, y) = [(1, 2), (3, 4)])] delete_orderbook { let aboba = 1234 ; }
              :
              {
                  OrderBookPallet::<T>::delete_orderbook(RawOrigin::Root.into(),
                          order_book_id).unwrap();
              }
              verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
              {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
              verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
              {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
              verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
              {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
              verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
              {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
              verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
-             {} verify {} verify {} verify {} verify {} verify {} verify
?                                                              ----------

+             {} verify {} verify {} verify {} verify {} verify
              {
                  assert_eq! (OrderBookPallet :: < T > :: order_books(order_book_id), None)
                  ;
-             }) ;
?              ^^^

+             } }
?              ^^

====================================================================================================
Diff from
'''
benchmarks_iter! { {} {} { T : trading_pair :: Config + core :: fmt :: Debug } () () () ()
            #[configs((x, y) = [(1, 2), (3, 4)])] delete_orderbook { let aboba = 1234 ; }
            :
            {
                OrderBookPallet::<T>::delete_orderbook(RawOrigin::Root.into(),
                        order_book_id).unwrap();
            }
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify
            {
                assert_eq! (OrderBookPallet :: < T > :: order_books(order_book_id), None)
                ;
            } }
'''
to
'''
$crate :: benchmarks_iter!
            ({} {} { T : trading_pair :: Config + core :: fmt :: Debug } () () () ()
            #[configs((x, y) = [(1, 2), (3, 4)])] delete_orderbook { let aboba = 1234 ; }
            :
            {
                OrderBookPallet::<T>::delete_orderbook(RawOrigin::Root.into(),
                        order_book_id).unwrap();
            }
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {
                assert_eq! (OrderBookPallet :: < T > :: order_books(order_book_id), None)
                ;
            }) ;
'''
::::::::::::::::::::::::::::::::::::::::::::::::::
- $crate :: benchmarks_iter!
-             ({} {} { T : trading_pair :: Config + core :: fmt :: Debug } () () () ()
? ^^^^^^^^^^^^^

+ benchmarks_iter! { {} {} { T : trading_pair :: Config + core :: fmt :: Debug } () () () ()
? ^^^^^^^^^^^^^^^^^^^

              #[configs((x, y) = [(1, 2), (3, 4)])] delete_orderbook { let aboba = 1234 ; }
              :
              {
                  OrderBookPallet::<T>::delete_orderbook(RawOrigin::Root.into(),
                          order_book_id).unwrap();
              }
              verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
              {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
              verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
              {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
              verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
              {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
              verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
              {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
              verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
-             {} verify {} verify {} verify {} verify {} verify {} verify {} verify
?                                                                        ----------

+             {} verify {} verify {} verify {} verify {} verify {} verify
              {
                  assert_eq! (OrderBookPallet :: < T > :: order_books(order_book_id), None)
                  ;
-             }) ;
?              ^^^

+             } }
?              ^^

====================================================================================================
Diff from
'''
benchmarks_iter! { {} {} { T : trading_pair :: Config + core :: fmt :: Debug } () () () ()
            #[configs((x, y) = [(1, 2), (3, 4)])] delete_orderbook { let aboba = 1234 ; }
            :
            {
                OrderBookPallet::<T>::delete_orderbook(RawOrigin::Root.into(),
                        order_book_id).unwrap();
            }
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {
                assert_eq! (OrderBookPallet :: < T > :: order_books(order_book_id), None)
                ;
            } }
'''
to
'''
$crate :: benchmarks_iter!
            ({} {} { T : trading_pair :: Config + core :: fmt :: Debug } () () () ()
            #[configs((x, y) = [(1, 2), (3, 4)])] delete_orderbook { let aboba = 1234 ; }
            :
            {
                OrderBookPallet::<T>::delete_orderbook(RawOrigin::Root.into(),
                        order_book_id).unwrap();
            }
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify
            {
                assert_eq! (OrderBookPallet :: < T > :: order_books(order_book_id), None)
                ;
            }) ;
'''
::::::::::::::::::::::::::::::::::::::::::::::::::
- $crate :: benchmarks_iter!
-             ({} {} { T : trading_pair :: Config + core :: fmt :: Debug } () () () ()
? ^^^^^^^^^^^^^

+ benchmarks_iter! { {} {} { T : trading_pair :: Config + core :: fmt :: Debug } () () () ()
? ^^^^^^^^^^^^^^^^^^^

              #[configs((x, y) = [(1, 2), (3, 4)])] delete_orderbook { let aboba = 1234 ; }
              :
              {
                  OrderBookPallet::<T>::delete_orderbook(RawOrigin::Root.into(),
                          order_book_id).unwrap();
              }
              verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
              {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
              verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
              {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
              verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
              {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
              verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
              {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
              verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
-             {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
?                                                                                  ---

+             {} verify {} verify {} verify {} verify {} verify {} verify {} verify
-             verify
              {
                  assert_eq! (OrderBookPallet :: < T > :: order_books(order_book_id), None)
                  ;
-             }) ;
?              ^^^

+             } }
?              ^^

====================================================================================================
Diff from
'''
benchmarks_iter! { {} {} { T : trading_pair :: Config + core :: fmt :: Debug } () () () ()
            #[configs((x, y) = [(1, 2), (3, 4)])] delete_orderbook { let aboba = 1234 ; }
            :
            {
                OrderBookPallet::<T>::delete_orderbook(RawOrigin::Root.into(),
                        order_book_id).unwrap();
            }
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify
            {
                assert_eq! (OrderBookPallet :: < T > :: order_books(order_book_id), None)
                ;
            } }
'''
to
'''
$crate :: benchmarks_iter!
            ({} {} { T : trading_pair :: Config + core :: fmt :: Debug } () () () ()
            #[configs((x, y) = [(1, 2), (3, 4)])] delete_orderbook { let aboba = 1234 ; }
            :
            {
                OrderBookPallet::<T>::delete_orderbook(RawOrigin::Root.into(),
                        order_book_id).unwrap();
            }
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify
            {
                assert_eq! (OrderBookPallet :: < T > :: order_books(order_book_id), None)
                ;
            }) ;
'''
::::::::::::::::::::::::::::::::::::::::::::::::::
- $crate :: benchmarks_iter!
-             ({} {} { T : trading_pair :: Config + core :: fmt :: Debug } () () () ()
? ^^^^^^^^^^^^^

+ benchmarks_iter! { {} {} { T : trading_pair :: Config + core :: fmt :: Debug } () () () ()
? ^^^^^^^^^^^^^^^^^^^

              #[configs((x, y) = [(1, 2), (3, 4)])] delete_orderbook { let aboba = 1234 ; }
              :
              {
                  OrderBookPallet::<T>::delete_orderbook(RawOrigin::Root.into(),
                          order_book_id).unwrap();
              }
              verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
              {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
              verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
              {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
              verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
              {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
              verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
              {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
              verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
              {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
-             verify {} verify
?                   ----------

+             verify
              {
                  assert_eq! (OrderBookPallet :: < T > :: order_books(order_book_id), None)
                  ;
-             }) ;
?              ^^^

+             } }
?              ^^

====================================================================================================
Diff from
'''
benchmarks_iter! { {} {} { T : trading_pair :: Config + core :: fmt :: Debug } () () () ()
            #[configs((x, y) = [(1, 2), (3, 4)])] delete_orderbook { let aboba = 1234 ; }
            :
            {
                OrderBookPallet::<T>::delete_orderbook(RawOrigin::Root.into(),
                        order_book_id).unwrap();
            }
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify
            {
                assert_eq! (OrderBookPallet :: < T > :: order_books(order_book_id), None)
                ;
            } }
'''
to
'''
$crate :: benchmarks_iter!
            ({} {} { T : trading_pair :: Config + core :: fmt :: Debug } () () () ()
            #[configs((x, y) = [(1, 2), (3, 4)])] delete_orderbook { let aboba = 1234 ; }
            :
            {
                OrderBookPallet::<T>::delete_orderbook(RawOrigin::Root.into(),
                        order_book_id).unwrap();
            }
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify
            {
                assert_eq! (OrderBookPallet :: < T > :: order_books(order_book_id), None)
                ;
            }) ;
'''
::::::::::::::::::::::::::::::::::::::::::::::::::
- $crate :: benchmarks_iter!
-             ({} {} { T : trading_pair :: Config + core :: fmt :: Debug } () () () ()
? ^^^^^^^^^^^^^

+ benchmarks_iter! { {} {} { T : trading_pair :: Config + core :: fmt :: Debug } () () () ()
? ^^^^^^^^^^^^^^^^^^^

              #[configs((x, y) = [(1, 2), (3, 4)])] delete_orderbook { let aboba = 1234 ; }
              :
              {
                  OrderBookPallet::<T>::delete_orderbook(RawOrigin::Root.into(),
                          order_book_id).unwrap();
              }
              verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
              {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
              verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
              {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
              verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
              {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
              verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
              {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
              verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
              {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
-             verify {} verify {} verify
?                             ----------

+             verify {} verify
              {
                  assert_eq! (OrderBookPallet :: < T > :: order_books(order_book_id), None)
                  ;
-             }) ;
?              ^^^

+             } }
?              ^^

====================================================================================================
Diff from
'''
benchmarks_iter! { {} {} { T : trading_pair :: Config + core :: fmt :: Debug } () () () ()
            #[configs((x, y) = [(1, 2), (3, 4)])] delete_orderbook { let aboba = 1234 ; }
            :
            {
                OrderBookPallet::<T>::delete_orderbook(RawOrigin::Root.into(),
                        order_book_id).unwrap();
            }
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify
            {
                assert_eq! (OrderBookPallet :: < T > :: order_books(order_book_id), None)
                ;
            } }
'''
to
'''
$crate :: benchmarks_iter!
            ({} {} { T : trading_pair :: Config + core :: fmt :: Debug } () () () ()
            #[configs((x, y) = [(1, 2), (3, 4)])] delete_orderbook { let aboba = 1234 ; }
            :
            {
                OrderBookPallet::<T>::delete_orderbook(RawOrigin::Root.into(),
                        order_book_id).unwrap();
            }
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify
            {
                assert_eq! (OrderBookPallet :: < T > :: order_books(order_book_id), None)
                ;
            }) ;
'''
::::::::::::::::::::::::::::::::::::::::::::::::::
- $crate :: benchmarks_iter!
-             ({} {} { T : trading_pair :: Config + core :: fmt :: Debug } () () () ()
? ^^^^^^^^^^^^^

+ benchmarks_iter! { {} {} { T : trading_pair :: Config + core :: fmt :: Debug } () () () ()
? ^^^^^^^^^^^^^^^^^^^

              #[configs((x, y) = [(1, 2), (3, 4)])] delete_orderbook { let aboba = 1234 ; }
              :
              {
                  OrderBookPallet::<T>::delete_orderbook(RawOrigin::Root.into(),
                          order_book_id).unwrap();
              }
              verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
              {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
              verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
              {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
              verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
              {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
              verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
              {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
              verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
              {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
-             verify {} verify {} verify {} verify
?                                       ----------

+             verify {} verify {} verify
              {
                  assert_eq! (OrderBookPallet :: < T > :: order_books(order_book_id), None)
                  ;
-             }) ;
?              ^^^

+             } }
?              ^^

====================================================================================================
Diff from
'''
benchmarks_iter! { {} {} { T : trading_pair :: Config + core :: fmt :: Debug } () () () ()
            #[configs((x, y) = [(1, 2), (3, 4)])] delete_orderbook { let aboba = 1234 ; }
            :
            {
                OrderBookPallet::<T>::delete_orderbook(RawOrigin::Root.into(),
                        order_book_id).unwrap();
            }
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify
            {
                assert_eq! (OrderBookPallet :: < T > :: order_books(order_book_id), None)
                ;
            } }
'''
to
'''
$crate :: benchmarks_iter!
            ({} {} { T : trading_pair :: Config + core :: fmt :: Debug } () () () ()
            #[configs((x, y) = [(1, 2), (3, 4)])] delete_orderbook { let aboba = 1234 ; }
            :
            {
                OrderBookPallet::<T>::delete_orderbook(RawOrigin::Root.into(),
                        order_book_id).unwrap();
            }
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify
            {
                assert_eq! (OrderBookPallet :: < T > :: order_books(order_book_id), None)
                ;
            }) ;
'''
::::::::::::::::::::::::::::::::::::::::::::::::::
- $crate :: benchmarks_iter!
-             ({} {} { T : trading_pair :: Config + core :: fmt :: Debug } () () () ()
? ^^^^^^^^^^^^^

+ benchmarks_iter! { {} {} { T : trading_pair :: Config + core :: fmt :: Debug } () () () ()
? ^^^^^^^^^^^^^^^^^^^

              #[configs((x, y) = [(1, 2), (3, 4)])] delete_orderbook { let aboba = 1234 ; }
              :
              {
                  OrderBookPallet::<T>::delete_orderbook(RawOrigin::Root.into(),
                          order_book_id).unwrap();
              }
              verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
              {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
              verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
              {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
              verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
              {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
              verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
              {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
              verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
              {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
-             verify {} verify {} verify {} verify {} verify
?                                                 ----------

+             verify {} verify {} verify {} verify
              {
                  assert_eq! (OrderBookPallet :: < T > :: order_books(order_book_id), None)
                  ;
-             }) ;
?              ^^^

+             } }
?              ^^

====================================================================================================
Diff from
'''
benchmarks_iter! { {} {} { T : trading_pair :: Config + core :: fmt :: Debug } () () () ()
            #[configs((x, y) = [(1, 2), (3, 4)])] delete_orderbook { let aboba = 1234 ; }
            :
            {
                OrderBookPallet::<T>::delete_orderbook(RawOrigin::Root.into(),
                        order_book_id).unwrap();
            }
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify
            {
                assert_eq! (OrderBookPallet :: < T > :: order_books(order_book_id), None)
                ;
            } }
'''
to
'''
$crate :: benchmarks_iter!
            ({} {} { T : trading_pair :: Config + core :: fmt :: Debug } () () () ()
            #[configs((x, y) = [(1, 2), (3, 4)])] delete_orderbook { let aboba = 1234 ; }
            :
            {
                OrderBookPallet::<T>::delete_orderbook(RawOrigin::Root.into(),
                        order_book_id).unwrap();
            }
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify
            {
                assert_eq! (OrderBookPallet :: < T > :: order_books(order_book_id), None)
                ;
            }) ;
'''
::::::::::::::::::::::::::::::::::::::::::::::::::
- $crate :: benchmarks_iter!
-             ({} {} { T : trading_pair :: Config + core :: fmt :: Debug } () () () ()
? ^^^^^^^^^^^^^

+ benchmarks_iter! { {} {} { T : trading_pair :: Config + core :: fmt :: Debug } () () () ()
? ^^^^^^^^^^^^^^^^^^^

              #[configs((x, y) = [(1, 2), (3, 4)])] delete_orderbook { let aboba = 1234 ; }
              :
              {
                  OrderBookPallet::<T>::delete_orderbook(RawOrigin::Root.into(),
                          order_book_id).unwrap();
              }
              verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
              {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
              verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
              {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
              verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
              {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
              verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
              {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
              verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
              {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
-             verify {} verify {} verify {} verify {} verify {} verify
?                                                           ----------

+             verify {} verify {} verify {} verify {} verify
              {
                  assert_eq! (OrderBookPallet :: < T > :: order_books(order_book_id), None)
                  ;
-             }) ;
?              ^^^

+             } }
?              ^^

====================================================================================================
Diff from
'''
benchmarks_iter! { {} {} { T : trading_pair :: Config + core :: fmt :: Debug } () () () ()
            #[configs((x, y) = [(1, 2), (3, 4)])] delete_orderbook { let aboba = 1234 ; }
            :
            {
                OrderBookPallet::<T>::delete_orderbook(RawOrigin::Root.into(),
                        order_book_id).unwrap();
            }
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify
            {
                assert_eq! (OrderBookPallet :: < T > :: order_books(order_book_id), None)
                ;
            } }
'''
to
'''
$crate :: benchmarks_iter!
            ({} {} { T : trading_pair :: Config + core :: fmt :: Debug } () () () ()
            #[configs((x, y) = [(1, 2), (3, 4)])] delete_orderbook { let aboba = 1234 ; }
            :
            {
                OrderBookPallet::<T>::delete_orderbook(RawOrigin::Root.into(),
                        order_book_id).unwrap();
            }
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify
            {
                assert_eq! (OrderBookPallet :: < T > :: order_books(order_book_id), None)
                ;
            }) ;
'''
::::::::::::::::::::::::::::::::::::::::::::::::::
- $crate :: benchmarks_iter!
-             ({} {} { T : trading_pair :: Config + core :: fmt :: Debug } () () () ()
? ^^^^^^^^^^^^^

+ benchmarks_iter! { {} {} { T : trading_pair :: Config + core :: fmt :: Debug } () () () ()
? ^^^^^^^^^^^^^^^^^^^

              #[configs((x, y) = [(1, 2), (3, 4)])] delete_orderbook { let aboba = 1234 ; }
              :
              {
                  OrderBookPallet::<T>::delete_orderbook(RawOrigin::Root.into(),
                          order_book_id).unwrap();
              }
              verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
              {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
              verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
              {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
              verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
              {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
              verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
              {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
              verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
              {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
-             verify {} verify {} verify {} verify {} verify {} verify {} verify
?                                                                     ----------

+             verify {} verify {} verify {} verify {} verify {} verify
              {
                  assert_eq! (OrderBookPallet :: < T > :: order_books(order_book_id), None)
                  ;
-             }) ;
?              ^^^

+             } }
?              ^^

====================================================================================================
Diff from
'''
benchmarks_iter! { {} {} { T : trading_pair :: Config + core :: fmt :: Debug } () () () ()
            #[configs((x, y) = [(1, 2), (3, 4)])] delete_orderbook { let aboba = 1234 ; }
            :
            {
                OrderBookPallet::<T>::delete_orderbook(RawOrigin::Root.into(),
                        order_book_id).unwrap();
            }
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify
            {
                assert_eq! (OrderBookPallet :: < T > :: order_books(order_book_id), None)
                ;
            } }
'''
to
'''
$crate :: benchmarks_iter!
            ({} {} { T : trading_pair :: Config + core :: fmt :: Debug } () () () ()
            #[configs((x, y) = [(1, 2), (3, 4)])] delete_orderbook { let aboba = 1234 ; }
            :
            {
                OrderBookPallet::<T>::delete_orderbook(RawOrigin::Root.into(),
                        order_book_id).unwrap();
            }
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {
                assert_eq! (OrderBookPallet :: < T > :: order_books(order_book_id), None)
                ;
            }) ;
'''
::::::::::::::::::::::::::::::::::::::::::::::::::
- $crate :: benchmarks_iter!
-             ({} {} { T : trading_pair :: Config + core :: fmt :: Debug } () () () ()
? ^^^^^^^^^^^^^

+ benchmarks_iter! { {} {} { T : trading_pair :: Config + core :: fmt :: Debug } () () () ()
? ^^^^^^^^^^^^^^^^^^^

              #[configs((x, y) = [(1, 2), (3, 4)])] delete_orderbook { let aboba = 1234 ; }
              :
              {
                  OrderBookPallet::<T>::delete_orderbook(RawOrigin::Root.into(),
                          order_book_id).unwrap();
              }
              verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
              {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
              verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
              {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
              verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
              {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
              verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
              {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
              verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
              {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
-             verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
?                                                                               ----------

+             verify {} verify {} verify {} verify {} verify {} verify {} verify
              {
                  assert_eq! (OrderBookPallet :: < T > :: order_books(order_book_id), None)
                  ;
-             }) ;
?              ^^^

+             } }
?              ^^

====================================================================================================
Diff from
'''
benchmarks_iter! { {} {} { T : trading_pair :: Config + core :: fmt :: Debug } () () () ()
            #[configs((x, y) = [(1, 2), (3, 4)])] delete_orderbook { let aboba = 1234 ; }
            :
            {
                OrderBookPallet::<T>::delete_orderbook(RawOrigin::Root.into(),
                        order_book_id).unwrap();
            }
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {
                assert_eq! (OrderBookPallet :: < T > :: order_books(order_book_id), None)
                ;
            } }
'''
to
'''
$crate :: benchmarks_iter!
            ({} {} { T : trading_pair :: Config + core :: fmt :: Debug } () () () ()
            #[configs((x, y) = [(1, 2), (3, 4)])] delete_orderbook { let aboba = 1234 ; }
            :
            {
                OrderBookPallet::<T>::delete_orderbook(RawOrigin::Root.into(),
                        order_book_id).unwrap();
            }
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify
            {
                assert_eq! (OrderBookPallet :: < T > :: order_books(order_book_id), None)
                ;
            }) ;
'''
::::::::::::::::::::::::::::::::::::::::::::::::::
- $crate :: benchmarks_iter!
-             ({} {} { T : trading_pair :: Config + core :: fmt :: Debug } () () () ()
? ^^^^^^^^^^^^^

+ benchmarks_iter! { {} {} { T : trading_pair :: Config + core :: fmt :: Debug } () () () ()
? ^^^^^^^^^^^^^^^^^^^

              #[configs((x, y) = [(1, 2), (3, 4)])] delete_orderbook { let aboba = 1234 ; }
              :
              {
                  OrderBookPallet::<T>::delete_orderbook(RawOrigin::Root.into(),
                          order_book_id).unwrap();
              }
              verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
              {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
              verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
              {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
              verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
              {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
              verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
              {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
              verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
              {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
              verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
-             {} verify
              {
                  assert_eq! (OrderBookPallet :: < T > :: order_books(order_book_id), None)
                  ;
-             }) ;
?              ^^^

+             } }
?              ^^

====================================================================================================
Diff from
'''
benchmarks_iter! { {} {} { T : trading_pair :: Config + core :: fmt :: Debug } () () () ()
            #[configs((x, y) = [(1, 2), (3, 4)])] delete_orderbook { let aboba = 1234 ; }
            :
            {
                OrderBookPallet::<T>::delete_orderbook(RawOrigin::Root.into(),
                        order_book_id).unwrap();
            }
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify
            {
                assert_eq! (OrderBookPallet :: < T > :: order_books(order_book_id), None)
                ;
            } }
'''
to
'''
$crate :: benchmarks_iter!
            ({} {} { T : trading_pair :: Config + core :: fmt :: Debug } () () () ()
            #[configs((x, y) = [(1, 2), (3, 4)])] delete_orderbook { let aboba = 1234 ; }
            :
            {
                OrderBookPallet::<T>::delete_orderbook(RawOrigin::Root.into(),
                        order_book_id).unwrap();
            }
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify
            {
                assert_eq! (OrderBookPallet :: < T > :: order_books(order_book_id), None)
                ;
            }) ;
'''
::::::::::::::::::::::::::::::::::::::::::::::::::
- $crate :: benchmarks_iter!
-             ({} {} { T : trading_pair :: Config + core :: fmt :: Debug } () () () ()
? ^^^^^^^^^^^^^

+ benchmarks_iter! { {} {} { T : trading_pair :: Config + core :: fmt :: Debug } () () () ()
? ^^^^^^^^^^^^^^^^^^^

              #[configs((x, y) = [(1, 2), (3, 4)])] delete_orderbook { let aboba = 1234 ; }
              :
              {
                  OrderBookPallet::<T>::delete_orderbook(RawOrigin::Root.into(),
                          order_book_id).unwrap();
              }
              verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
              {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
              verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
              {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
              verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
              {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
              verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
              {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
              verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
              {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
              verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
-             {} verify {} verify
?                      ----------

+             {} verify
              {
                  assert_eq! (OrderBookPallet :: < T > :: order_books(order_book_id), None)
                  ;
-             }) ;
?              ^^^

+             } }
?              ^^

====================================================================================================
Diff from
'''
benchmarks_iter! { {} {} { T : trading_pair :: Config + core :: fmt :: Debug } () () () ()
            #[configs((x, y) = [(1, 2), (3, 4)])] delete_orderbook { let aboba = 1234 ; }
            :
            {
                OrderBookPallet::<T>::delete_orderbook(RawOrigin::Root.into(),
                        order_book_id).unwrap();
            }
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify
            {
                assert_eq! (OrderBookPallet :: < T > :: order_books(order_book_id), None)
                ;
            } }
'''
to
'''
$crate :: benchmarks_iter!
            ({} {} { T : trading_pair :: Config + core :: fmt :: Debug } () () () ()
            #[configs((x, y) = [(1, 2), (3, 4)])] delete_orderbook { let aboba = 1234 ; }
            :
            {
                OrderBookPallet::<T>::delete_orderbook(RawOrigin::Root.into(),
                        order_book_id).unwrap();
            }
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify
            {
                assert_eq! (OrderBookPallet :: < T > :: order_books(order_book_id), None)
                ;
            }) ;
'''
::::::::::::::::::::::::::::::::::::::::::::::::::
- $crate :: benchmarks_iter!
-             ({} {} { T : trading_pair :: Config + core :: fmt :: Debug } () () () ()
? ^^^^^^^^^^^^^

+ benchmarks_iter! { {} {} { T : trading_pair :: Config + core :: fmt :: Debug } () () () ()
? ^^^^^^^^^^^^^^^^^^^

              #[configs((x, y) = [(1, 2), (3, 4)])] delete_orderbook { let aboba = 1234 ; }
              :
              {
                  OrderBookPallet::<T>::delete_orderbook(RawOrigin::Root.into(),
                          order_book_id).unwrap();
              }
              verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
              {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
              verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
              {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
              verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
              {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
              verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
              {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
              verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
              {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
              verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
-             {} verify {} verify {} verify
?                                ----------

+             {} verify {} verify
              {
                  assert_eq! (OrderBookPallet :: < T > :: order_books(order_book_id), None)
                  ;
-             }) ;
?              ^^^

+             } }
?              ^^

====================================================================================================
Diff from
'''
benchmarks_iter! { {} {} { T : trading_pair :: Config + core :: fmt :: Debug } () () () ()
            #[configs((x, y) = [(1, 2), (3, 4)])] delete_orderbook { let aboba = 1234 ; }
            :
            {
                OrderBookPallet::<T>::delete_orderbook(RawOrigin::Root.into(),
                        order_book_id).unwrap();
            }
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify
            {
                assert_eq! (OrderBookPallet :: < T > :: order_books(order_book_id), None)
                ;
            } }
'''
to
'''
$crate :: benchmarks_iter!
            ({} {} { T : trading_pair :: Config + core :: fmt :: Debug } () () () ()
            #[configs((x, y) = [(1, 2), (3, 4)])] delete_orderbook { let aboba = 1234 ; }
            :
            {
                OrderBookPallet::<T>::delete_orderbook(RawOrigin::Root.into(),
                        order_book_id).unwrap();
            }
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify
            {
                assert_eq! (OrderBookPallet :: < T > :: order_books(order_book_id), None)
                ;
            }) ;
'''
::::::::::::::::::::::::::::::::::::::::::::::::::
- $crate :: benchmarks_iter!
-             ({} {} { T : trading_pair :: Config + core :: fmt :: Debug } () () () ()
? ^^^^^^^^^^^^^

+ benchmarks_iter! { {} {} { T : trading_pair :: Config + core :: fmt :: Debug } () () () ()
? ^^^^^^^^^^^^^^^^^^^

              #[configs((x, y) = [(1, 2), (3, 4)])] delete_orderbook { let aboba = 1234 ; }
              :
              {
                  OrderBookPallet::<T>::delete_orderbook(RawOrigin::Root.into(),
                          order_book_id).unwrap();
              }
              verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
              {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
              verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
              {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
              verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
              {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
              verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
              {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
              verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
              {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
              verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
-             {} verify {} verify {} verify {} verify
?                                          ----------

+             {} verify {} verify {} verify
              {
                  assert_eq! (OrderBookPallet :: < T > :: order_books(order_book_id), None)
                  ;
-             }) ;
?              ^^^

+             } }
?              ^^

====================================================================================================
Diff from
'''
benchmarks_iter! { {} {} { T : trading_pair :: Config + core :: fmt :: Debug } () () () ()
            #[configs((x, y) = [(1, 2), (3, 4)])] delete_orderbook { let aboba = 1234 ; }
            :
            {
                OrderBookPallet::<T>::delete_orderbook(RawOrigin::Root.into(),
                        order_book_id).unwrap();
            }
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify
            {
                assert_eq! (OrderBookPallet :: < T > :: order_books(order_book_id), None)
                ;
            } }
'''
to
'''
$crate :: benchmarks_iter!
            ({} {} { T : trading_pair :: Config + core :: fmt :: Debug } () () () ()
            #[configs((x, y) = [(1, 2), (3, 4)])] delete_orderbook { let aboba = 1234 ; }
            :
            {
                OrderBookPallet::<T>::delete_orderbook(RawOrigin::Root.into(),
                        order_book_id).unwrap();
            }
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify
            {
                assert_eq! (OrderBookPallet :: < T > :: order_books(order_book_id), None)
                ;
            }) ;
'''
::::::::::::::::::::::::::::::::::::::::::::::::::
- $crate :: benchmarks_iter!
-             ({} {} { T : trading_pair :: Config + core :: fmt :: Debug } () () () ()
? ^^^^^^^^^^^^^

+ benchmarks_iter! { {} {} { T : trading_pair :: Config + core :: fmt :: Debug } () () () ()
? ^^^^^^^^^^^^^^^^^^^

              #[configs((x, y) = [(1, 2), (3, 4)])] delete_orderbook { let aboba = 1234 ; }
              :
              {
                  OrderBookPallet::<T>::delete_orderbook(RawOrigin::Root.into(),
                          order_book_id).unwrap();
              }
              verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
              {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
              verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
              {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
              verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
              {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
              verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
              {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
              verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
              {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
              verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
-             {} verify {} verify {} verify {} verify {} verify
?                                                    ----------

+             {} verify {} verify {} verify {} verify
              {
                  assert_eq! (OrderBookPallet :: < T > :: order_books(order_book_id), None)
                  ;
-             }) ;
?              ^^^

+             } }
?              ^^

====================================================================================================
Diff from
'''
benchmarks_iter! { {} {} { T : trading_pair :: Config + core :: fmt :: Debug } () () () ()
            #[configs((x, y) = [(1, 2), (3, 4)])] delete_orderbook { let aboba = 1234 ; }
            :
            {
                OrderBookPallet::<T>::delete_orderbook(RawOrigin::Root.into(),
                        order_book_id).unwrap();
            }
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify
            {
                assert_eq! (OrderBookPallet :: < T > :: order_books(order_book_id), None)
                ;
            } }
'''
to
'''
$crate :: benchmarks_iter!
            ({} {} { T : trading_pair :: Config + core :: fmt :: Debug } () () () ()
            #[configs((x, y) = [(1, 2), (3, 4)])] delete_orderbook { let aboba = 1234 ; }
            :
            {
                OrderBookPallet::<T>::delete_orderbook(RawOrigin::Root.into(),
                        order_book_id).unwrap();
            }
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify
            {
                assert_eq! (OrderBookPallet :: < T > :: order_books(order_book_id), None)
                ;
            }) ;
'''
::::::::::::::::::::::::::::::::::::::::::::::::::
- $crate :: benchmarks_iter!
-             ({} {} { T : trading_pair :: Config + core :: fmt :: Debug } () () () ()
? ^^^^^^^^^^^^^

+ benchmarks_iter! { {} {} { T : trading_pair :: Config + core :: fmt :: Debug } () () () ()
? ^^^^^^^^^^^^^^^^^^^

              #[configs((x, y) = [(1, 2), (3, 4)])] delete_orderbook { let aboba = 1234 ; }
              :
              {
                  OrderBookPallet::<T>::delete_orderbook(RawOrigin::Root.into(),
                          order_book_id).unwrap();
              }
              verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
              {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
              verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
              {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
              verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
              {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
              verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
              {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
              verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
              {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
              verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
-             {} verify {} verify {} verify {} verify {} verify {} verify
?                                                              ----------

+             {} verify {} verify {} verify {} verify {} verify
              {
                  assert_eq! (OrderBookPallet :: < T > :: order_books(order_book_id), None)
                  ;
-             }) ;
?              ^^^

+             } }
?              ^^

====================================================================================================
Diff from
'''
benchmarks_iter! { {} {} { T : trading_pair :: Config + core :: fmt :: Debug } () () () ()
            #[configs((x, y) = [(1, 2), (3, 4)])] delete_orderbook { let aboba = 1234 ; }
            :
            {
                OrderBookPallet::<T>::delete_orderbook(RawOrigin::Root.into(),
                        order_book_id).unwrap();
            }
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify
            {
                assert_eq! (OrderBookPallet :: < T > :: order_books(order_book_id), None)
                ;
            } }
'''
to
'''
$crate :: benchmarks_iter!
            ({} {} { T : trading_pair :: Config + core :: fmt :: Debug } () () () ()
            #[configs((x, y) = [(1, 2), (3, 4)])] delete_orderbook { let aboba = 1234 ; }
            :
            {
                OrderBookPallet::<T>::delete_orderbook(RawOrigin::Root.into(),
                        order_book_id).unwrap();
            }
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {
                assert_eq! (OrderBookPallet :: < T > :: order_books(order_book_id), None)
                ;
            }) ;
'''
::::::::::::::::::::::::::::::::::::::::::::::::::
- $crate :: benchmarks_iter!
-             ({} {} { T : trading_pair :: Config + core :: fmt :: Debug } () () () ()
? ^^^^^^^^^^^^^

+ benchmarks_iter! { {} {} { T : trading_pair :: Config + core :: fmt :: Debug } () () () ()
? ^^^^^^^^^^^^^^^^^^^

              #[configs((x, y) = [(1, 2), (3, 4)])] delete_orderbook { let aboba = 1234 ; }
              :
              {
                  OrderBookPallet::<T>::delete_orderbook(RawOrigin::Root.into(),
                          order_book_id).unwrap();
              }
              verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
              {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
              verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
              {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
              verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
              {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
              verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
              {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
              verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
              {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
              verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
-             {} verify {} verify {} verify {} verify {} verify {} verify {} verify
?                                                                        ----------

+             {} verify {} verify {} verify {} verify {} verify {} verify
              {
                  assert_eq! (OrderBookPallet :: < T > :: order_books(order_book_id), None)
                  ;
-             }) ;
?              ^^^

+             } }
?              ^^

====================================================================================================
Diff from
'''
benchmarks_iter! { {} {} { T : trading_pair :: Config + core :: fmt :: Debug } () () () ()
            #[configs((x, y) = [(1, 2), (3, 4)])] delete_orderbook { let aboba = 1234 ; }
            :
            {
                OrderBookPallet::<T>::delete_orderbook(RawOrigin::Root.into(),
                        order_book_id).unwrap();
            }
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {
                assert_eq! (OrderBookPallet :: < T > :: order_books(order_book_id), None)
                ;
            } }
'''
to
'''
$crate :: benchmarks_iter!
            ({} {} { T : trading_pair :: Config + core :: fmt :: Debug } () () () ()
            #[configs((x, y) = [(1, 2), (3, 4)])] delete_orderbook { let aboba = 1234 ; }
            :
            {
                OrderBookPallet::<T>::delete_orderbook(RawOrigin::Root.into(),
                        order_book_id).unwrap();
            }
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify
            {
                assert_eq! (OrderBookPallet :: < T > :: order_books(order_book_id), None)
                ;
            }) ;
'''
::::::::::::::::::::::::::::::::::::::::::::::::::
- $crate :: benchmarks_iter!
-             ({} {} { T : trading_pair :: Config + core :: fmt :: Debug } () () () ()
? ^^^^^^^^^^^^^

+ benchmarks_iter! { {} {} { T : trading_pair :: Config + core :: fmt :: Debug } () () () ()
? ^^^^^^^^^^^^^^^^^^^

              #[configs((x, y) = [(1, 2), (3, 4)])] delete_orderbook { let aboba = 1234 ; }
              :
              {
                  OrderBookPallet::<T>::delete_orderbook(RawOrigin::Root.into(),
                          order_book_id).unwrap();
              }
              verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
              {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
              verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
              {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
              verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
              {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
              verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
              {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
              verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
              {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
              verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
-             {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
?                                                                                  ---

+             {} verify {} verify {} verify {} verify {} verify {} verify {} verify
-             verify
              {
                  assert_eq! (OrderBookPallet :: < T > :: order_books(order_book_id), None)
                  ;
-             }) ;
?              ^^^

+             } }
?              ^^

====================================================================================================
Diff from
'''
benchmarks_iter! { {} {} { T : trading_pair :: Config + core :: fmt :: Debug } () () () ()
            #[configs((x, y) = [(1, 2), (3, 4)])] delete_orderbook { let aboba = 1234 ; }
            :
            {
                OrderBookPallet::<T>::delete_orderbook(RawOrigin::Root.into(),
                        order_book_id).unwrap();
            }
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify
            {
                assert_eq! (OrderBookPallet :: < T > :: order_books(order_book_id), None)
                ;
            } }
'''
to
'''
$crate :: benchmarks_iter!
            ({} {} { T : trading_pair :: Config + core :: fmt :: Debug } () () () ()
            #[configs((x, y) = [(1, 2), (3, 4)])] delete_orderbook { let aboba = 1234 ; }
            :
            {
                OrderBookPallet::<T>::delete_orderbook(RawOrigin::Root.into(),
                        order_book_id).unwrap();
            }
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify
            {
                assert_eq! (OrderBookPallet :: < T > :: order_books(order_book_id), None)
                ;
            }) ;
'''
::::::::::::::::::::::::::::::::::::::::::::::::::
- $crate :: benchmarks_iter!
-             ({} {} { T : trading_pair :: Config + core :: fmt :: Debug } () () () ()
? ^^^^^^^^^^^^^

+ benchmarks_iter! { {} {} { T : trading_pair :: Config + core :: fmt :: Debug } () () () ()
? ^^^^^^^^^^^^^^^^^^^

              #[configs((x, y) = [(1, 2), (3, 4)])] delete_orderbook { let aboba = 1234 ; }
              :
              {
                  OrderBookPallet::<T>::delete_orderbook(RawOrigin::Root.into(),
                          order_book_id).unwrap();
              }
              verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
              {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
              verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
              {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
              verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
              {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
              verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
              {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
              verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
              {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
              verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
              {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
-             verify {} verify
?                   ----------

+             verify
              {
                  assert_eq! (OrderBookPallet :: < T > :: order_books(order_book_id), None)
                  ;
-             }) ;
?              ^^^

+             } }
?              ^^

====================================================================================================
Diff from
'''
benchmarks_iter! { {} {} { T : trading_pair :: Config + core :: fmt :: Debug } () () () ()
            #[configs((x, y) = [(1, 2), (3, 4)])] delete_orderbook { let aboba = 1234 ; }
            :
            {
                OrderBookPallet::<T>::delete_orderbook(RawOrigin::Root.into(),
                        order_book_id).unwrap();
            }
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify
            {
                assert_eq! (OrderBookPallet :: < T > :: order_books(order_book_id), None)
                ;
            } }
'''
to
'''
$crate :: benchmarks_iter!
            ({} {} { T : trading_pair :: Config + core :: fmt :: Debug } () () () ()
            #[configs((x, y) = [(1, 2), (3, 4)])] delete_orderbook { let aboba = 1234 ; }
            :
            {
                OrderBookPallet::<T>::delete_orderbook(RawOrigin::Root.into(),
                        order_book_id).unwrap();
            }
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify
            {
                assert_eq! (OrderBookPallet :: < T > :: order_books(order_book_id), None)
                ;
            }) ;
'''
::::::::::::::::::::::::::::::::::::::::::::::::::
- $crate :: benchmarks_iter!
-             ({} {} { T : trading_pair :: Config + core :: fmt :: Debug } () () () ()
? ^^^^^^^^^^^^^

+ benchmarks_iter! { {} {} { T : trading_pair :: Config + core :: fmt :: Debug } () () () ()
? ^^^^^^^^^^^^^^^^^^^

              #[configs((x, y) = [(1, 2), (3, 4)])] delete_orderbook { let aboba = 1234 ; }
              :
              {
                  OrderBookPallet::<T>::delete_orderbook(RawOrigin::Root.into(),
                          order_book_id).unwrap();
              }
              verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
              {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
              verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
              {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
              verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
              {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
              verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
              {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
              verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
              {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
              verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
              {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
-             verify {} verify {} verify
?                             ----------

+             verify {} verify
              {
                  assert_eq! (OrderBookPallet :: < T > :: order_books(order_book_id), None)
                  ;
-             }) ;
?              ^^^

+             } }
?              ^^

====================================================================================================
Diff from
'''
benchmarks_iter! { {} {} { T : trading_pair :: Config + core :: fmt :: Debug } () () () ()
            #[configs((x, y) = [(1, 2), (3, 4)])] delete_orderbook { let aboba = 1234 ; }
            :
            {
                OrderBookPallet::<T>::delete_orderbook(RawOrigin::Root.into(),
                        order_book_id).unwrap();
            }
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify
            {
                assert_eq! (OrderBookPallet :: < T > :: order_books(order_book_id), None)
                ;
            } }
'''
to
'''
$crate :: benchmarks_iter!
            ({} {} { T : trading_pair :: Config + core :: fmt :: Debug } () () () ()
            #[configs((x, y) = [(1, 2), (3, 4)])] delete_orderbook { let aboba = 1234 ; }
            :
            {
                OrderBookPallet::<T>::delete_orderbook(RawOrigin::Root.into(),
                        order_book_id).unwrap();
            }
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify
            {
                assert_eq! (OrderBookPallet :: < T > :: order_books(order_book_id), None)
                ;
            }) ;
'''
::::::::::::::::::::::::::::::::::::::::::::::::::
- $crate :: benchmarks_iter!
-             ({} {} { T : trading_pair :: Config + core :: fmt :: Debug } () () () ()
? ^^^^^^^^^^^^^

+ benchmarks_iter! { {} {} { T : trading_pair :: Config + core :: fmt :: Debug } () () () ()
? ^^^^^^^^^^^^^^^^^^^

              #[configs((x, y) = [(1, 2), (3, 4)])] delete_orderbook { let aboba = 1234 ; }
              :
              {
                  OrderBookPallet::<T>::delete_orderbook(RawOrigin::Root.into(),
                          order_book_id).unwrap();
              }
              verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
              {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
              verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
              {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
              verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
              {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
              verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
              {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
              verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
              {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
              verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
              {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
-             verify {} verify {} verify {} verify
?                                       ----------

+             verify {} verify {} verify
              {
                  assert_eq! (OrderBookPallet :: < T > :: order_books(order_book_id), None)
                  ;
-             }) ;
?              ^^^

+             } }
?              ^^

====================================================================================================
Diff from
'''
benchmarks_iter! { {} {} { T : trading_pair :: Config + core :: fmt :: Debug } () () () ()
            #[configs((x, y) = [(1, 2), (3, 4)])] delete_orderbook { let aboba = 1234 ; }
            :
            {
                OrderBookPallet::<T>::delete_orderbook(RawOrigin::Root.into(),
                        order_book_id).unwrap();
            }
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify
            {
                assert_eq! (OrderBookPallet :: < T > :: order_books(order_book_id), None)
                ;
            } }
'''
to
'''
$crate :: benchmarks_iter!
            ({} {} { T : trading_pair :: Config + core :: fmt :: Debug } () () () ()
            #[configs((x, y) = [(1, 2), (3, 4)])] delete_orderbook { let aboba = 1234 ; }
            :
            {
                OrderBookPallet::<T>::delete_orderbook(RawOrigin::Root.into(),
                        order_book_id).unwrap();
            }
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify
            {
                assert_eq! (OrderBookPallet :: < T > :: order_books(order_book_id), None)
                ;
            }) ;
'''
::::::::::::::::::::::::::::::::::::::::::::::::::
- $crate :: benchmarks_iter!
-             ({} {} { T : trading_pair :: Config + core :: fmt :: Debug } () () () ()
? ^^^^^^^^^^^^^

+ benchmarks_iter! { {} {} { T : trading_pair :: Config + core :: fmt :: Debug } () () () ()
? ^^^^^^^^^^^^^^^^^^^

              #[configs((x, y) = [(1, 2), (3, 4)])] delete_orderbook { let aboba = 1234 ; }
              :
              {
                  OrderBookPallet::<T>::delete_orderbook(RawOrigin::Root.into(),
                          order_book_id).unwrap();
              }
              verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
              {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
              verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
              {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
              verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
              {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
              verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
              {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
              verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
              {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
              verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
              {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
-             verify {} verify {} verify {} verify {} verify
?                                                 ----------

+             verify {} verify {} verify {} verify
              {
                  assert_eq! (OrderBookPallet :: < T > :: order_books(order_book_id), None)
                  ;
-             }) ;
?              ^^^

+             } }
?              ^^

====================================================================================================
Diff from
'''
benchmarks_iter! { {} {} { T : trading_pair :: Config + core :: fmt :: Debug } () () () ()
            #[configs((x, y) = [(1, 2), (3, 4)])] delete_orderbook { let aboba = 1234 ; }
            :
            {
                OrderBookPallet::<T>::delete_orderbook(RawOrigin::Root.into(),
                        order_book_id).unwrap();
            }
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify
            {
                assert_eq! (OrderBookPallet :: < T > :: order_books(order_book_id), None)
                ;
            } }
'''
to
'''
$crate :: benchmarks_iter!
            ({} {} { T : trading_pair :: Config + core :: fmt :: Debug } () () () ()
            #[configs((x, y) = [(1, 2), (3, 4)])] delete_orderbook { let aboba = 1234 ; }
            :
            {
                OrderBookPallet::<T>::delete_orderbook(RawOrigin::Root.into(),
                        order_book_id).unwrap();
            }
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify
            {
                assert_eq! (OrderBookPallet :: < T > :: order_books(order_book_id), None)
                ;
            }) ;
'''
::::::::::::::::::::::::::::::::::::::::::::::::::
- $crate :: benchmarks_iter!
-             ({} {} { T : trading_pair :: Config + core :: fmt :: Debug } () () () ()
? ^^^^^^^^^^^^^

+ benchmarks_iter! { {} {} { T : trading_pair :: Config + core :: fmt :: Debug } () () () ()
? ^^^^^^^^^^^^^^^^^^^

              #[configs((x, y) = [(1, 2), (3, 4)])] delete_orderbook { let aboba = 1234 ; }
              :
              {
                  OrderBookPallet::<T>::delete_orderbook(RawOrigin::Root.into(),
                          order_book_id).unwrap();
              }
              verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
              {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
              verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
              {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
              verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
              {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
              verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
              {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
              verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
              {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
              verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
              {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
-             verify {} verify {} verify {} verify {} verify {} verify
?                                                           ----------

+             verify {} verify {} verify {} verify {} verify
              {
                  assert_eq! (OrderBookPallet :: < T > :: order_books(order_book_id), None)
                  ;
-             }) ;
?              ^^^

+             } }
?              ^^

====================================================================================================
Diff from
'''
benchmarks_iter! { {} {} { T : trading_pair :: Config + core :: fmt :: Debug } () () () ()
            #[configs((x, y) = [(1, 2), (3, 4)])] delete_orderbook { let aboba = 1234 ; }
            :
            {
                OrderBookPallet::<T>::delete_orderbook(RawOrigin::Root.into(),
                        order_book_id).unwrap();
            }
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify
            {
                assert_eq! (OrderBookPallet :: < T > :: order_books(order_book_id), None)
                ;
            } }
'''
to
'''
$crate :: benchmarks_iter!
            ({} {} { T : trading_pair :: Config + core :: fmt :: Debug } () () () ()
            #[configs((x, y) = [(1, 2), (3, 4)])] delete_orderbook { let aboba = 1234 ; }
            :
            {
                OrderBookPallet::<T>::delete_orderbook(RawOrigin::Root.into(),
                        order_book_id).unwrap();
            }
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify
            {
                assert_eq! (OrderBookPallet :: < T > :: order_books(order_book_id), None)
                ;
            }) ;
'''
::::::::::::::::::::::::::::::::::::::::::::::::::
- $crate :: benchmarks_iter!
-             ({} {} { T : trading_pair :: Config + core :: fmt :: Debug } () () () ()
? ^^^^^^^^^^^^^

+ benchmarks_iter! { {} {} { T : trading_pair :: Config + core :: fmt :: Debug } () () () ()
? ^^^^^^^^^^^^^^^^^^^

              #[configs((x, y) = [(1, 2), (3, 4)])] delete_orderbook { let aboba = 1234 ; }
              :
              {
                  OrderBookPallet::<T>::delete_orderbook(RawOrigin::Root.into(),
                          order_book_id).unwrap();
              }
              verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
              {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
              verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
              {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
              verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
              {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
              verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
              {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
              verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
              {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
              verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
              {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
-             verify {} verify {} verify {} verify {} verify {} verify {} verify
?                                                                     ----------

+             verify {} verify {} verify {} verify {} verify {} verify
              {
                  assert_eq! (OrderBookPallet :: < T > :: order_books(order_book_id), None)
                  ;
-             }) ;
?              ^^^

+             } }
?              ^^

====================================================================================================
Diff from
'''
benchmarks_iter! { {} {} { T : trading_pair :: Config + core :: fmt :: Debug } () () () ()
            #[configs((x, y) = [(1, 2), (3, 4)])] delete_orderbook { let aboba = 1234 ; }
            :
            {
                OrderBookPallet::<T>::delete_orderbook(RawOrigin::Root.into(),
                        order_book_id).unwrap();
            }
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify
            {
                assert_eq! (OrderBookPallet :: < T > :: order_books(order_book_id), None)
                ;
            } }
'''
to
'''
$crate :: benchmarks_iter!
            ({} {} { T : trading_pair :: Config + core :: fmt :: Debug } () () () ()
            #[configs((x, y) = [(1, 2), (3, 4)])] delete_orderbook { let aboba = 1234 ; }
            :
            {
                OrderBookPallet::<T>::delete_orderbook(RawOrigin::Root.into(),
                        order_book_id).unwrap();
            }
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {
                assert_eq! (OrderBookPallet :: < T > :: order_books(order_book_id), None)
                ;
            }) ;
'''
::::::::::::::::::::::::::::::::::::::::::::::::::
- $crate :: benchmarks_iter!
-             ({} {} { T : trading_pair :: Config + core :: fmt :: Debug } () () () ()
? ^^^^^^^^^^^^^

+ benchmarks_iter! { {} {} { T : trading_pair :: Config + core :: fmt :: Debug } () () () ()
? ^^^^^^^^^^^^^^^^^^^

              #[configs((x, y) = [(1, 2), (3, 4)])] delete_orderbook { let aboba = 1234 ; }
              :
              {
                  OrderBookPallet::<T>::delete_orderbook(RawOrigin::Root.into(),
                          order_book_id).unwrap();
              }
              verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
              {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
              verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
              {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
              verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
              {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
              verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
              {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
              verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
              {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
              verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
              {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
-             verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
?                                                                               ----------

+             verify {} verify {} verify {} verify {} verify {} verify {} verify
              {
                  assert_eq! (OrderBookPallet :: < T > :: order_books(order_book_id), None)
                  ;
-             }) ;
?              ^^^

+             } }
?              ^^

====================================================================================================
Diff from
'''
benchmarks_iter! { {} {} { T : trading_pair :: Config + core :: fmt :: Debug } () () () ()
            #[configs((x, y) = [(1, 2), (3, 4)])] delete_orderbook { let aboba = 1234 ; }
            :
            {
                OrderBookPallet::<T>::delete_orderbook(RawOrigin::Root.into(),
                        order_book_id).unwrap();
            }
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {
                assert_eq! (OrderBookPallet :: < T > :: order_books(order_book_id), None)
                ;
            } }
'''
to
'''
$crate :: benchmarks_iter!
            ({} {} { T : trading_pair :: Config + core :: fmt :: Debug } () () () ()
            #[configs((x, y) = [(1, 2), (3, 4)])] delete_orderbook { let aboba = 1234 ; }
            :
            {
                OrderBookPallet::<T>::delete_orderbook(RawOrigin::Root.into(),
                        order_book_id).unwrap();
            }
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify
            {
                assert_eq! (OrderBookPallet :: < T > :: order_books(order_book_id), None)
                ;
            }) ;
'''
::::::::::::::::::::::::::::::::::::::::::::::::::
- $crate :: benchmarks_iter!
-             ({} {} { T : trading_pair :: Config + core :: fmt :: Debug } () () () ()
? ^^^^^^^^^^^^^

+ benchmarks_iter! { {} {} { T : trading_pair :: Config + core :: fmt :: Debug } () () () ()
? ^^^^^^^^^^^^^^^^^^^

              #[configs((x, y) = [(1, 2), (3, 4)])] delete_orderbook { let aboba = 1234 ; }
              :
              {
                  OrderBookPallet::<T>::delete_orderbook(RawOrigin::Root.into(),
                          order_book_id).unwrap();
              }
              verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
              {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
              verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
              {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
              verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
              {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
              verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
              {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
              verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
              {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
              verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
              {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
              verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
-             {} verify
              {
                  assert_eq! (OrderBookPallet :: < T > :: order_books(order_book_id), None)
                  ;
-             }) ;
?              ^^^

+             } }
?              ^^

====================================================================================================
Diff from
'''
benchmarks_iter! { {} {} { T : trading_pair :: Config + core :: fmt :: Debug } () () () ()
            #[configs((x, y) = [(1, 2), (3, 4)])] delete_orderbook { let aboba = 1234 ; }
            :
            {
                OrderBookPallet::<T>::delete_orderbook(RawOrigin::Root.into(),
                        order_book_id).unwrap();
            }
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify
            {
                assert_eq! (OrderBookPallet :: < T > :: order_books(order_book_id), None)
                ;
            } }
'''
to
'''
$crate :: benchmarks_iter!
            ({} {} { T : trading_pair :: Config + core :: fmt :: Debug } () () () ()
            #[configs((x, y) = [(1, 2), (3, 4)])] delete_orderbook { let aboba = 1234 ; }
            :
            {
                OrderBookPallet::<T>::delete_orderbook(RawOrigin::Root.into(),
                        order_book_id).unwrap();
            }
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify
            {
                assert_eq! (OrderBookPallet :: < T > :: order_books(order_book_id), None)
                ;
            }) ;
'''
::::::::::::::::::::::::::::::::::::::::::::::::::
- $crate :: benchmarks_iter!
-             ({} {} { T : trading_pair :: Config + core :: fmt :: Debug } () () () ()
? ^^^^^^^^^^^^^

+ benchmarks_iter! { {} {} { T : trading_pair :: Config + core :: fmt :: Debug } () () () ()
? ^^^^^^^^^^^^^^^^^^^

              #[configs((x, y) = [(1, 2), (3, 4)])] delete_orderbook { let aboba = 1234 ; }
              :
              {
                  OrderBookPallet::<T>::delete_orderbook(RawOrigin::Root.into(),
                          order_book_id).unwrap();
              }
              verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
              {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
              verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
              {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
              verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
              {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
              verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
              {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
              verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
              {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
              verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
              {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
              verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
-             {} verify {} verify
?                      ----------

+             {} verify
              {
                  assert_eq! (OrderBookPallet :: < T > :: order_books(order_book_id), None)
                  ;
-             }) ;
?              ^^^

+             } }
?              ^^

====================================================================================================
Diff from
'''
benchmarks_iter! { {} {} { T : trading_pair :: Config + core :: fmt :: Debug } () () () ()
            #[configs((x, y) = [(1, 2), (3, 4)])] delete_orderbook { let aboba = 1234 ; }
            :
            {
                OrderBookPallet::<T>::delete_orderbook(RawOrigin::Root.into(),
                        order_book_id).unwrap();
            }
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify
            {
                assert_eq! (OrderBookPallet :: < T > :: order_books(order_book_id), None)
                ;
            } }
'''
to
'''
$crate :: benchmarks_iter!
            ({} {} { T : trading_pair :: Config + core :: fmt :: Debug } () () () ()
            #[configs((x, y) = [(1, 2), (3, 4)])] delete_orderbook { let aboba = 1234 ; }
            :
            {
                OrderBookPallet::<T>::delete_orderbook(RawOrigin::Root.into(),
                        order_book_id).unwrap();
            }
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify
            {
                assert_eq! (OrderBookPallet :: < T > :: order_books(order_book_id), None)
                ;
            }) ;
'''
::::::::::::::::::::::::::::::::::::::::::::::::::
- $crate :: benchmarks_iter!
-             ({} {} { T : trading_pair :: Config + core :: fmt :: Debug } () () () ()
? ^^^^^^^^^^^^^

+ benchmarks_iter! { {} {} { T : trading_pair :: Config + core :: fmt :: Debug } () () () ()
? ^^^^^^^^^^^^^^^^^^^

              #[configs((x, y) = [(1, 2), (3, 4)])] delete_orderbook { let aboba = 1234 ; }
              :
              {
                  OrderBookPallet::<T>::delete_orderbook(RawOrigin::Root.into(),
                          order_book_id).unwrap();
              }
              verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
              {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
              verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
              {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
              verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
              {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
              verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
              {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
              verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
              {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
              verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
              {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
              verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
-             {} verify {} verify {} verify
?                                ----------

+             {} verify {} verify
              {
                  assert_eq! (OrderBookPallet :: < T > :: order_books(order_book_id), None)
                  ;
-             }) ;
?              ^^^

+             } }
?              ^^

====================================================================================================
Diff from
'''
benchmarks_iter! { {} {} { T : trading_pair :: Config + core :: fmt :: Debug } () () () ()
            #[configs((x, y) = [(1, 2), (3, 4)])] delete_orderbook { let aboba = 1234 ; }
            :
            {
                OrderBookPallet::<T>::delete_orderbook(RawOrigin::Root.into(),
                        order_book_id).unwrap();
            }
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify
            {
                assert_eq! (OrderBookPallet :: < T > :: order_books(order_book_id), None)
                ;
            } }
'''
to
'''
$crate :: benchmarks_iter!
            ({} {} { T : trading_pair :: Config + core :: fmt :: Debug } () () () ()
            #[configs((x, y) = [(1, 2), (3, 4)])] delete_orderbook { let aboba = 1234 ; }
            :
            {
                OrderBookPallet::<T>::delete_orderbook(RawOrigin::Root.into(),
                        order_book_id).unwrap();
            }
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify
            {
                assert_eq! (OrderBookPallet :: < T > :: order_books(order_book_id), None)
                ;
            }) ;
'''
::::::::::::::::::::::::::::::::::::::::::::::::::
- $crate :: benchmarks_iter!
-             ({} {} { T : trading_pair :: Config + core :: fmt :: Debug } () () () ()
? ^^^^^^^^^^^^^

+ benchmarks_iter! { {} {} { T : trading_pair :: Config + core :: fmt :: Debug } () () () ()
? ^^^^^^^^^^^^^^^^^^^

              #[configs((x, y) = [(1, 2), (3, 4)])] delete_orderbook { let aboba = 1234 ; }
              :
              {
                  OrderBookPallet::<T>::delete_orderbook(RawOrigin::Root.into(),
                          order_book_id).unwrap();
              }
              verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
              {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
              verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
              {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
              verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
              {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
              verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
              {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
              verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
              {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
              verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
              {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
              verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
-             {} verify {} verify {} verify {} verify
?                                          ----------

+             {} verify {} verify {} verify
              {
                  assert_eq! (OrderBookPallet :: < T > :: order_books(order_book_id), None)
                  ;
-             }) ;
?              ^^^

+             } }
?              ^^

====================================================================================================
Diff from
'''
benchmarks_iter! { {} {} { T : trading_pair :: Config + core :: fmt :: Debug } () () () ()
            #[configs((x, y) = [(1, 2), (3, 4)])] delete_orderbook { let aboba = 1234 ; }
            :
            {
                OrderBookPallet::<T>::delete_orderbook(RawOrigin::Root.into(),
                        order_book_id).unwrap();
            }
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify
            {
                assert_eq! (OrderBookPallet :: < T > :: order_books(order_book_id), None)
                ;
            } }
'''
to
'''
$crate :: benchmarks_iter!
            ({} {} { T : trading_pair :: Config + core :: fmt :: Debug } () () () ()
            #[configs((x, y) = [(1, 2), (3, 4)])] delete_orderbook { let aboba = 1234 ; }
            :
            {
                OrderBookPallet::<T>::delete_orderbook(RawOrigin::Root.into(),
                        order_book_id).unwrap();
            }
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify
            {
                assert_eq! (OrderBookPallet :: < T > :: order_books(order_book_id), None)
                ;
            }) ;
'''
::::::::::::::::::::::::::::::::::::::::::::::::::
- $crate :: benchmarks_iter!
-             ({} {} { T : trading_pair :: Config + core :: fmt :: Debug } () () () ()
? ^^^^^^^^^^^^^

+ benchmarks_iter! { {} {} { T : trading_pair :: Config + core :: fmt :: Debug } () () () ()
? ^^^^^^^^^^^^^^^^^^^

              #[configs((x, y) = [(1, 2), (3, 4)])] delete_orderbook { let aboba = 1234 ; }
              :
              {
                  OrderBookPallet::<T>::delete_orderbook(RawOrigin::Root.into(),
                          order_book_id).unwrap();
              }
              verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
              {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
              verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
              {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
              verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
              {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
              verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
              {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
              verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
              {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
              verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
              {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
              verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
-             {} verify {} verify {} verify {} verify {} verify
?                                                    ----------

+             {} verify {} verify {} verify {} verify
              {
                  assert_eq! (OrderBookPallet :: < T > :: order_books(order_book_id), None)
                  ;
-             }) ;
?              ^^^

+             } }
?              ^^

====================================================================================================
Diff from
'''
benchmarks_iter! { {} {} { T : trading_pair :: Config + core :: fmt :: Debug } () () () ()
            #[configs((x, y) = [(1, 2), (3, 4)])] delete_orderbook { let aboba = 1234 ; }
            :
            {
                OrderBookPallet::<T>::delete_orderbook(RawOrigin::Root.into(),
                        order_book_id).unwrap();
            }
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify
            {
                assert_eq! (OrderBookPallet :: < T > :: order_books(order_book_id), None)
                ;
            } }
'''
to
'''
$crate :: benchmarks_iter!
            ({} {} { T : trading_pair :: Config + core :: fmt :: Debug } () () () ()
            #[configs((x, y) = [(1, 2), (3, 4)])] delete_orderbook { let aboba = 1234 ; }
            :
            {
                OrderBookPallet::<T>::delete_orderbook(RawOrigin::Root.into(),
                        order_book_id).unwrap();
            }
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify
            {
                assert_eq! (OrderBookPallet :: < T > :: order_books(order_book_id), None)
                ;
            }) ;
'''
::::::::::::::::::::::::::::::::::::::::::::::::::
- $crate :: benchmarks_iter!
-             ({} {} { T : trading_pair :: Config + core :: fmt :: Debug } () () () ()
? ^^^^^^^^^^^^^

+ benchmarks_iter! { {} {} { T : trading_pair :: Config + core :: fmt :: Debug } () () () ()
? ^^^^^^^^^^^^^^^^^^^

              #[configs((x, y) = [(1, 2), (3, 4)])] delete_orderbook { let aboba = 1234 ; }
              :
              {
                  OrderBookPallet::<T>::delete_orderbook(RawOrigin::Root.into(),
                          order_book_id).unwrap();
              }
              verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
              {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
              verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
              {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
              verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
              {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
              verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
              {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
              verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
              {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
              verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
              {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
              verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
-             {} verify {} verify {} verify {} verify {} verify {} verify
?                                                              ----------

+             {} verify {} verify {} verify {} verify {} verify
              {
                  assert_eq! (OrderBookPallet :: < T > :: order_books(order_book_id), None)
                  ;
-             }) ;
?              ^^^

+             } }
?              ^^

====================================================================================================
Diff from
'''
benchmarks_iter! { {} {} { T : trading_pair :: Config + core :: fmt :: Debug } () () () ()
            #[configs((x, y) = [(1, 2), (3, 4)])] delete_orderbook { let aboba = 1234 ; }
            :
            {
                OrderBookPallet::<T>::delete_orderbook(RawOrigin::Root.into(),
                        order_book_id).unwrap();
            }
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify
            {
                assert_eq! (OrderBookPallet :: < T > :: order_books(order_book_id), None)
                ;
            } }
'''
to
'''
$crate :: benchmarks_iter!
            ({} {} { T : trading_pair :: Config + core :: fmt :: Debug } () () () ()
            #[configs((x, y) = [(1, 2), (3, 4)])] delete_orderbook { let aboba = 1234 ; }
            :
            {
                OrderBookPallet::<T>::delete_orderbook(RawOrigin::Root.into(),
                        order_book_id).unwrap();
            }
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {
                assert_eq! (OrderBookPallet :: < T > :: order_books(order_book_id), None)
                ;
            }) ;
'''
::::::::::::::::::::::::::::::::::::::::::::::::::
- $crate :: benchmarks_iter!
-             ({} {} { T : trading_pair :: Config + core :: fmt :: Debug } () () () ()
? ^^^^^^^^^^^^^

+ benchmarks_iter! { {} {} { T : trading_pair :: Config + core :: fmt :: Debug } () () () ()
? ^^^^^^^^^^^^^^^^^^^

              #[configs((x, y) = [(1, 2), (3, 4)])] delete_orderbook { let aboba = 1234 ; }
              :
              {
                  OrderBookPallet::<T>::delete_orderbook(RawOrigin::Root.into(),
                          order_book_id).unwrap();
              }
              verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
              {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
              verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
              {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
              verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
              {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
              verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
              {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
              verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
              {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
              verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
              {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
              verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
-             {} verify {} verify {} verify {} verify {} verify {} verify {} verify
?                                                                        ----------

+             {} verify {} verify {} verify {} verify {} verify {} verify
              {
                  assert_eq! (OrderBookPallet :: < T > :: order_books(order_book_id), None)
                  ;
-             }) ;
?              ^^^

+             } }
?              ^^

====================================================================================================
Diff from
'''
benchmarks_iter! { {} {} { T : trading_pair :: Config + core :: fmt :: Debug } () () () ()
            #[configs((x, y) = [(1, 2), (3, 4)])] delete_orderbook { let aboba = 1234 ; }
            :
            {
                OrderBookPallet::<T>::delete_orderbook(RawOrigin::Root.into(),
                        order_book_id).unwrap();
            }
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {
                assert_eq! (OrderBookPallet :: < T > :: order_books(order_book_id), None)
                ;
            } }
'''
to
'''
$crate :: benchmarks_iter!
            ({} {} { T : trading_pair :: Config + core :: fmt :: Debug } () () () ()
            #[configs((x, y) = [(1, 2), (3, 4)])] delete_orderbook { let aboba = 1234 ; }
            :
            {
                OrderBookPallet::<T>::delete_orderbook(RawOrigin::Root.into(),
                        order_book_id).unwrap();
            }
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify
            {
                assert_eq! (OrderBookPallet :: < T > :: order_books(order_book_id), None)
                ;
            }) ;
'''
::::::::::::::::::::::::::::::::::::::::::::::::::
- $crate :: benchmarks_iter!
-             ({} {} { T : trading_pair :: Config + core :: fmt :: Debug } () () () ()
? ^^^^^^^^^^^^^

+ benchmarks_iter! { {} {} { T : trading_pair :: Config + core :: fmt :: Debug } () () () ()
? ^^^^^^^^^^^^^^^^^^^

              #[configs((x, y) = [(1, 2), (3, 4)])] delete_orderbook { let aboba = 1234 ; }
              :
              {
                  OrderBookPallet::<T>::delete_orderbook(RawOrigin::Root.into(),
                          order_book_id).unwrap();
              }
              verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
              {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
              verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
              {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
              verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
              {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
              verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
              {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
              verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
              {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
              verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
              {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
              verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
-             {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
?                                                                                  ---

+             {} verify {} verify {} verify {} verify {} verify {} verify {} verify
-             verify
              {
                  assert_eq! (OrderBookPallet :: < T > :: order_books(order_book_id), None)
                  ;
-             }) ;
?              ^^^

+             } }
?              ^^

====================================================================================================
Diff from
'''
benchmarks_iter! { {} {} { T : trading_pair :: Config + core :: fmt :: Debug } () () () ()
            #[configs((x, y) = [(1, 2), (3, 4)])] delete_orderbook { let aboba = 1234 ; }
            :
            {
                OrderBookPallet::<T>::delete_orderbook(RawOrigin::Root.into(),
                        order_book_id).unwrap();
            }
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify
            {
                assert_eq! (OrderBookPallet :: < T > :: order_books(order_book_id), None)
                ;
            } }
'''
to
'''
$crate :: benchmarks_iter!
            ({} {} { T : trading_pair :: Config + core :: fmt :: Debug } () () () ()
            #[configs((x, y) = [(1, 2), (3, 4)])] delete_orderbook { let aboba = 1234 ; }
            :
            {
                OrderBookPallet::<T>::delete_orderbook(RawOrigin::Root.into(),
                        order_book_id).unwrap();
            }
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify
            {
                assert_eq! (OrderBookPallet :: < T > :: order_books(order_book_id), None)
                ;
            }) ;
'''
::::::::::::::::::::::::::::::::::::::::::::::::::
- $crate :: benchmarks_iter!
-             ({} {} { T : trading_pair :: Config + core :: fmt :: Debug } () () () ()
? ^^^^^^^^^^^^^

+ benchmarks_iter! { {} {} { T : trading_pair :: Config + core :: fmt :: Debug } () () () ()
? ^^^^^^^^^^^^^^^^^^^

              #[configs((x, y) = [(1, 2), (3, 4)])] delete_orderbook { let aboba = 1234 ; }
              :
              {
                  OrderBookPallet::<T>::delete_orderbook(RawOrigin::Root.into(),
                          order_book_id).unwrap();
              }
              verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
              {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
              verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
              {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
              verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
              {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
              verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
              {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
              verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
              {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
              verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
              {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
              verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
              {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
-             verify {} verify
?                   ----------

+             verify
              {
                  assert_eq! (OrderBookPallet :: < T > :: order_books(order_book_id), None)
                  ;
-             }) ;
?              ^^^

+             } }
?              ^^

====================================================================================================
Diff from
'''
benchmarks_iter! { {} {} { T : trading_pair :: Config + core :: fmt :: Debug } () () () ()
            #[configs((x, y) = [(1, 2), (3, 4)])] delete_orderbook { let aboba = 1234 ; }
            :
            {
                OrderBookPallet::<T>::delete_orderbook(RawOrigin::Root.into(),
                        order_book_id).unwrap();
            }
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify
            {
                assert_eq! (OrderBookPallet :: < T > :: order_books(order_book_id), None)
                ;
            } }
'''
to
'''
$crate :: benchmarks_iter!
            ({} {} { T : trading_pair :: Config + core :: fmt :: Debug } () () () ()
            #[configs((x, y) = [(1, 2), (3, 4)])] delete_orderbook { let aboba = 1234 ; }
            :
            {
                OrderBookPallet::<T>::delete_orderbook(RawOrigin::Root.into(),
                        order_book_id).unwrap();
            }
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify
            {
                assert_eq! (OrderBookPallet :: < T > :: order_books(order_book_id), None)
                ;
            }) ;
'''
::::::::::::::::::::::::::::::::::::::::::::::::::
- $crate :: benchmarks_iter!
-             ({} {} { T : trading_pair :: Config + core :: fmt :: Debug } () () () ()
? ^^^^^^^^^^^^^

+ benchmarks_iter! { {} {} { T : trading_pair :: Config + core :: fmt :: Debug } () () () ()
? ^^^^^^^^^^^^^^^^^^^

              #[configs((x, y) = [(1, 2), (3, 4)])] delete_orderbook { let aboba = 1234 ; }
              :
              {
                  OrderBookPallet::<T>::delete_orderbook(RawOrigin::Root.into(),
                          order_book_id).unwrap();
              }
              verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
              {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
              verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
              {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
              verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
              {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
              verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
              {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
              verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
              {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
              verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
              {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
              verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
              {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
-             verify {} verify {} verify
?                             ----------

+             verify {} verify
              {
                  assert_eq! (OrderBookPallet :: < T > :: order_books(order_book_id), None)
                  ;
-             }) ;
?              ^^^

+             } }
?              ^^

====================================================================================================
Diff from
'''
benchmarks_iter! { {} {} { T : trading_pair :: Config + core :: fmt :: Debug } () () () ()
            #[configs((x, y) = [(1, 2), (3, 4)])] delete_orderbook { let aboba = 1234 ; }
            :
            {
                OrderBookPallet::<T>::delete_orderbook(RawOrigin::Root.into(),
                        order_book_id).unwrap();
            }
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify
            {
                assert_eq! (OrderBookPallet :: < T > :: order_books(order_book_id), None)
                ;
            } }
'''
to
'''
$crate :: benchmarks_iter!
            ({} {} { T : trading_pair :: Config + core :: fmt :: Debug } () () () ()
            #[configs((x, y) = [(1, 2), (3, 4)])] delete_orderbook { let aboba = 1234 ; }
            :
            {
                OrderBookPallet::<T>::delete_orderbook(RawOrigin::Root.into(),
                        order_book_id).unwrap();
            }
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify
            {
                assert_eq! (OrderBookPallet :: < T > :: order_books(order_book_id), None)
                ;
            }) ;
'''
::::::::::::::::::::::::::::::::::::::::::::::::::
- $crate :: benchmarks_iter!
-             ({} {} { T : trading_pair :: Config + core :: fmt :: Debug } () () () ()
? ^^^^^^^^^^^^^

+ benchmarks_iter! { {} {} { T : trading_pair :: Config + core :: fmt :: Debug } () () () ()
? ^^^^^^^^^^^^^^^^^^^

              #[configs((x, y) = [(1, 2), (3, 4)])] delete_orderbook { let aboba = 1234 ; }
              :
              {
                  OrderBookPallet::<T>::delete_orderbook(RawOrigin::Root.into(),
                          order_book_id).unwrap();
              }
              verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
              {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
              verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
              {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
              verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
              {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
              verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
              {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
              verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
              {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
              verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
              {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
              verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
              {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
-             verify {} verify {} verify {} verify
?                                       ----------

+             verify {} verify {} verify
              {
                  assert_eq! (OrderBookPallet :: < T > :: order_books(order_book_id), None)
                  ;
-             }) ;
?              ^^^

+             } }
?              ^^

====================================================================================================
Diff from
'''
benchmarks_iter! { {} {} { T : trading_pair :: Config + core :: fmt :: Debug } () () () ()
            #[configs((x, y) = [(1, 2), (3, 4)])] delete_orderbook { let aboba = 1234 ; }
            :
            {
                OrderBookPallet::<T>::delete_orderbook(RawOrigin::Root.into(),
                        order_book_id).unwrap();
            }
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify
            {
                assert_eq! (OrderBookPallet :: < T > :: order_books(order_book_id), None)
                ;
            } }
'''
to
'''
$crate :: benchmarks_iter!
            ({} {} { T : trading_pair :: Config + core :: fmt :: Debug } () () () ()
            #[configs((x, y) = [(1, 2), (3, 4)])] delete_orderbook { let aboba = 1234 ; }
            :
            {
                OrderBookPallet::<T>::delete_orderbook(RawOrigin::Root.into(),
                        order_book_id).unwrap();
            }
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify
            {
                assert_eq! (OrderBookPallet :: < T > :: order_books(order_book_id), None)
                ;
            }) ;
'''
::::::::::::::::::::::::::::::::::::::::::::::::::
- $crate :: benchmarks_iter!
-             ({} {} { T : trading_pair :: Config + core :: fmt :: Debug } () () () ()
? ^^^^^^^^^^^^^

+ benchmarks_iter! { {} {} { T : trading_pair :: Config + core :: fmt :: Debug } () () () ()
? ^^^^^^^^^^^^^^^^^^^

              #[configs((x, y) = [(1, 2), (3, 4)])] delete_orderbook { let aboba = 1234 ; }
              :
              {
                  OrderBookPallet::<T>::delete_orderbook(RawOrigin::Root.into(),
                          order_book_id).unwrap();
              }
              verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
              {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
              verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
              {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
              verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
              {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
              verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
              {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
              verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
              {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
              verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
              {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
              verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
              {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
-             verify {} verify {} verify {} verify {} verify
?                                                 ----------

+             verify {} verify {} verify {} verify
              {
                  assert_eq! (OrderBookPallet :: < T > :: order_books(order_book_id), None)
                  ;
-             }) ;
?              ^^^

+             } }
?              ^^

====================================================================================================
Diff from
'''
benchmarks_iter! { {} {} { T : trading_pair :: Config + core :: fmt :: Debug } () () () ()
            #[configs((x, y) = [(1, 2), (3, 4)])] delete_orderbook { let aboba = 1234 ; }
            :
            {
                OrderBookPallet::<T>::delete_orderbook(RawOrigin::Root.into(),
                        order_book_id).unwrap();
            }
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify
            {
                assert_eq! (OrderBookPallet :: < T > :: order_books(order_book_id), None)
                ;
            } }
'''
to
'''
$crate :: benchmarks_iter!
            ({} {} { T : trading_pair :: Config + core :: fmt :: Debug } () () () ()
            #[configs((x, y) = [(1, 2), (3, 4)])] delete_orderbook { let aboba = 1234 ; }
            :
            {
                OrderBookPallet::<T>::delete_orderbook(RawOrigin::Root.into(),
                        order_book_id).unwrap();
            }
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify
            {
                assert_eq! (OrderBookPallet :: < T > :: order_books(order_book_id), None)
                ;
            }) ;
'''
::::::::::::::::::::::::::::::::::::::::::::::::::
- $crate :: benchmarks_iter!
-             ({} {} { T : trading_pair :: Config + core :: fmt :: Debug } () () () ()
? ^^^^^^^^^^^^^

+ benchmarks_iter! { {} {} { T : trading_pair :: Config + core :: fmt :: Debug } () () () ()
? ^^^^^^^^^^^^^^^^^^^

              #[configs((x, y) = [(1, 2), (3, 4)])] delete_orderbook { let aboba = 1234 ; }
              :
              {
                  OrderBookPallet::<T>::delete_orderbook(RawOrigin::Root.into(),
                          order_book_id).unwrap();
              }
              verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
              {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
              verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
              {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
              verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
              {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
              verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
              {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
              verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
              {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
              verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
              {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
              verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
              {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
-             verify {} verify {} verify {} verify {} verify {} verify
?                                                           ----------

+             verify {} verify {} verify {} verify {} verify
              {
                  assert_eq! (OrderBookPallet :: < T > :: order_books(order_book_id), None)
                  ;
-             }) ;
?              ^^^

+             } }
?              ^^

====================================================================================================
Diff from
'''
benchmarks_iter! { {} {} { T : trading_pair :: Config + core :: fmt :: Debug } () () () ()
            #[configs((x, y) = [(1, 2), (3, 4)])] delete_orderbook { let aboba = 1234 ; }
            :
            {
                OrderBookPallet::<T>::delete_orderbook(RawOrigin::Root.into(),
                        order_book_id).unwrap();
            }
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify
            {
                assert_eq! (OrderBookPallet :: < T > :: order_books(order_book_id), None)
                ;
            } }
'''
to
'''
$crate :: benchmarks_iter!
            ({} {} { T : trading_pair :: Config + core :: fmt :: Debug } () () () ()
            #[configs((x, y) = [(1, 2), (3, 4)])] delete_orderbook { let aboba = 1234 ; }
            :
            {
                OrderBookPallet::<T>::delete_orderbook(RawOrigin::Root.into(),
                        order_book_id).unwrap();
            }
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify
            {
                assert_eq! (OrderBookPallet :: < T > :: order_books(order_book_id), None)
                ;
            }) ;
'''
::::::::::::::::::::::::::::::::::::::::::::::::::
- $crate :: benchmarks_iter!
-             ({} {} { T : trading_pair :: Config + core :: fmt :: Debug } () () () ()
? ^^^^^^^^^^^^^

+ benchmarks_iter! { {} {} { T : trading_pair :: Config + core :: fmt :: Debug } () () () ()
? ^^^^^^^^^^^^^^^^^^^

              #[configs((x, y) = [(1, 2), (3, 4)])] delete_orderbook { let aboba = 1234 ; }
              :
              {
                  OrderBookPallet::<T>::delete_orderbook(RawOrigin::Root.into(),
                          order_book_id).unwrap();
              }
              verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
              {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
              verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
              {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
              verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
              {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
              verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
              {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
              verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
              {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
              verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
              {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
              verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
              {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
-             verify {} verify {} verify {} verify {} verify {} verify {} verify
?                                                                     ----------

+             verify {} verify {} verify {} verify {} verify {} verify
              {
                  assert_eq! (OrderBookPallet :: < T > :: order_books(order_book_id), None)
                  ;
-             }) ;
?              ^^^

+             } }
?              ^^

====================================================================================================
Diff from
'''
benchmarks_iter! { {} {} { T : trading_pair :: Config + core :: fmt :: Debug } () () () ()
            #[configs((x, y) = [(1, 2), (3, 4)])] delete_orderbook { let aboba = 1234 ; }
            :
            {
                OrderBookPallet::<T>::delete_orderbook(RawOrigin::Root.into(),
                        order_book_id).unwrap();
            }
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify
            {
                assert_eq! (OrderBookPallet :: < T > :: order_books(order_book_id), None)
                ;
            } }
'''
to
'''
$crate :: benchmarks_iter!
            ({} {} { T : trading_pair :: Config + core :: fmt :: Debug } () () () ()
            #[configs((x, y) = [(1, 2), (3, 4)])] delete_orderbook { let aboba = 1234 ; }
            :
            {
                OrderBookPallet::<T>::delete_orderbook(RawOrigin::Root.into(),
                        order_book_id).unwrap();
            }
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {
                assert_eq! (OrderBookPallet :: < T > :: order_books(order_book_id), None)
                ;
            }) ;
'''
::::::::::::::::::::::::::::::::::::::::::::::::::
- $crate :: benchmarks_iter!
-             ({} {} { T : trading_pair :: Config + core :: fmt :: Debug } () () () ()
? ^^^^^^^^^^^^^

+ benchmarks_iter! { {} {} { T : trading_pair :: Config + core :: fmt :: Debug } () () () ()
? ^^^^^^^^^^^^^^^^^^^

              #[configs((x, y) = [(1, 2), (3, 4)])] delete_orderbook { let aboba = 1234 ; }
              :
              {
                  OrderBookPallet::<T>::delete_orderbook(RawOrigin::Root.into(),
                          order_book_id).unwrap();
              }
              verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
              {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
              verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
              {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
              verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
              {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
              verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
              {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
              verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
              {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
              verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
              {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
              verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
              {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
-             verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
?                                                                               ----------

+             verify {} verify {} verify {} verify {} verify {} verify {} verify
              {
                  assert_eq! (OrderBookPallet :: < T > :: order_books(order_book_id), None)
                  ;
-             }) ;
?              ^^^

+             } }
?              ^^

====================================================================================================
Diff from
'''
benchmarks_iter! { {} {} { T : trading_pair :: Config + core :: fmt :: Debug } () () () ()
            #[configs((x, y) = [(1, 2), (3, 4)])] delete_orderbook { let aboba = 1234 ; }
            :
            {
                OrderBookPallet::<T>::delete_orderbook(RawOrigin::Root.into(),
                        order_book_id).unwrap();
            }
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {
                assert_eq! (OrderBookPallet :: < T > :: order_books(order_book_id), None)
                ;
            } }
'''
to
'''
$crate :: benchmarks_iter!
            ({} {} { T : trading_pair :: Config + core :: fmt :: Debug } () () () ()
            #[configs((x, y) = [(1, 2), (3, 4)])] delete_orderbook { let aboba = 1234 ; }
            :
            {
                OrderBookPallet::<T>::delete_orderbook(RawOrigin::Root.into(),
                        order_book_id).unwrap();
            }
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify
            {
                assert_eq! (OrderBookPallet :: < T > :: order_books(order_book_id), None)
                ;
            }) ;
'''
::::::::::::::::::::::::::::::::::::::::::::::::::
- $crate :: benchmarks_iter!
-             ({} {} { T : trading_pair :: Config + core :: fmt :: Debug } () () () ()
? ^^^^^^^^^^^^^

+ benchmarks_iter! { {} {} { T : trading_pair :: Config + core :: fmt :: Debug } () () () ()
? ^^^^^^^^^^^^^^^^^^^

              #[configs((x, y) = [(1, 2), (3, 4)])] delete_orderbook { let aboba = 1234 ; }
              :
              {
                  OrderBookPallet::<T>::delete_orderbook(RawOrigin::Root.into(),
                          order_book_id).unwrap();
              }
              verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
              {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
              verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
              {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
              verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
              {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
              verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
              {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
              verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
              {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
              verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
              {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
              verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
              {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
              verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
-             {} verify
              {
                  assert_eq! (OrderBookPallet :: < T > :: order_books(order_book_id), None)
                  ;
-             }) ;
?              ^^^

+             } }
?              ^^

====================================================================================================
Diff from
'''
benchmarks_iter! { {} {} { T : trading_pair :: Config + core :: fmt :: Debug } () () () ()
            #[configs((x, y) = [(1, 2), (3, 4)])] delete_orderbook { let aboba = 1234 ; }
            :
            {
                OrderBookPallet::<T>::delete_orderbook(RawOrigin::Root.into(),
                        order_book_id).unwrap();
            }
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify
            {
                assert_eq! (OrderBookPallet :: < T > :: order_books(order_book_id), None)
                ;
            } }
'''
to
'''
$crate :: benchmarks_iter!
            ({} {} { T : trading_pair :: Config + core :: fmt :: Debug } () () () ()
            #[configs((x, y) = [(1, 2), (3, 4)])] delete_orderbook { let aboba = 1234 ; }
            :
            {
                OrderBookPallet::<T>::delete_orderbook(RawOrigin::Root.into(),
                        order_book_id).unwrap();
            }
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify
            {
                assert_eq! (OrderBookPallet :: < T > :: order_books(order_book_id), None)
                ;
            }) ;
'''
::::::::::::::::::::::::::::::::::::::::::::::::::
- $crate :: benchmarks_iter!
-             ({} {} { T : trading_pair :: Config + core :: fmt :: Debug } () () () ()
? ^^^^^^^^^^^^^

+ benchmarks_iter! { {} {} { T : trading_pair :: Config + core :: fmt :: Debug } () () () ()
? ^^^^^^^^^^^^^^^^^^^

              #[configs((x, y) = [(1, 2), (3, 4)])] delete_orderbook { let aboba = 1234 ; }
              :
              {
                  OrderBookPallet::<T>::delete_orderbook(RawOrigin::Root.into(),
                          order_book_id).unwrap();
              }
              verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
              {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
              verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
              {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
              verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
              {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
              verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
              {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
              verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
              {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
              verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
              {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
              verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
              {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
              verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
-             {} verify {} verify
?                      ----------

+             {} verify
              {
                  assert_eq! (OrderBookPallet :: < T > :: order_books(order_book_id), None)
                  ;
-             }) ;
?              ^^^

+             } }
?              ^^

====================================================================================================
Diff from
'''
benchmarks_iter! { {} {} { T : trading_pair :: Config + core :: fmt :: Debug } () () () ()
            #[configs((x, y) = [(1, 2), (3, 4)])] delete_orderbook { let aboba = 1234 ; }
            :
            {
                OrderBookPallet::<T>::delete_orderbook(RawOrigin::Root.into(),
                        order_book_id).unwrap();
            }
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify
            {
                assert_eq! (OrderBookPallet :: < T > :: order_books(order_book_id), None)
                ;
            } }
'''
to
'''
$crate :: benchmarks_iter!
            ({} {} { T : trading_pair :: Config + core :: fmt :: Debug } () () () ()
            #[configs((x, y) = [(1, 2), (3, 4)])] delete_orderbook { let aboba = 1234 ; }
            :
            {
                OrderBookPallet::<T>::delete_orderbook(RawOrigin::Root.into(),
                        order_book_id).unwrap();
            }
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify
            {
                assert_eq! (OrderBookPallet :: < T > :: order_books(order_book_id), None)
                ;
            }) ;
'''
::::::::::::::::::::::::::::::::::::::::::::::::::
- $crate :: benchmarks_iter!
-             ({} {} { T : trading_pair :: Config + core :: fmt :: Debug } () () () ()
? ^^^^^^^^^^^^^

+ benchmarks_iter! { {} {} { T : trading_pair :: Config + core :: fmt :: Debug } () () () ()
? ^^^^^^^^^^^^^^^^^^^

              #[configs((x, y) = [(1, 2), (3, 4)])] delete_orderbook { let aboba = 1234 ; }
              :
              {
                  OrderBookPallet::<T>::delete_orderbook(RawOrigin::Root.into(),
                          order_book_id).unwrap();
              }
              verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
              {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
              verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
              {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
              verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
              {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
              verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
              {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
              verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
              {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
              verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
              {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
              verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
              {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
              verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
-             {} verify {} verify {} verify
?                                ----------

+             {} verify {} verify
              {
                  assert_eq! (OrderBookPallet :: < T > :: order_books(order_book_id), None)
                  ;
-             }) ;
?              ^^^

+             } }
?              ^^

====================================================================================================
Diff from
'''
benchmarks_iter! { {} {} { T : trading_pair :: Config + core :: fmt :: Debug } () () () ()
            #[configs((x, y) = [(1, 2), (3, 4)])] delete_orderbook { let aboba = 1234 ; }
            :
            {
                OrderBookPallet::<T>::delete_orderbook(RawOrigin::Root.into(),
                        order_book_id).unwrap();
            }
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify
            {
                assert_eq! (OrderBookPallet :: < T > :: order_books(order_book_id), None)
                ;
            } }
'''
to
'''
$crate :: benchmarks_iter!
            ({} {} { T : trading_pair :: Config + core :: fmt :: Debug } () () () ()
            #[configs((x, y) = [(1, 2), (3, 4)])] delete_orderbook { let aboba = 1234 ; }
            :
            {
                OrderBookPallet::<T>::delete_orderbook(RawOrigin::Root.into(),
                        order_book_id).unwrap();
            }
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify
            {
                assert_eq! (OrderBookPallet :: < T > :: order_books(order_book_id), None)
                ;
            }) ;
'''
::::::::::::::::::::::::::::::::::::::::::::::::::
- $crate :: benchmarks_iter!
-             ({} {} { T : trading_pair :: Config + core :: fmt :: Debug } () () () ()
? ^^^^^^^^^^^^^

+ benchmarks_iter! { {} {} { T : trading_pair :: Config + core :: fmt :: Debug } () () () ()
? ^^^^^^^^^^^^^^^^^^^

              #[configs((x, y) = [(1, 2), (3, 4)])] delete_orderbook { let aboba = 1234 ; }
              :
              {
                  OrderBookPallet::<T>::delete_orderbook(RawOrigin::Root.into(),
                          order_book_id).unwrap();
              }
              verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
              {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
              verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
              {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
              verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
              {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
              verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
              {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
              verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
              {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
              verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
              {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
              verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
              {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
              verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
-             {} verify {} verify {} verify {} verify
?                                          ----------

+             {} verify {} verify {} verify
              {
                  assert_eq! (OrderBookPallet :: < T > :: order_books(order_book_id), None)
                  ;
-             }) ;
?              ^^^

+             } }
?              ^^

====================================================================================================
Diff from
'''
benchmarks_iter! { {} {} { T : trading_pair :: Config + core :: fmt :: Debug } () () () ()
            #[configs((x, y) = [(1, 2), (3, 4)])] delete_orderbook { let aboba = 1234 ; }
            :
            {
                OrderBookPallet::<T>::delete_orderbook(RawOrigin::Root.into(),
                        order_book_id).unwrap();
            }
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify
            {
                assert_eq! (OrderBookPallet :: < T > :: order_books(order_book_id), None)
                ;
            } }
'''
to
'''
$crate :: benchmarks_iter!
            ({} {} { T : trading_pair :: Config + core :: fmt :: Debug } () () () ()
            #[configs((x, y) = [(1, 2), (3, 4)])] delete_orderbook { let aboba = 1234 ; }
            :
            {
                OrderBookPallet::<T>::delete_orderbook(RawOrigin::Root.into(),
                        order_book_id).unwrap();
            }
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify
            {
                assert_eq! (OrderBookPallet :: < T > :: order_books(order_book_id), None)
                ;
            }) ;
'''
::::::::::::::::::::::::::::::::::::::::::::::::::
- $crate :: benchmarks_iter!
-             ({} {} { T : trading_pair :: Config + core :: fmt :: Debug } () () () ()
? ^^^^^^^^^^^^^

+ benchmarks_iter! { {} {} { T : trading_pair :: Config + core :: fmt :: Debug } () () () ()
? ^^^^^^^^^^^^^^^^^^^

              #[configs((x, y) = [(1, 2), (3, 4)])] delete_orderbook { let aboba = 1234 ; }
              :
              {
                  OrderBookPallet::<T>::delete_orderbook(RawOrigin::Root.into(),
                          order_book_id).unwrap();
              }
              verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
              {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
              verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
              {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
              verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
              {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
              verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
              {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
              verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
              {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
              verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
              {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
              verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
              {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
              verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
-             {} verify {} verify {} verify {} verify {} verify
?                                                    ----------

+             {} verify {} verify {} verify {} verify
              {
                  assert_eq! (OrderBookPallet :: < T > :: order_books(order_book_id), None)
                  ;
-             }) ;
?              ^^^

+             } }
?              ^^

====================================================================================================
Diff from
'''
benchmarks_iter! { {} {} { T : trading_pair :: Config + core :: fmt :: Debug } () () () ()
            #[configs((x, y) = [(1, 2), (3, 4)])] delete_orderbook { let aboba = 1234 ; }
            :
            {
                OrderBookPallet::<T>::delete_orderbook(RawOrigin::Root.into(),
                        order_book_id).unwrap();
            }
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify
            {
                assert_eq! (OrderBookPallet :: < T > :: order_books(order_book_id), None)
                ;
            } }
'''
to
'''
$crate :: benchmarks_iter!
            ({} {} { T : trading_pair :: Config + core :: fmt :: Debug } () () () ()
            #[configs((x, y) = [(1, 2), (3, 4)])] delete_orderbook { let aboba = 1234 ; }
            :
            {
                OrderBookPallet::<T>::delete_orderbook(RawOrigin::Root.into(),
                        order_book_id).unwrap();
            }
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify
            {
                assert_eq! (OrderBookPallet :: < T > :: order_books(order_book_id), None)
                ;
            }) ;
'''
::::::::::::::::::::::::::::::::::::::::::::::::::
- $crate :: benchmarks_iter!
-             ({} {} { T : trading_pair :: Config + core :: fmt :: Debug } () () () ()
? ^^^^^^^^^^^^^

+ benchmarks_iter! { {} {} { T : trading_pair :: Config + core :: fmt :: Debug } () () () ()
? ^^^^^^^^^^^^^^^^^^^

              #[configs((x, y) = [(1, 2), (3, 4)])] delete_orderbook { let aboba = 1234 ; }
              :
              {
                  OrderBookPallet::<T>::delete_orderbook(RawOrigin::Root.into(),
                          order_book_id).unwrap();
              }
              verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
              {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
              verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
              {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
              verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
              {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
              verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
              {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
              verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
              {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
              verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
              {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
              verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
              {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
              verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
-             {} verify {} verify {} verify {} verify {} verify {} verify
?                                                              ----------

+             {} verify {} verify {} verify {} verify {} verify
              {
                  assert_eq! (OrderBookPallet :: < T > :: order_books(order_book_id), None)
                  ;
-             }) ;
?              ^^^

+             } }
?              ^^

====================================================================================================
Diff from
'''
benchmarks_iter! { {} {} { T : trading_pair :: Config + core :: fmt :: Debug } () () () ()
            #[configs((x, y) = [(1, 2), (3, 4)])] delete_orderbook { let aboba = 1234 ; }
            :
            {
                OrderBookPallet::<T>::delete_orderbook(RawOrigin::Root.into(),
                        order_book_id).unwrap();
            }
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify
            {
                assert_eq! (OrderBookPallet :: < T > :: order_books(order_book_id), None)
                ;
            } }
'''
to
'''
$crate :: benchmarks_iter!
            ({} {} { T : trading_pair :: Config + core :: fmt :: Debug } () () () ()
            #[configs((x, y) = [(1, 2), (3, 4)])] delete_orderbook { let aboba = 1234 ; }
            :
            {
                OrderBookPallet::<T>::delete_orderbook(RawOrigin::Root.into(),
                        order_book_id).unwrap();
            }
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {
                assert_eq! (OrderBookPallet :: < T > :: order_books(order_book_id), None)
                ;
            }) ;
'''
::::::::::::::::::::::::::::::::::::::::::::::::::
- $crate :: benchmarks_iter!
-             ({} {} { T : trading_pair :: Config + core :: fmt :: Debug } () () () ()
? ^^^^^^^^^^^^^

+ benchmarks_iter! { {} {} { T : trading_pair :: Config + core :: fmt :: Debug } () () () ()
? ^^^^^^^^^^^^^^^^^^^

              #[configs((x, y) = [(1, 2), (3, 4)])] delete_orderbook { let aboba = 1234 ; }
              :
              {
                  OrderBookPallet::<T>::delete_orderbook(RawOrigin::Root.into(),
                          order_book_id).unwrap();
              }
              verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
              {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
              verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
              {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
              verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
              {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
              verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
              {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
              verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
              {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
              verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
              {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
              verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
              {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
              verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
-             {} verify {} verify {} verify {} verify {} verify {} verify {} verify
?                                                                        ----------

+             {} verify {} verify {} verify {} verify {} verify {} verify
              {
                  assert_eq! (OrderBookPallet :: < T > :: order_books(order_book_id), None)
                  ;
-             }) ;
?              ^^^

+             } }
?              ^^

====================================================================================================
Diff from
'''
benchmarks_iter! { {} {} { T : trading_pair :: Config + core :: fmt :: Debug } () () () ()
            #[configs((x, y) = [(1, 2), (3, 4)])] delete_orderbook { let aboba = 1234 ; }
            :
            {
                OrderBookPallet::<T>::delete_orderbook(RawOrigin::Root.into(),
                        order_book_id).unwrap();
            }
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {
                assert_eq! (OrderBookPallet :: < T > :: order_books(order_book_id), None)
                ;
            } }
'''
to
'''
$crate :: benchmarks_iter!
            ({} {} { T : trading_pair :: Config + core :: fmt :: Debug } () () () ()
            #[configs((x, y) = [(1, 2), (3, 4)])] delete_orderbook { let aboba = 1234 ; }
            :
            {
                OrderBookPallet::<T>::delete_orderbook(RawOrigin::Root.into(),
                        order_book_id).unwrap();
            }
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify
            {
                assert_eq! (OrderBookPallet :: < T > :: order_books(order_book_id), None)
                ;
            }) ;
'''
::::::::::::::::::::::::::::::::::::::::::::::::::
- $crate :: benchmarks_iter!
-             ({} {} { T : trading_pair :: Config + core :: fmt :: Debug } () () () ()
? ^^^^^^^^^^^^^

+ benchmarks_iter! { {} {} { T : trading_pair :: Config + core :: fmt :: Debug } () () () ()
? ^^^^^^^^^^^^^^^^^^^

              #[configs((x, y) = [(1, 2), (3, 4)])] delete_orderbook { let aboba = 1234 ; }
              :
              {
                  OrderBookPallet::<T>::delete_orderbook(RawOrigin::Root.into(),
                          order_book_id).unwrap();
              }
              verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
              {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
              verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
              {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
              verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
              {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
              verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
              {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
              verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
              {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
              verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
              {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
              verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
              {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
              verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
-             {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
?                                                                                  ---

+             {} verify {} verify {} verify {} verify {} verify {} verify {} verify
-             verify
              {
                  assert_eq! (OrderBookPallet :: < T > :: order_books(order_book_id), None)
                  ;
-             }) ;
?              ^^^

+             } }
?              ^^

====================================================================================================
Diff from
'''
benchmarks_iter! { {} {} { T : trading_pair :: Config + core :: fmt :: Debug } () () () ()
            #[configs((x, y) = [(1, 2), (3, 4)])] delete_orderbook { let aboba = 1234 ; }
            :
            {
                OrderBookPallet::<T>::delete_orderbook(RawOrigin::Root.into(),
                        order_book_id).unwrap();
            }
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify
            {
                assert_eq! (OrderBookPallet :: < T > :: order_books(order_book_id), None)
                ;
            } }
'''
to
'''
$crate :: benchmarks_iter!
            ({} {} { T : trading_pair :: Config + core :: fmt :: Debug } () () () ()
            #[configs((x, y) = [(1, 2), (3, 4)])] delete_orderbook { let aboba = 1234 ; }
            :
            {
                OrderBookPallet::<T>::delete_orderbook(RawOrigin::Root.into(),
                        order_book_id).unwrap();
            }
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify
            {
                assert_eq! (OrderBookPallet :: < T > :: order_books(order_book_id), None)
                ;
            }) ;
'''
::::::::::::::::::::::::::::::::::::::::::::::::::
- $crate :: benchmarks_iter!
-             ({} {} { T : trading_pair :: Config + core :: fmt :: Debug } () () () ()
? ^^^^^^^^^^^^^

+ benchmarks_iter! { {} {} { T : trading_pair :: Config + core :: fmt :: Debug } () () () ()
? ^^^^^^^^^^^^^^^^^^^

              #[configs((x, y) = [(1, 2), (3, 4)])] delete_orderbook { let aboba = 1234 ; }
              :
              {
                  OrderBookPallet::<T>::delete_orderbook(RawOrigin::Root.into(),
                          order_book_id).unwrap();
              }
              verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
              {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
              verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
              {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
              verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
              {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
              verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
              {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
              verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
              {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
              verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
              {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
              verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
              {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
              verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
              {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
-             verify {} verify
?                   ----------

+             verify
              {
                  assert_eq! (OrderBookPallet :: < T > :: order_books(order_book_id), None)
                  ;
-             }) ;
?              ^^^

+             } }
?              ^^

====================================================================================================
Diff from
'''
benchmarks_iter! { {} {} { T : trading_pair :: Config + core :: fmt :: Debug } () () () ()
            #[configs((x, y) = [(1, 2), (3, 4)])] delete_orderbook { let aboba = 1234 ; }
            :
            {
                OrderBookPallet::<T>::delete_orderbook(RawOrigin::Root.into(),
                        order_book_id).unwrap();
            }
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify
            {
                assert_eq! (OrderBookPallet :: < T > :: order_books(order_book_id), None)
                ;
            } }
'''
to
'''
$crate :: benchmarks_iter!
            ({} {} { T : trading_pair :: Config + core :: fmt :: Debug } () () () ()
            #[configs((x, y) = [(1, 2), (3, 4)])] delete_orderbook { let aboba = 1234 ; }
            :
            {
                OrderBookPallet::<T>::delete_orderbook(RawOrigin::Root.into(),
                        order_book_id).unwrap();
            }
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify
            {
                assert_eq! (OrderBookPallet :: < T > :: order_books(order_book_id), None)
                ;
            }) ;
'''
::::::::::::::::::::::::::::::::::::::::::::::::::
- $crate :: benchmarks_iter!
-             ({} {} { T : trading_pair :: Config + core :: fmt :: Debug } () () () ()
? ^^^^^^^^^^^^^

+ benchmarks_iter! { {} {} { T : trading_pair :: Config + core :: fmt :: Debug } () () () ()
? ^^^^^^^^^^^^^^^^^^^

              #[configs((x, y) = [(1, 2), (3, 4)])] delete_orderbook { let aboba = 1234 ; }
              :
              {
                  OrderBookPallet::<T>::delete_orderbook(RawOrigin::Root.into(),
                          order_book_id).unwrap();
              }
              verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
              {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
              verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
              {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
              verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
              {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
              verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
              {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
              verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
              {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
              verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
              {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
              verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
              {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
              verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
              {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
-             verify {} verify {} verify
?                             ----------

+             verify {} verify
              {
                  assert_eq! (OrderBookPallet :: < T > :: order_books(order_book_id), None)
                  ;
-             }) ;
?              ^^^

+             } }
?              ^^

====================================================================================================
Diff from
'''
benchmarks_iter! { {} {} { T : trading_pair :: Config + core :: fmt :: Debug } () () () ()
            #[configs((x, y) = [(1, 2), (3, 4)])] delete_orderbook { let aboba = 1234 ; }
            :
            {
                OrderBookPallet::<T>::delete_orderbook(RawOrigin::Root.into(),
                        order_book_id).unwrap();
            }
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify
            {
                assert_eq! (OrderBookPallet :: < T > :: order_books(order_book_id), None)
                ;
            } }
'''
to
'''
$crate :: benchmarks_iter!
            ({} {} { T : trading_pair :: Config + core :: fmt :: Debug } () () () ()
            #[configs((x, y) = [(1, 2), (3, 4)])] delete_orderbook { let aboba = 1234 ; }
            :
            {
                OrderBookPallet::<T>::delete_orderbook(RawOrigin::Root.into(),
                        order_book_id).unwrap();
            }
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify
            {
                assert_eq! (OrderBookPallet :: < T > :: order_books(order_book_id), None)
                ;
            }) ;
'''
::::::::::::::::::::::::::::::::::::::::::::::::::
- $crate :: benchmarks_iter!
-             ({} {} { T : trading_pair :: Config + core :: fmt :: Debug } () () () ()
? ^^^^^^^^^^^^^

+ benchmarks_iter! { {} {} { T : trading_pair :: Config + core :: fmt :: Debug } () () () ()
? ^^^^^^^^^^^^^^^^^^^

              #[configs((x, y) = [(1, 2), (3, 4)])] delete_orderbook { let aboba = 1234 ; }
              :
              {
                  OrderBookPallet::<T>::delete_orderbook(RawOrigin::Root.into(),
                          order_book_id).unwrap();
              }
              verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
              {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
              verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
              {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
              verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
              {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
              verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
              {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
              verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
              {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
              verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
              {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
              verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
              {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
              verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
              {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
-             verify {} verify {} verify {} verify
?                                       ----------

+             verify {} verify {} verify
              {
                  assert_eq! (OrderBookPallet :: < T > :: order_books(order_book_id), None)
                  ;
-             }) ;
?              ^^^

+             } }
?              ^^

====================================================================================================
Diff from
'''
benchmarks_iter! { {} {} { T : trading_pair :: Config + core :: fmt :: Debug } () () () ()
            #[configs((x, y) = [(1, 2), (3, 4)])] delete_orderbook { let aboba = 1234 ; }
            :
            {
                OrderBookPallet::<T>::delete_orderbook(RawOrigin::Root.into(),
                        order_book_id).unwrap();
            }
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify
            {
                assert_eq! (OrderBookPallet :: < T > :: order_books(order_book_id), None)
                ;
            } }
'''
to
'''
$crate :: benchmarks_iter!
            ({} {} { T : trading_pair :: Config + core :: fmt :: Debug } () () () ()
            #[configs((x, y) = [(1, 2), (3, 4)])] delete_orderbook { let aboba = 1234 ; }
            :
            {
                OrderBookPallet::<T>::delete_orderbook(RawOrigin::Root.into(),
                        order_book_id).unwrap();
            }
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify
            {
                assert_eq! (OrderBookPallet :: < T > :: order_books(order_book_id), None)
                ;
            }) ;
'''
::::::::::::::::::::::::::::::::::::::::::::::::::
- $crate :: benchmarks_iter!
-             ({} {} { T : trading_pair :: Config + core :: fmt :: Debug } () () () ()
? ^^^^^^^^^^^^^

+ benchmarks_iter! { {} {} { T : trading_pair :: Config + core :: fmt :: Debug } () () () ()
? ^^^^^^^^^^^^^^^^^^^

              #[configs((x, y) = [(1, 2), (3, 4)])] delete_orderbook { let aboba = 1234 ; }
              :
              {
                  OrderBookPallet::<T>::delete_orderbook(RawOrigin::Root.into(),
                          order_book_id).unwrap();
              }
              verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
              {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
              verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
              {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
              verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
              {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
              verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
              {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
              verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
              {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
              verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
              {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
              verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
              {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
              verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
              {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
-             verify {} verify {} verify {} verify {} verify
?                                                 ----------

+             verify {} verify {} verify {} verify
              {
                  assert_eq! (OrderBookPallet :: < T > :: order_books(order_book_id), None)
                  ;
-             }) ;
?              ^^^

+             } }
?              ^^

====================================================================================================
Diff from
'''
benchmarks_iter! { {} {} { T : trading_pair :: Config + core :: fmt :: Debug } () () () ()
            #[configs((x, y) = [(1, 2), (3, 4)])] delete_orderbook { let aboba = 1234 ; }
            :
            {
                OrderBookPallet::<T>::delete_orderbook(RawOrigin::Root.into(),
                        order_book_id).unwrap();
            }
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify
            {
                assert_eq! (OrderBookPallet :: < T > :: order_books(order_book_id), None)
                ;
            } }
'''
to
'''
$crate :: benchmarks_iter!
            ({} {} { T : trading_pair :: Config + core :: fmt :: Debug } () () () ()
            #[configs((x, y) = [(1, 2), (3, 4)])] delete_orderbook { let aboba = 1234 ; }
            :
            {
                OrderBookPallet::<T>::delete_orderbook(RawOrigin::Root.into(),
                        order_book_id).unwrap();
            }
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify
            {
                assert_eq! (OrderBookPallet :: < T > :: order_books(order_book_id), None)
                ;
            }) ;
'''
::::::::::::::::::::::::::::::::::::::::::::::::::
- $crate :: benchmarks_iter!
-             ({} {} { T : trading_pair :: Config + core :: fmt :: Debug } () () () ()
? ^^^^^^^^^^^^^

+ benchmarks_iter! { {} {} { T : trading_pair :: Config + core :: fmt :: Debug } () () () ()
? ^^^^^^^^^^^^^^^^^^^

              #[configs((x, y) = [(1, 2), (3, 4)])] delete_orderbook { let aboba = 1234 ; }
              :
              {
                  OrderBookPallet::<T>::delete_orderbook(RawOrigin::Root.into(),
                          order_book_id).unwrap();
              }
              verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
              {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
              verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
              {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
              verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
              {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
              verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
              {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
              verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
              {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
              verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
              {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
              verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
              {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
              verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
              {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
-             verify {} verify {} verify {} verify {} verify {} verify
?                                                           ----------

+             verify {} verify {} verify {} verify {} verify
              {
                  assert_eq! (OrderBookPallet :: < T > :: order_books(order_book_id), None)
                  ;
-             }) ;
?              ^^^

+             } }
?              ^^

====================================================================================================
Diff from
'''
benchmarks_iter! { {} {} { T : trading_pair :: Config + core :: fmt :: Debug } () () () ()
            #[configs((x, y) = [(1, 2), (3, 4)])] delete_orderbook { let aboba = 1234 ; }
            :
            {
                OrderBookPallet::<T>::delete_orderbook(RawOrigin::Root.into(),
                        order_book_id).unwrap();
            }
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify
            {
                assert_eq! (OrderBookPallet :: < T > :: order_books(order_book_id), None)
                ;
            } }
'''
to
'''
$crate :: benchmarks_iter!
            ({} {} { T : trading_pair :: Config + core :: fmt :: Debug } () () () ()
            #[configs((x, y) = [(1, 2), (3, 4)])] delete_orderbook { let aboba = 1234 ; }
            :
            {
                OrderBookPallet::<T>::delete_orderbook(RawOrigin::Root.into(),
                        order_book_id).unwrap();
            }
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
            {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
            verify {} verify {} verify {} verify {} verify {} verify {} verify
            {
                assert_eq! (OrderBookPallet :: < T > :: order_books(order_book_id), None)
                ;
            }) ;
'''
::::::::::::::::::::::::::::::::::::::::::::::::::
- $crate :: benchmarks_iter!
-             ({} {} { T : trading_pair :: Config + core :: fmt :: Debug } () () () ()
? ^^^^^^^^^^^^^

+ benchmarks_iter! { {} {} { T : trading_pair :: Config + core :: fmt :: Debug } () () () ()
? ^^^^^^^^^^^^^^^^^^^

              #[configs((x, y) = [(1, 2), (3, 4)])] delete_orderbook { let aboba = 1234 ; }
              :
              {
                  OrderBookPallet::<T>::delete_orderbook(RawOrigin::Root.into(),
                          order_book_id).unwrap();
              }
              verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
              {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
              verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
              {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
              verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
              {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
              verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
              {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
              verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
              {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
              verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
              {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
              verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
              {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
              verify {} verify {} verify {} verify {} verify {} verify {} verify {} verify
              {} verify {} verify {} verify {} verify {} verify {} verify {} verify {}
-             verify {} verify {} verify {} verify {} verify {} verify {} verify
?                                                                     ----------

+             verify {} verify {} verify {} verify {} verify {} verify
              {
                  assert_eq! (OrderBookPallet :: < T > :: order_books(order_book_id), None)
                  ;
-             }) ;
?              ^^^

+             } }
?              ^^

====================================================================================================
